{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"Calib",
				"CalibBoxPortNumber"
			],
			[
				"Safe",
				"SafeSleepSec"
			],
			[
				"LIS",
				"LISD3H_COMM_MODE"
			],
			[
				"LIS3DH_C",
				"LISD3H_CS_PIN"
			],
			[
				"HAL_I",
				"HAL_I2C_Master_Transmit"
			],
			[
				"LISD3H_COMM_",
				"LISD3H_COMM_HANDLER"
			],
			[
				"Re",
				"Result_tempC"
			],
			[
				"std",
				"std_logic"
			],
			[
				"mode",
				"mode_sig"
			],
			[
				"step",
				"step_in_sig"
			],
			[
				"ste",
				"step_in"
			],
			[
				"sw",
				"sw_sig"
			],
			[
				"r",
				"rst"
			],
			[
				"sig",
				"sigGen_raw"
			],
			[
				"clk",
				"clk12"
			],
			[
				"re",
				"reg_h0"
			],
			[
				"Res",
				"Result_tempP"
			],
			[
				"ne",
				"next_state"
			],
			[
				"w",
				"WriteAdd_o"
			],
			[
				"STD",
				"STD_LOGIC"
			],
			[
				"new",
				"newSample"
			],
			[
				"wri",
				"WriteEnable_o"
			],
			[
				"ou",
				"OutputEnable_o"
			],
			[
				"Sta",
				"StartAddrBuff"
			],
			[
				"G",
				"GainValue_o"
			],
			[
				"Out",
				"OutputEnableBuff"
			],
			[
				"Ma",
				"MaxAddrBuff"
			],
			[
				"St",
				"StepSizeValue_o"
			],
			[
				"Clo",
				"ClockDivBuff"
			],
			[
				"DMA",
				"DMATabValu"
			],
			[
				"ma",
				"ma_var"
			],
			[
				"ent",
				"entarch\tentity architecture"
			],
			[
				"wr",
				"WR"
			],
			[
				"Wri",
				"WriteAdd"
			],
			[
				"Cl",
				"ClockDivBuff"
			],
			[
				"Step",
				"StepSizeValue"
			],
			[
				"Max",
				"MaxAddressValue"
			],
			[
				"RX",
				"RXDataBuff"
			],
			[
				"M",
				"MaxAddrBuff"
			],
			[
				"sta",
				"StartAddrBuff"
			],
			[
				"st",
				"StartAddrBuff"
			],
			[
				"stdl",
				"std_logic_vector"
			],
			[
				"state",
				"state_changed"
			],
			[
				"le",
				"level"
			],
			[
				"remo",
				"remoteData"
			],
			[
				"adcS",
				"adcDataSem"
			],
			[
				"OSSEM",
				"OSSemPost"
			],
			[
				"debug",
				"debugSend"
			],
			[
				"OSTim",
				"OSTimeDly"
			],
			[
				"TWI",
				"TWI_STOP"
			],
			[
				"T",
				"TWI_ACTIVE"
			],
			[
				"TW",
				"TWI_START"
			],
			[
				"TWI_",
				"TWI_SEND"
			],
			[
				"SLA",
				"SLA_R"
			],
			[
				"W",
				"WAITING"
			],
			[
				"twi",
				"twiBusState"
			],
			[
				"STA",
				"START"
			],
			[
				"tw",
				"twiBusState"
			],
			[
				"json",
				"json_encode"
			],
			[
				"addr",
				"addr"
			],
			[
				"ad",
				"address"
			]
		]
	},
	"buffers":
	[
		{
			"file": "/E/Documents/Simon/Mes documents/3dPrint/Firmware/PrusaFW/.gitignore",
			"settings":
			{
				"buffer_size": 1,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			}
		},
		{
			"contents": "Searching 934 files for \"Unload filament\"\n\nE:\\Documents\\Simon\\Mes documents\\3dPrint\\Firmware\\PrusaFW\\Firmware\\Configuration_prusa.h:\n   97  \n   98  /*------------------------------------\n   99: LOAD/UNLOAD FILAMENT SETTINGS\n  100  *------------------------------------*/\n  101  \n  ...\n  105  #define LOAD_FILAMENT_2 \"G1 E40 F100\"\n  106  \n  107: // Unload filament commands\n  108  #define UNLOAD_FILAMENT_0 \"M83\"\n  109  #define UNLOAD_FILAMENT_1 \"G1 E10 F400\" \n\nE:\\Documents\\Simon\\Mes documents\\3dPrint\\Firmware\\PrusaFW\\Firmware\\language_all.cpp:\n 2122  };\n 2123  \n 2124: const char MSG_UNLOAD_FILAMENT_EN[] PROGMEM = \"Unload filament\";\n 2125  const char MSG_UNLOAD_FILAMENT_CZ[] PROGMEM = \"Vyjmout filament\";\n 2126  const char MSG_UNLOAD_FILAMENT_IT[] PROGMEM = \"Scarica filamento\";\n\nE:\\Documents\\Simon\\Mes documents\\3dPrint\\Firmware\\PrusaFW\\Firmware\\language_en.h:\n   70  #define MSG_SETTINGS                         \"Settings\"\n   71  #define MSG_PREHEAT                         \"Preheat\"\n   72: #define MSG_UNLOAD_FILAMENT                 \"Unload filament\"\n   73  #define MSG_LOAD_FILAMENT                 \"Load filament\"\n   74  \n\nE:\\Documents\\Simon\\Mes documents\\3dPrint\\Firmware\\PrusaFW\\Firmware\\Marlin_main.cpp:\n 4430          plan_buffer_line(target[X_AXIS], target[Y_AXIS], target[Z_AXIS], target[E_AXIS], FILAMENTCHANGE_XYFEED, active_extruder);\n 4431  \n 4432:         // Unload filament\n 4433          if(code_seen('L'))\n 4434          {\n\nE:\\Documents\\Simon\\Mes documents\\3dPrint\\Firmware\\PrusaFW\\Firmware\\variants\\1_75mm_MK2-RAMBo10a-E3Dv6full.h:\n   97  \n   98  /*------------------------------------\n   99: LOAD/UNLOAD FILAMENT SETTINGS\n  100  *------------------------------------*/\n  101  \n  ...\n  105  #define LOAD_FILAMENT_2 \"G1 E40 F100\"\n  106  \n  107: // Unload filament commands\n  108  #define UNLOAD_FILAMENT_0 \"M83\"\n  109  #define UNLOAD_FILAMENT_1 \"G1 E-80 F7000\"\n\nE:\\Documents\\Simon\\Mes documents\\3dPrint\\Firmware\\PrusaFW\\Firmware\\variants\\1_75mm_MK2-RAMBo13a-E3Dv6full.h:\n   97  \n   98  /*------------------------------------\n   99: LOAD/UNLOAD FILAMENT SETTINGS\n  100  *------------------------------------*/\n  101  \n  ...\n  105  #define LOAD_FILAMENT_2 \"G1 E40 F100\"\n  106  \n  107: // Unload filament commands\n  108  #define UNLOAD_FILAMENT_0 \"M83\"\n  109  #define UNLOAD_FILAMENT_1 \"G1 E-80 F7000\"\n\n9 matches across 6 files\n\n\nSearching 934 files for \"LOAD_FILAMENT_1\"\n\nE:\\Documents\\Simon\\Mes documents\\3dPrint\\Firmware\\PrusaFW\\Firmware\\Configuration_prusa.h:\n  102  // Load filament commands\n  103  #define LOAD_FILAMENT_0 \"M83\"\n  104: #define LOAD_FILAMENT_1 \"G1 E70 F400\"\n  105  #define LOAD_FILAMENT_2 \"G1 E40 F100\"\n  106  \n  107  // Unload filament commands\n  108  #define UNLOAD_FILAMENT_0 \"M83\"\n  109: #define UNLOAD_FILAMENT_1 \"G1 E10 F400\" \n  110  #define UNLOAD_FILAMENT_2 \"G1 E-90 F6000\" \n  111  \n\nE:\\Documents\\Simon\\Mes documents\\3dPrint\\Firmware\\PrusaFW\\Firmware\\ultralcd.cpp:\n  517  \t\t\tif (lcd_commands_step == 3 && !blocks_queued())\n  518  \t\t\t{\n  519: \t\t\t\tenquecommand_P(PSTR(LOAD_FILAMENT_1));\n  520                  enquecommand_P(PSTR(\"G4\"));\n  521  \t\t\t\tlcd_commands_step = 2;\n  ...\n  825  \n  826      enquecommand_P(PSTR(UNLOAD_FILAMENT_0));\n  827:     enquecommand_P(PSTR(UNLOAD_FILAMENT_1));\n  828      enquecommand_P(PSTR(UNLOAD_FILAMENT_2)); \n  829    } else {\n\nE:\\Documents\\Simon\\Mes documents\\3dPrint\\Firmware\\PrusaFW\\Firmware\\variants\\1_75mm_MK2-RAMBo10a-E3Dv6full.h:\n  102  // Load filament commands\n  103  #define LOAD_FILAMENT_0 \"M83\"\n  104: #define LOAD_FILAMENT_1 \"G1 E70 F400\"\n  105  #define LOAD_FILAMENT_2 \"G1 E40 F100\"\n  106  \n  107  // Unload filament commands\n  108  #define UNLOAD_FILAMENT_0 \"M83\"\n  109: #define UNLOAD_FILAMENT_1 \"G1 E-80 F7000\"\n  110  \n  111  /*------------------------------------\n\nE:\\Documents\\Simon\\Mes documents\\3dPrint\\Firmware\\PrusaFW\\Firmware\\variants\\1_75mm_MK2-RAMBo13a-E3Dv6full.h:\n  102  // Load filament commands\n  103  #define LOAD_FILAMENT_0 \"M83\"\n  104: #define LOAD_FILAMENT_1 \"G1 E70 F400\"\n  105  #define LOAD_FILAMENT_2 \"G1 E40 F100\"\n  106  \n  107  // Unload filament commands\n  108  #define UNLOAD_FILAMENT_0 \"M83\"\n  109: #define UNLOAD_FILAMENT_1 \"G1 E-80 F7000\"\n  110  \n  111  /*------------------------------------\n\n8 matches across 4 files\n\n\nSearching 934 files for \"WELCOME_MSG\"\n\nE:\\Documents\\Simon\\Mes documents\\3dPrint\\Firmware\\PrusaFW\\Firmware\\language_all.cpp:\n 2250  };\n 2251  \n 2252: const char WELCOME_MSG_EN[] PROGMEM = CUSTOM_MENDEL_NAME \" ready.\";\n 2253: const char WELCOME_MSG_CZ[] PROGMEM = CUSTOM_MENDEL_NAME \" ok\";\n 2254: const char WELCOME_MSG_IT[] PROGMEM = CUSTOM_MENDEL_NAME \"pronta.\";\n 2255: const char WELCOME_MSG_ES[] PROGMEM = CUSTOM_MENDEL_NAME \" lista\";\n 2256: const char WELCOME_MSG_PL[] PROGMEM = CUSTOM_MENDEL_NAME \" gotowa\";\n 2257: const char * const WELCOME_MSG_LANG_TABLE[LANG_NUM] PROGMEM = {\n 2258: \tWELCOME_MSG_EN,\n 2259: \tWELCOME_MSG_CZ,\n 2260: \tWELCOME_MSG_IT,\n 2261: \tWELCOME_MSG_ES,\n 2262: \tWELCOME_MSG_PL\n 2263  };\n 2264  \n\nE:\\Documents\\Simon\\Mes documents\\3dPrint\\Firmware\\PrusaFW\\Firmware\\language_all.h:\n  509  extern const char* const MSG_Z_MIN_LANG_TABLE[1];\n  510  #define MSG_Z_MIN LANG_TABLE_SELECT_EXPLICIT(MSG_Z_MIN_LANG_TABLE, 0)\n  511: extern const char* const WELCOME_MSG_LANG_TABLE[LANG_NUM];\n  512: #define WELCOME_MSG LANG_TABLE_SELECT(WELCOME_MSG_LANG_TABLE)\n  513  \n  514  extern char* CAT2(const char *s1,const char *s2);\n\nE:\\Documents\\Simon\\Mes documents\\3dPrint\\Firmware\\PrusaFW\\Firmware\\language_cz.h:\n    6   *\n    7   */\n    8: #define WELCOME_MSG                         CUSTOM_MENDEL_NAME \" ok\"\n    9  #define MSG_SD_INSERTED                     \"Karta vlozena\"\n   10  #define MSG_SD_REMOVED                      \"Karta vyjmuta\"\n\nE:\\Documents\\Simon\\Mes documents\\3dPrint\\Firmware\\PrusaFW\\Firmware\\language_en.h:\n    7   */\n    8  \n    9: #define(length=20) WELCOME_MSG              CUSTOM_MENDEL_NAME \" ready.\"\n   10  #define MSG_SD_INSERTED                     \"Card inserted\"\n   11  #define MSG_SD_REMOVED                      \"Card removed\"\n\nE:\\Documents\\Simon\\Mes documents\\3dPrint\\Firmware\\PrusaFW\\Firmware\\language_es.h:\n    7   */\n    8  \n    9: #define WELCOME_MSG                         CUSTOM_MENDEL_NAME \" lista\"\n   10  #define MSG_SD_INSERTED                     \"Tarjeta colocada\"\n   11  #define MSG_SD_REMOVED                      \"Tarjeta retirada\"\n\nE:\\Documents\\Simon\\Mes documents\\3dPrint\\Firmware\\PrusaFW\\Firmware\\language_it.h:\n    1: #define WELCOME_MSG                         CUSTOM_MENDEL_NAME \"pronta.\"\n    2  #define MSG_SD_INSERTED                     \"SD inserita\"\n    3  #define MSG_SD_REMOVED                      \"SD rimossa\"\n\nE:\\Documents\\Simon\\Mes documents\\3dPrint\\Firmware\\PrusaFW\\Firmware\\language_pl.h:\n    7   */\n    8  \n    9: #define WELCOME_MSG                         CUSTOM_MENDEL_NAME \" gotowa\"\n   10  #define MSG_SD_INSERTED                     \"Karta wlozona\"\n   11  #define MSG_SD_REMOVED                      \"Karta wyjeta\"\n\nE:\\Documents\\Simon\\Mes documents\\3dPrint\\Firmware\\PrusaFW\\Firmware\\Marlin_main.cpp:\n 2735          LCD_MESSAGERPGM(MSG_RESUMING);\n 2736        else\n 2737:         LCD_MESSAGERPGM(WELCOME_MSG);\n 2738      }\n 2739      break;\n ....\n 3556          #ifdef ULTIPANEL\n 3557            powersupply = true;\n 3558:           LCD_MESSAGERPGM(WELCOME_MSG);\n 3559            lcd_update();\n 3560          #endif\n\nE:\\Documents\\Simon\\Mes documents\\3dPrint\\Firmware\\PrusaFW\\Firmware\\ultralcd.cpp:\n  337       \n  338        if(lcd_status_message_level == 0){\n  339:           strncpy_P(lcd_status_message, WELCOME_MSG, LCD_WIDTH);\n  340        }\n  341  \tif (eeprom_read_byte((uint8_t *)EEPROM_TOTALTIME) == 255 && eeprom_read_byte((uint8_t *)EEPROM_TOTALTIME + 1) == 255 && eeprom_read_byte((uint8_t *)EEPROM_TOTALTIME + 2) == 255 && eeprom_read_byte((uint8_t *)EEPROM_TOTALTIME + 3) == 255)\n  ...\n  503  \t\t\t\tlcd_commands_step = 0;\n  504  \t\t\t\tlcd_commands_type = 0;\n  505: \t\t\t\tlcd_setstatuspgm(WELCOME_MSG);\n  506  \t\t\t\tdisable_z();\n  507  \t\t\t\tcustom_message = false;\n  ...\n  547  \t\t\tlcd_commands_step = 0;\n  548  \t\t\tlcd_commands_type = 0;\n  549: \t\t\tlcd_setstatuspgm(WELCOME_MSG);\n  550  \t\t\tcustom_message = false;\n  551  \t\t}\n  ...\n  557  \t\t\tsetTargetHotend(0, 2);\n  558  \t\t\tmanage_heater();\n  559: \t\t\tlcd_setstatuspgm(WELCOME_MSG);\n  560  \t\t\tcancel_heatup = false;\n  561  \t\t\tlcd_commands_step = 1;\n\nE:\\Documents\\Simon\\Mes documents\\3dPrint\\Firmware\\PrusaFW\\Firmware\\ultralcd_implementation_hitachi_HD44780.h:\n  902  \t\t\t\t\tif (custom_message_state == 3)\n  903  \t\t\t\t\t{\n  904: \t\t\t\t\t\tlcd_printPGM(WELCOME_MSG);\n  905: \t\t\t\t\t\tlcd_setstatuspgm(WELCOME_MSG);\n  906  \t\t\t\t\t\tcustom_message = false;\n  907  \t\t\t\t\t\tcustom_message_type = 0;\n\n27 matches across 10 files\n\n\nSearching 934 files for \"MSG_LOADING_FILAMENT\"\n\nE:\\Documents\\Simon\\Mes documents\\3dPrint\\Firmware\\PrusaFW\\Firmware\\language_all.cpp:\n  915  };\n  916  \n  917: const char MSG_LOADING_FILAMENT_EN[] PROGMEM = \"Loading filament\";\n  918: const char MSG_LOADING_FILAMENT_CZ[] PROGMEM = \"Zavadeni filamentu\";\n  919: const char MSG_LOADING_FILAMENT_IT[] PROGMEM = \"Cargando fil.\";\n  920: const char MSG_LOADING_FILAMENT_ES[] PROGMEM = \"Cargando fil.\";\n  921: const char MSG_LOADING_FILAMENT_PL[] PROGMEM = \"Wprow. filamentu\";\n  922: const char * const MSG_LOADING_FILAMENT_LANG_TABLE[LANG_NUM] PROGMEM = {\n  923: \tMSG_LOADING_FILAMENT_EN,\n  924: \tMSG_LOADING_FILAMENT_CZ,\n  925: \tMSG_LOADING_FILAMENT_IT,\n  926: \tMSG_LOADING_FILAMENT_ES,\n  927: \tMSG_LOADING_FILAMENT_PL\n  928  };\n  929  \n\nE:\\Documents\\Simon\\Mes documents\\3dPrint\\Firmware\\PrusaFW\\Firmware\\language_all.h:\n  219  extern const char* const MSG_LOADING_COLOR_LANG_TABLE[LANG_NUM];\n  220  #define MSG_LOADING_COLOR LANG_TABLE_SELECT(MSG_LOADING_COLOR_LANG_TABLE)\n  221: extern const char* const MSG_LOADING_FILAMENT_LANG_TABLE[LANG_NUM];\n  222: #define MSG_LOADING_FILAMENT LANG_TABLE_SELECT(MSG_LOADING_FILAMENT_LANG_TABLE)\n  223  extern const char* const MSG_LOAD_EPROM_LANG_TABLE[1];\n  224  #define MSG_LOAD_EPROM LANG_TABLE_SELECT_EXPLICIT(MSG_LOAD_EPROM_LANG_TABLE, 0)\n\nE:\\Documents\\Simon\\Mes documents\\3dPrint\\Firmware\\PrusaFW\\Firmware\\language_cz.h:\n   85  #define MSG_NOT_LOADED \t\t\t\"Filament nezaveden\"\n   86  #define MSG_NOT_COLOR \t\t\t\"Barva neni cista\"\n   87: #define MSG_LOADING_FILAMENT\t        \"Zavadeni filamentu\"\n   88  #define MSG_PLEASE_WAIT\t\t\t\"Prosim cekejte\"\n   89  #define MSG_LOADING_COLOR\t\t\"Cisteni barvy\"\n\nE:\\Documents\\Simon\\Mes documents\\3dPrint\\Firmware\\PrusaFW\\Firmware\\language_en.h:\n   82  #define(length=19) MSG_NOT_LOADED \t\t\t\"Filament not loaded\"\n   83  #define MSG_NOT_COLOR \t\t\t\"Color not clear\"\n   84: #define(length=20) MSG_LOADING_FILAMENT\t\t\"Loading filament\"\n   85  #define(length=20) MSG_PLEASE_WAIT\t\t\t\"Please wait\"\n   86  #define MSG_LOADING_COLOR\t\t\"Loading color\"\n\nE:\\Documents\\Simon\\Mes documents\\3dPrint\\Firmware\\PrusaFW\\Firmware\\language_es.h:\n   56  #define MSG_NOT_LOADED \t\t\t\t\t\t\"Fil. no cargado\"\n   57  #define MSG_NOT_COLOR \t\t\t\t\t\t\"Color no claro\"\n   58: #define MSG_LOADING_FILAMENT\t\t\t\t\"Cargando fil.\"\n   59  #define MSG_PLEASE_WAIT\t\t\t\t\t\t\"Espera\"\n   60  #define MSG_LOADING_COLOR\t\t\t\t\t\"Cargando color\"\n\nE:\\Documents\\Simon\\Mes documents\\3dPrint\\Firmware\\PrusaFW\\Firmware\\language_it.h:\n   80  #define MSG_ERROR                        \t\"ERROR:\"\n   81  #define MSG_CORRECTLY\t\t\t\t\t\t\"Cambiato corr.?\"\n   82: #define MSG_LOADING_FILAMENT\t\t\t\t\"Cargando fil.\"\n   83  #define MSG_UNLOAD_FILAMENT                 \"Scarica filamento\"\n   84  #define MSG_LOAD_FILAMENT                   \"Carica filamento\"\n\nE:\\Documents\\Simon\\Mes documents\\3dPrint\\Firmware\\PrusaFW\\Firmware\\language_pl.h:\n   55  #define MSG_NOT_LOADED                  \"Brak filamentu\"\n   56  #define MSG_NOT_COLOR                  \"Kolor zanieczysz.\"\n   57: #define MSG_LOADING_FILAMENT            \"Wprow. filamentu\"\n   58  #define MSG_PLEASE_WAIT                 \"Prosze czekac\"\n   59  #define MSG_LOADING_COLOR               \"Czyszcz. koloru\"\n\nE:\\Documents\\Simon\\Mes documents\\3dPrint\\Firmware\\PrusaFW\\Firmware\\ultralcd.cpp:\n  511  \t\t\tif (lcd_commands_step == 2 && !blocks_queued())\n  512  \t\t\t{\n  513: \t\t\t\tlcd_setstatuspgm(MSG_LOADING_FILAMENT);\n  514  \t\t\t\tenquecommand_P(PSTR(LOAD_FILAMENT_2));\n  515  \t\t\t\tlcd_commands_step = 1;\n  ...\n  914    lcd.setCursor(0, 0);\n  915  \n  916:   lcd_printPGM(MSG_LOADING_FILAMENT);\n  917    lcd.setCursor(0, 2);\n  918    lcd_printPGM(MSG_PLEASE_WAIT);\n\n21 matches across 8 files\n\n\nSearching 934 files for \"LOAD_FILAMENT_2\"\n\nE:\\Documents\\Simon\\Mes documents\\3dPrint\\Firmware\\PrusaFW\\Firmware\\Configuration_prusa.h:\n  103  #define LOAD_FILAMENT_0 \"M83\"\n  104  #define LOAD_FILAMENT_1 \"G1 E70 F400\"\n  105: #define LOAD_FILAMENT_2 \"G1 E40 F100\"\n  106  \n  107  // Unload filament commands\n  108  #define UNLOAD_FILAMENT_0 \"M83\"\n  109  #define UNLOAD_FILAMENT_1 \"G1 E10 F400\" \n  110: #define UNLOAD_FILAMENT_2 \"G1 E-90 F6000\" \n  111  \n  112  /*------------------------------------\n\nE:\\Documents\\Simon\\Mes documents\\3dPrint\\Firmware\\PrusaFW\\Firmware\\ultralcd.cpp:\n  512  \t\t\t{\n  513  \t\t\t\tlcd_setstatuspgm(MSG_LOADING_FILAMENT);\n  514: \t\t\t\tenquecommand_P(PSTR(LOAD_FILAMENT_2));\n  515  \t\t\t\tlcd_commands_step = 1;\n  516  \t\t\t}\n  ...\n  826      enquecommand_P(PSTR(UNLOAD_FILAMENT_0));\n  827      enquecommand_P(PSTR(UNLOAD_FILAMENT_1));\n  828:     enquecommand_P(PSTR(UNLOAD_FILAMENT_2)); \n  829    } else {\n  830  \n\nE:\\Documents\\Simon\\Mes documents\\3dPrint\\Firmware\\PrusaFW\\Firmware\\variants\\1_75mm_MK2-RAMBo10a-E3Dv6full.h:\n  103  #define LOAD_FILAMENT_0 \"M83\"\n  104  #define LOAD_FILAMENT_1 \"G1 E70 F400\"\n  105: #define LOAD_FILAMENT_2 \"G1 E40 F100\"\n  106  \n  107  // Unload filament commands\n\nE:\\Documents\\Simon\\Mes documents\\3dPrint\\Firmware\\PrusaFW\\Firmware\\variants\\1_75mm_MK2-RAMBo13a-E3Dv6full.h:\n  103  #define LOAD_FILAMENT_0 \"M83\"\n  104  #define LOAD_FILAMENT_1 \"G1 E70 F400\"\n  105: #define LOAD_FILAMENT_2 \"G1 E40 F100\"\n  106  \n  107  // Unload filament commands\n\n6 matches across 4 files\n\n\nSearching 934 files for \"OAD_FILAMENT_1\"\n\nE:\\Documents\\Simon\\Mes documents\\3dPrint\\Firmware\\PrusaFW\\Firmware\\Configuration_prusa.h:\n  102  // Load filament commands\n  103  #define LOAD_FILAMENT_0 \"M83\"\n  104: #define LOAD_FILAMENT_1 \"G1 E70 F400\"\n  105  #define LOAD_FILAMENT_2 \"G1 E40 F100\"\n  106  \n  107  // Unload filament commands\n  108  #define UNLOAD_FILAMENT_0 \"M83\"\n  109: #define UNLOAD_FILAMENT_1 \"G1 E10 F400\" \n  110  #define UNLOAD_FILAMENT_2 \"G1 E-90 F6000\" \n  111  \n\nE:\\Documents\\Simon\\Mes documents\\3dPrint\\Firmware\\PrusaFW\\Firmware\\ultralcd.cpp:\n  517  \t\t\tif (lcd_commands_step == 3 && !blocks_queued())\n  518  \t\t\t{\n  519: \t\t\t\tenquecommand_P(PSTR(LOAD_FILAMENT_1));\n  520                  enquecommand_P(PSTR(\"G4\"));\n  521  \t\t\t\tlcd_commands_step = 2;\n  ...\n  825  \n  826      enquecommand_P(PSTR(UNLOAD_FILAMENT_0));\n  827:     enquecommand_P(PSTR(UNLOAD_FILAMENT_1));\n  828      enquecommand_P(PSTR(UNLOAD_FILAMENT_2)); \n  829    } else {\n\nE:\\Documents\\Simon\\Mes documents\\3dPrint\\Firmware\\PrusaFW\\Firmware\\variants\\1_75mm_MK2-RAMBo10a-E3Dv6full.h:\n  102  // Load filament commands\n  103  #define LOAD_FILAMENT_0 \"M83\"\n  104: #define LOAD_FILAMENT_1 \"G1 E70 F400\"\n  105  #define LOAD_FILAMENT_2 \"G1 E40 F100\"\n  106  \n  107  // Unload filament commands\n  108  #define UNLOAD_FILAMENT_0 \"M83\"\n  109: #define UNLOAD_FILAMENT_1 \"G1 E-80 F7000\"\n  110  \n  111  /*------------------------------------\n\nE:\\Documents\\Simon\\Mes documents\\3dPrint\\Firmware\\PrusaFW\\Firmware\\variants\\1_75mm_MK2-RAMBo13a-E3Dv6full.h:\n  102  // Load filament commands\n  103  #define LOAD_FILAMENT_0 \"M83\"\n  104: #define LOAD_FILAMENT_1 \"G1 E70 F400\"\n  105  #define LOAD_FILAMENT_2 \"G1 E40 F100\"\n  106  \n  107  // Unload filament commands\n  108  #define UNLOAD_FILAMENT_0 \"M83\"\n  109: #define UNLOAD_FILAMENT_1 \"G1 E-80 F7000\"\n  110  \n  111  /*------------------------------------\n\n8 matches across 4 files\n\n\nSearching 934 files for \"LCD_COMMAND_LOAD_FILAMENT\"\n\nE:\\Documents\\Simon\\Mes documents\\3dPrint\\Firmware\\PrusaFW\\Firmware\\ultralcd.cpp:\n  496  void lcd_commands()\n  497  {\n  498: \tif (lcd_commands_type == LCD_COMMAND_LOAD_FILAMENT)   //// load filament sequence\n  499  \t{\n  500    \t\tif (lcd_commands_step == 0) \n  ...\n 1034    {\n 1035  \t  custom_message = true;\n 1036: \t  lcd_commands_type = LCD_COMMAND_LOAD_FILAMENT;\n 1037  \t  SERIAL_ECHOLN(\"Loading filament\");\n 1038  \t  // commands() will handle the rest\n\nE:\\Documents\\Simon\\Mes documents\\3dPrint\\Firmware\\PrusaFW\\Firmware\\ultralcd.h:\n   86    // To be used in lcd_commands_type.\n   87    #define LCD_COMMAND_IDLE 0\n   88:   #define LCD_COMMAND_LOAD_FILAMENT 1\n   89    #define LCD_COMMAND_STOP_PRINT 2\n   90    #define LCD_COMMAND_FARM_MODE_CONFIRM 4\n\n3 matches across 2 files\n\n\nSearching 934 files for \"lcd_commands\"\n\nE:\\Documents\\Simon\\Mes documents\\3dPrint\\Firmware\\PrusaFW\\Firmware\\Marlin_main.cpp:\n 1310  \t\t{\n 1311  \t\t\tprusa_statistics(6);\n 1312: \t\t\tlcd_commands_type = LCD_COMMAND_FARM_MODE_CONFIRM;\n 1313  \t\t}\n 1314  \n\nE:\\Documents\\Simon\\Mes documents\\3dPrint\\Firmware\\PrusaFW\\Firmware\\ultralcd.cpp:\n   95  int8_t SilentModeMenu = 0;\n   96  \n   97: int lcd_commands_type=LCD_COMMAND_IDLE;\n   98: int lcd_commands_step=0;\n   99  bool isPrintPaused = false;\n  100  bool farm_mode = false;\n  ...\n  415  \n  416      lcd_status_update_delay = 10;   /* redraw the main screen every second. This is easier then trying keep track of all things that change on the screen */\n  417: \tif (lcd_commands_type != LCD_COMMAND_IDLE)\n  418  \t{\n  419: \t\tlcd_commands();\n  420  \t}\n  421  \t\n  ...\n  494  #ifdef ULTIPANEL\n  495  \n  496: void lcd_commands()\n  497  {\n  498: \tif (lcd_commands_type == LCD_COMMAND_LOAD_FILAMENT)   //// load filament sequence\n  499  \t{\n  500:   \t\tif (lcd_commands_step == 0) \n  501        {   \n  502:           lcd_commands_step = 5; \n  503            custom_message = true; \n  504        }\n  505: \t\t\tif (lcd_commands_step == 1 && !blocks_queued())\n  506  \t\t\t{\n  507: \t\t\t\tlcd_commands_step = 0;\n  508: \t\t\t\tlcd_commands_type = 0;\n  509  \t\t\t\tlcd_setstatuspgm(WELCOME_MSG);\n  510  \t\t\t\tdisable_z();\n  ...\n  513     \n  514  \t\t\t}\n  515: \t\t\tif (lcd_commands_step == 2 && !blocks_queued())\n  516  \t\t\t{\n  517  \t\t\t\tlcd_setstatuspgm(MSG_LOADING_FILAMENT);\n  518  \t\t\t\tenquecommand_P(PSTR(LOAD_FILAMENT_2));\n  519: \t\t\t\tlcd_commands_step = 1;\n  520  \t\t\t}\n  521: \t\t\tif (lcd_commands_step == 3 && !blocks_queued())\n  522  \t\t\t{\n  523  \t\t\t\tenquecommand_P(PSTR(LOAD_FILAMENT_1));\n  524                  enquecommand_P(PSTR(\"G4\"));\n  525: \t\t\t\tlcd_commands_step = 2;\n  526  \t\t\t}\n  527: \t\t\tif (lcd_commands_step == 4 && !blocks_queued())\n  528  \t\t\t{\n  529  \t\t\t\tlcd_setstatuspgm(MSG_INSERT_FILAMENT);\n  530  \t\t\t\tenquecommand_P(PSTR(LOAD_FILAMENT_0));\n  531                  enquecommand_P(PSTR(\"G1 E0.1 F400\"));\n  532: \t\t\t\tlcd_commands_step = 3;\n  533  \t\t\t}\n  534: \t\t\tif (lcd_commands_step == 5 && !blocks_queued())\n  535  \t\t\t{\n  536  \t\t\t\tlcd_setstatuspgm(MSG_PLEASE_WAIT);\n  ...\n  538  \t\t\t\tcustom_message = true;\n  539  \t\t\t\tcustom_message_type = 2;\n  540: \t\t\t\tlcd_commands_step = 4;\n  541  \t\t\t}\n  542  \t}\n  543  \n  544: \tif (lcd_commands_type == LCD_COMMAND_STOP_PRINT)   /// stop print\n  545  \t{\n  546  \n  547: \t\tif (lcd_commands_step == 0) { lcd_commands_step = 6; custom_message = true;\t}\n  548  \n  549: \t\tif (lcd_commands_step == 1 && !blocks_queued())\n  550  \t\t{\n  551: \t\t\tlcd_commands_step = 0;\n  552: \t\t\tlcd_commands_type = 0;\n  553  \t\t\tlcd_setstatuspgm(WELCOME_MSG);\n  554  \t\t\tcustom_message = false;\n  555  \t\t}\n  556: \t\tif (lcd_commands_step == 2 && !blocks_queued())\n  557  \t\t{\n  558  \t\t\tsetTargetBed(0);\n  ...\n  563  \t\t\tlcd_setstatuspgm(WELCOME_MSG);\n  564  \t\t\tcancel_heatup = false;\n  565: \t\t\tlcd_commands_step = 1;\n  566  \t\t}\n  567: \t\tif (lcd_commands_step == 3 && !blocks_queued())\n  568  \t\t{\n  569        // M84: Disable steppers.\n  570  \t\t\tenquecommand_P(PSTR(\"M84\"));\n  571  \t\t\tautotempShutdown();\n  572: \t\t\tlcd_commands_step = 2;\n  573  \t\t}\n  574: \t\tif (lcd_commands_step == 4 && !blocks_queued())\n  575  \t\t{\n  576        // G90: Absolute positioning.\n  ...\n  584  \t\t\t#endif\n  585  \t\t\tlcd_ignore_click(false);\n  586: \t\t\tlcd_commands_step = 3;\n  587  \t\t}\n  588: \t\tif (lcd_commands_step == 5 && !blocks_queued())\n  589  \t\t{\n  590  \t\t\tlcd_setstatuspgm(MSG_PRINT_ABORTED);\n  ...\n  593        // Lift up.\n  594  \t\t\tenquecommand_P(PSTR(\"G1 Z15 F1500\"));\n  595: \t\t\tlcd_commands_step = 4;\n  596  \t\t}\n  597: \t\tif (lcd_commands_step == 6 && !blocks_queued())\n  598  \t\t{\n  599  \t\t\tlcd_setstatuspgm(MSG_PRINT_ABORTED);\n  ...\n  604  \t\t\tsetTargetHotend(0, 2);\n  605  \t\t\tmanage_heater();\n  606: \t\t\tlcd_commands_step = 5;\n  607  \t\t}\n  608  \n  609  \t}\n  610  \n  611: \tif (lcd_commands_type == 3)\n  612  \t{\n  613: \t\tlcd_commands_type = 0;\n  614  \t}\n  615  \n  616: \tif (lcd_commands_type == LCD_COMMAND_FARM_MODE_CONFIRM)   /// farm mode confirm\n  617  \t{\n  618  \n  619: \t\tif (lcd_commands_step == 0) { lcd_commands_step = 6; custom_message = true; }\n  620  \n  621: \t\tif (lcd_commands_step == 1 && !blocks_queued())\n  622  \t\t{\n  623  \t\t\tlcd_confirm_print();\n  624: \t\t\tlcd_commands_step = 0;\n  625: \t\t\tlcd_commands_type = 0;\n  626  \t\t}\n  627: \t\tif (lcd_commands_step == 2 && !blocks_queued())\n  628  \t\t{\n  629: \t\t\tlcd_commands_step = 1;\n  630  \t\t}\n  631: \t\tif (lcd_commands_step == 3 && !blocks_queued())\n  632  \t\t{\n  633: \t\t\tlcd_commands_step = 2;\n  634  \t\t}\n  635: \t\tif (lcd_commands_step == 4 && !blocks_queued())\n  636  \t\t{\n  637  \t\t\tenquecommand_P(PSTR(\"G90\"));\n  638  \t\t\tenquecommand_P(PSTR(\"G1 X\"  STRINGIFY(X_CANCEL_POS) \" Y\" STRINGIFY(Y_CANCEL_POS) \" E0 F7000\"));\n  639: \t\t\tlcd_commands_step = 3;\n  640  \t\t}\n  641: \t\tif (lcd_commands_step == 5 && !blocks_queued())\n  642  \t\t{\n  643: \t\t\tlcd_commands_step = 4;\n  644  \t\t}\n  645: \t\tif (lcd_commands_step == 6 && !blocks_queued())\n  646  \t\t{\n  647  \t\t\tenquecommand_P(PSTR(\"G91\"));\n  648  \t\t\tenquecommand_P(PSTR(\"G1 Z15 F1500\"));\n  649  \t\t\tst_synchronize();\n  650: \t\t\tlcd_commands_step = 5;\n  651  \t\t}\n  652  \n  ...\n 1034    {\n 1035  \t  custom_message = true;\n 1036: \t  lcd_commands_type = LCD_COMMAND_LOAD_FILAMENT;\n 1037  \t  SERIAL_ECHOLN(\"Loading filament\");\n 1038  \t  // commands() will handle the rest\n ....\n 2714  \t\t\t\tlcd_return_to_status();\n 2715  \t\t\t\tlcd_ignore_click(true);\n 2716: \t\t\t\tlcd_commands_type = LCD_COMMAND_STOP_PRINT;\n 2717  \t\t}\n 2718  \t}\n\nE:\\Documents\\Simon\\Mes documents\\3dPrint\\Firmware\\PrusaFW\\Firmware\\ultralcd.h:\n   84  \n   85  \n   86:   // To be used in lcd_commands_type.\n   87    #define LCD_COMMAND_IDLE 0\n   88    #define LCD_COMMAND_LOAD_FILAMENT 1\n   ..\n   90    #define LCD_COMMAND_FARM_MODE_CONFIRM 4\n   91  \n   92:   extern int lcd_commands_type;\n   93    \n   94    extern bool farm_mode;\n   ..\n  107  \n  108    void lcd_ignore_click(bool b=true);\n  109:   void lcd_commands();\n  110    \n  111    #ifdef NEWPANEL\n\n59 matches across 3 files\n\n\nSearching 934 files for \"lcd_commands_type\"\n\nE:\\Documents\\Simon\\Mes documents\\3dPrint\\Firmware\\PrusaFW\\Firmware\\Marlin_main.cpp:\n 1310  \t\t{\n 1311  \t\t\tprusa_statistics(6);\n 1312: \t\t\tlcd_commands_type = LCD_COMMAND_FARM_MODE_CONFIRM;\n 1313  \t\t}\n 1314  \n\nE:\\Documents\\Simon\\Mes documents\\3dPrint\\Firmware\\PrusaFW\\Firmware\\ultralcd.cpp:\n   95  int8_t SilentModeMenu = 0;\n   96  \n   97: int lcd_commands_type=LCD_COMMAND_IDLE;\n   98  int lcd_commands_step=0;\n   99  bool isPrintPaused = false;\n  ...\n  415  \n  416    lcd_status_update_delay = 10;   /* redraw the main screen every second. This is easier then trying keep track of all things that change on the screen */\n  417: \tif (lcd_commands_type != LCD_COMMAND_IDLE)\n  418  \t{\n  419  \t\tlcd_commands();\n  ...\n  496  void lcd_commands()\n  497  {\n  498: \tif (lcd_commands_type == LCD_COMMAND_LOAD_FILAMENT)   //// load filament sequence\n  499  \t{\n  500    \t\tif (lcd_commands_step == 0) \n  ...\n  506  \t\t\t{\n  507  \t\t\t\tlcd_commands_step = 0;\n  508: \t\t\t\tlcd_commands_type = 0;\n  509  \t\t\t\tlcd_setstatuspgm(WELCOME_MSG);\n  510  \t\t\t\tdisable_z();\n  ...\n  542  \t}\n  543  \n  544: \tif (lcd_commands_type == LCD_COMMAND_STOP_PRINT)   /// stop print\n  545  \t{\n  546  \n  ...\n  550  \t\t{\n  551  \t\t\tlcd_commands_step = 0;\n  552: \t\t\tlcd_commands_type = 0;\n  553  \t\t\tlcd_setstatuspgm(WELCOME_MSG);\n  554  \t\t\tcustom_message = false;\n  ...\n  609  \t}\n  610  \n  611: \tif (lcd_commands_type == 3)\n  612  \t{\n  613: \t\tlcd_commands_type = 0;\n  614  \t}\n  615  \n  616: \tif (lcd_commands_type == LCD_COMMAND_FARM_MODE_CONFIRM)   /// farm mode confirm\n  617  \t{\n  618  \n  ...\n  623  \t\t\tlcd_confirm_print();\n  624  \t\t\tlcd_commands_step = 0;\n  625: \t\t\tlcd_commands_type = 0;\n  626  \t\t}\n  627  \t\tif (lcd_commands_step == 2 && !blocks_queued())\n  ...\n 1034    {\n 1035  \t  custom_message = true;\n 1036: \t  lcd_commands_type = LCD_COMMAND_LOAD_FILAMENT;\n 1037  \t  SERIAL_ECHOLN(\"Loading filament\");\n 1038  \t  // commands() will handle the rest\n ....\n 2714  \t\t\t\tlcd_return_to_status();\n 2715  \t\t\t\tlcd_ignore_click(true);\n 2716: \t\t\t\tlcd_commands_type = LCD_COMMAND_STOP_PRINT;\n 2717  \t\t}\n 2718  \t}\n\nE:\\Documents\\Simon\\Mes documents\\3dPrint\\Firmware\\PrusaFW\\Firmware\\ultralcd.h:\n   84  \n   85  \n   86:   // To be used in lcd_commands_type.\n   87    #define LCD_COMMAND_IDLE 0\n   88    #define LCD_COMMAND_LOAD_FILAMENT 1\n   ..\n   90    #define LCD_COMMAND_FARM_MODE_CONFIRM 4\n   91  \n   92:   extern int lcd_commands_type;\n   93    \n   94    extern bool farm_mode;\n\n15 matches across 3 files\n\n\nSearching 938 files for \"EXTRUDER\"\n\nE:\\Documents\\Simon\\Mes documents\\3dPrint\\Firmware\\PrusaFW\\Firmware\\Configuration.h:\n   91  // #define MACHINE_UUID \"00000000-0000-0000-0000-000000000000\"\n   92  \n   93: // This defines the number of extruders\n   94: #define EXTRUDERS 1\n   95  \n   96  //// The following define selects which power supply you have. Please choose the one that matches your setup\n   ..\n  125  //#define HEATER_BED_DUTY_CYCLE_DIVIDER 4\n  126  \n  127: // If you want the M105 heater power reported in watts, define the BED_WATTS, and (shared for all extruders) EXTRUDER_WATTS\n  128: //#define EXTRUDER_WATTS (12.0*12.0/6.7) //  P=I^2/R\n  129  //#define BED_WATTS (12.0*12.0/1.1)      // P=I^2/R\n  130  \n  ...\n  160  \n  161  \n  162: //this prevents dangerous Extruder moves, i.e. if the temperature is under the limit\n  163  //can be software-disabled for whatever purposes by\n  164  #define PREVENT_DANGEROUS_EXTRUDE\n  ...\n  188  Bear in mind the count down will just start AFTER the first time the \n  189  thermistor temperature is over the target, so you will have no problem if\n  190: your extruder heater takes 2 minutes to hit the target on heating.\n  191  \n  192  */\n  193: // If you want to enable this feature for all your extruder heaters,\n  194  // uncomment the 2 defines below:\n  195  \n  196: // Parameters for all extruder heaters\n  197  //#define THERMAL_RUNAWAY_PROTECTION_PERIOD 40 //in seconds\n  198  //#define THERMAL_RUNAWAY_PROTECTION_HYSTERESIS 4 // in degree Celsius\n  ...\n  253  #define Y_ENABLE_ON 0\n  254  #define Z_ENABLE_ON 0\n  255: #define E_ENABLE_ON 0 // For all extruders\n  256  \n  257  // Disables axis when it's not being used.\n  ...\n  259  #define DISABLE_Y false\n  260  #define DISABLE_Z false\n  261: #define DISABLE_E false // For all extruders\n  262: #define DISABLE_INACTIVE_EXTRUDER true //disable only inactive extruders and keep active extruder enabled\n  263  \n  264  #define INVERT_X_DIR true    // for Mendel set to false, for Orca set to true\n  265  #define INVERT_Y_DIR true    // for Mendel set to true, for Orca set to false\n  266  #define INVERT_Z_DIR false     // for Mendel set to false, for Orca set to true\n  267: #define INVERT_E0_DIR false   // for direct drive extruder v9 set to true, for geared extruder set to false\n  268: #define INVERT_E1_DIR false    // for direct drive extruder v9 set to true, for geared extruder set to false\n  269: #define INVERT_E2_DIR false   // for direct drive extruder v9 set to true, for geared extruder set to false\n  270  \n  271  // ENDSTOP SETTINGS:\n  ...\n  337  \n  338  \n  339:   // these are the offsets to the probe relative to the extruder tip (Hotend - Probe)\n  340    // X and Y offsets must be integers\n  341:   #define X_PROBE_OFFSET_FROM_EXTRUDER -25\n  342:   #define Y_PROBE_OFFSET_FROM_EXTRUDER -29\n  343:   #define Z_PROBE_OFFSET_FROM_EXTRUDER -12.35\n  344  \n  345    #define Z_RAISE_BEFORE_HOMING 4       // (in mm) Raise Z before homing (G28) for Probe Clearance.\n  ...\n  348    #define XY_TRAVEL_SPEED 8000         // X and Y axis travel speed between probes, in mm/min\n  349  \n  350:   #define Z_RAISE_BEFORE_PROBING 15    //How much the extruder will be raised before traveling to the first probing point.\n  351:   #define Z_RAISE_BETWEEN_PROBINGS 5  //How much the extruder will be raised when traveling from between next probing points\n  352  \n  353    //#define Z_PROBE_SLED // turn on if you have a z-probe mounted on a sled like those designed by Charles Bell\n  ...\n  379  \n  380    #ifdef AUTO_BED_LEVELING_GRID\t// Check if Probe_Offset * Grid Points is greater than Probing Range\n  381:     #if X_PROBE_OFFSET_FROM_EXTRUDER < 0\n  382:       #if (-(X_PROBE_OFFSET_FROM_EXTRUDER * AUTO_BED_LEVELING_GRID_POINTS) >= (RIGHT_PROBE_BED_POSITION - LEFT_PROBE_BED_POSITION))\n  383  \t     #error \"The X axis probing range is not enough to fit all the points defined in AUTO_BED_LEVELING_GRID_POINTS\"\n  384  \t  #endif\n  385  \t#else\n  386:       #if ((X_PROBE_OFFSET_FROM_EXTRUDER * AUTO_BED_LEVELING_GRID_POINTS) >= (RIGHT_PROBE_BED_POSITION - LEFT_PROBE_BED_POSITION))\n  387  \t     #error \"The X axis probing range is not enough to fit all the points defined in AUTO_BED_LEVELING_GRID_POINTS\"\n  388  \t  #endif\n  389  \t#endif\n  390:     #if Y_PROBE_OFFSET_FROM_EXTRUDER < 0\n  391:       #if (-(Y_PROBE_OFFSET_FROM_EXTRUDER * AUTO_BED_LEVELING_GRID_POINTS) >= (BACK_PROBE_BED_POSITION - FRONT_PROBE_BED_POSITION))\n  392  \t     #error \"The Y axis probing range is not enough to fit all the points defined in AUTO_BED_LEVELING_GRID_POINTS\"\n  393  \t  #endif\n  394  \t#else\n  395:       #if ((Y_PROBE_OFFSET_FROM_EXTRUDER * AUTO_BED_LEVELING_GRID_POINTS) >= (BACK_PROBE_BED_POSITION - FRONT_PROBE_BED_POSITION))\n  396  \t     #error \"The Y axis probing range is not enough to fit all the points defined in AUTO_BED_LEVELING_GRID_POINTS\"\n  397  \t  #endif\n  ...\n  412  \n  413  \n  414: // Offset of the extruders (uncomment if using more than one and relying on firmware to position when changing).\n  415: // The offset has to be X=0, Y=0 for the extruder 0 hotend (default extruder).\n  416: // For the other hotends it is their distance from the extruder 0 hotend.\n  417: // #define EXTRUDER_OFFSET_X {0.0, 20.00} // (in mm) for each extruder, offset of the hotend on the X axis\n  418: // #define EXTRUDER_OFFSET_Y {0.0, 5.00}  // (in mm) for each extruder, offset of the hotend on the Y axis\n  419  \n  420  // The speed change that does not require acceleration (i.e. the software might assume it can be done instantaneously)\n  ...\n  658  //\n  659  // If you select a configuration below, this will receive a default value and does not need to be set manually\n  660: // set it manually if you have more servos than extruders and wish to manually control some\n  661  // leaving it undefined or defining as 0 will disable the servo subsystem\n  662  // If unsure, leave commented / disabled\n  ...\n  667   * Support for a filament diameter sensor\n  668   * Also allows adjustment of diameter at print time (vs  at slicing)\n  669:  * Single extruder only at this point (extruder 0)\n  670   * \n  671   * Motherboards\n  ...\n  678  //#define FILAMENT_SENSOR\n  679  \n  680: #define FILAMENT_SENSOR_EXTRUDER_NUM\t0  //The number of the extruder that has the filament sensor (0,1,2)\n  681  #define MEASUREMENT_DELAY_CM\t\t\t14  //measurement delay in cm.  This is the distance from filament sensor to middle of barrel\n  682  \n\nE:\\Documents\\Simon\\Mes documents\\3dPrint\\Firmware\\PrusaFW\\Firmware\\Configuration_adv.h:\n   30  \n   31  //automatic temperature: The hot end target temperature is calculated by all the buffered lines of gcode.\n   32: //The maximum buffered steps/sec of the extruder motor are called \"se\".\n   33  //You enter the autotemp mode by a M109 S<mintemp> B<maxtemp> F<factor>\n   34  // the target temperature is set to mintemp+factor*se[steps/sec] and limited by mintemp and maxtemp\n   ..\n   45  //#define SHOW_TEMP_ADC_VALUES\n   46  \n   47: //  extruder run-out prevention.\n   48  //if the machine is idle, and the temperature over MINTEMP, every couple of SECONDS some filament is extruded\n   49: //#define EXTRUDER_RUNOUT_PREVENT\n   50: #define EXTRUDER_RUNOUT_MINTEMP 190\n   51: #define EXTRUDER_RUNOUT_SECONDS 30.\n   52: #define EXTRUDER_RUNOUT_ESTEPS 14. //mm filament\n   53: #define EXTRUDER_RUNOUT_SPEED 1500.  //extrusion speed\n   54: #define EXTRUDER_RUNOUT_EXTRUDE 100\n   55  \n   56  //These defines help to calibrate the AD595 sensor in case you get wrong temperature measurements.\n   ..\n  132  // A single Z stepper driver is usually used to drive 2 stepper motors.\n  133  // Uncomment this define to utilize a separate stepper driver for each Z axis motor.\n  134: // Only a few motherboards support this, like RAMPS, which have dual extruder support (the 2nd, often unused, extruder driver is used\n  135  // to control the 2nd Z axis stepper motor). The pins are currently only defined for a RAMPS motherboards.\n  136: // On a RAMPS (or other 5 driver) motherboard, using this feature will limit you to using 1 extruder.\n  137  //#define Z_DUAL_STEPPER_DRIVERS\n  138  \n  139  #ifdef Z_DUAL_STEPPER_DRIVERS\n  140:   #undef EXTRUDERS\n  141:   #define EXTRUDERS 1\n  142  #endif\n  143  \n  ...\n  149  \n  150  #ifdef Y_DUAL_STEPPER_DRIVERS\n  151:   #undef EXTRUDERS\n  152:   #define EXTRUDERS 1\n  153  #endif\n  154  \n  ...\n  266  #endif\n  267  \n  268: // extruder advance constant (s2/mm3)\n  269  //\n  270: // advance (steps) = STEPS_PER_CUBIC_MM_E * EXTRUDER_ADVANCE_K * cubic mm per second ^ 2\n  271  //\n  272  // Hooke's law says:\t\tforce = k * distance\n  273  // Bernoulli's principle says:\tv ^ 2 / 2 + g . h + pressure / density = constant\n  274: // so: v ^ 2 is proportional to number of steps we advance the extruder\n  275  //#define ADVANCE\n  276  \n  277  #ifdef ADVANCE\n  278:   #define EXTRUDER_ADVANCE_K .006\n  279  \n  280    #define D_FILAMENT 1.75\n  ...\n  348    #define MIN_RETRACT 0.1                //minimum extruded mm to accept a automatic gcode retraction attempt\n  349    #define RETRACT_LENGTH 3               //default retract length (positive mm)\n  350:   #define RETRACT_LENGTH_SWAP 13         //default swap retract length (positive mm), for extruder change\n  351    #define RETRACT_FEEDRATE 45            //default feedrate for retracting (mm/s)\n  352    #define RETRACT_ZLIFT 0                //default retract Z-lift\n  353    #define RETRACT_RECOVER_LENGTH 0       //default additional recover length (mm, added to retract length when recovering)\n  354:   #define RETRACT_RECOVER_LENGTH_SWAP 0  //default additional swap recover length (mm, added to retract length when recovering from extruder change)\n  355    #define RETRACT_RECOVER_FEEDRATE 8     //default feedrate for recovering from retraction (mm/s)\n  356  #endif\n  ...\n  360  \n  361  #ifdef FILAMENTCHANGEENABLE\n  362:   #ifdef EXTRUDER_RUNOUT_PREVENT\n  363:     #error EXTRUDER_RUNOUT_PREVENT currently incompatible with FILAMENTCHANGE\n  364    #endif\n  365  #endif\n  ...\n  369  //===========================================================================\n  370  \n  371: #if EXTRUDERS > 1 && defined TEMP_SENSOR_1_AS_REDUNDANT\n  372:   #error \"You cannot use TEMP_SENSOR_1_AS_REDUNDANT if EXTRUDERS > 1\"\n  373  #endif\n  374  \n  375: #if EXTRUDERS > 1 && defined HEATERS_PARALLEL\n  376:   #error \"You cannot use HEATERS_PARALLEL if EXTRUDERS > 1\"\n  377  #endif\n  378  \n\nE:\\Documents\\Simon\\Mes documents\\3dPrint\\Firmware\\PrusaFW\\Firmware\\Configuration_prusa.h:\n   64  \n   65  /*------------------------------------\n   66: EXTRUDER SETTINGS\n   67  *------------------------------------*/\n   68  \n   ..\n   79  #define BED_MAXTEMP 150\n   80  \n   81: // Define PID constants for extruder\n   82  #define  DEFAULT_Kp 14\n   83  #define  DEFAULT_Ki 0.5\n   ..\n   87  #define EXTRUDE_MINTEMP 160\n   88  \n   89: // Extruder cooling fans\n   90: #define EXTRUDER_0_AUTO_FAN_PIN   6\n   91: #define EXTRUDER_1_AUTO_FAN_PIN   -1\n   92: #define EXTRUDER_2_AUTO_FAN_PIN   -1\n   93: #define EXTRUDER_AUTO_FAN_TEMPERATURE 50\n   94: #define EXTRUDER_AUTO_FAN_SPEED   255  // == full speed\n   95  \n   96  \n   ..\n  150  //#define TEMP_RUNAWAY_BED_TIMEOUT 360\n  151  \n  152: #define TEMP_RUNAWAY_EXTRUDER_HYSTERESIS 15\n  153: #define TEMP_RUNAWAY_EXTRUDER_TIMEOUT 45\n  154  \n  155  /*------------------------------------\n  ...\n  194  #define MESH_HOME_Z_SEARCH 5\n  195  \n  196: #define X_PROBE_OFFSET_FROM_EXTRUDER -12     // Z probe to nozzle X offset: -left  +right\n  197: #define Y_PROBE_OFFSET_FROM_EXTRUDER -44     // Z probe to nozzle Y offset: -front +behind\n  198: #define Z_PROBE_OFFSET_FROM_EXTRUDER -0.4  // Z probe to nozzle Z offset: -below (always!)\n  199  #endif\n  200  \n  ...\n  202  // Select PID or bang-bang with PIDTEMPBED. If bang-bang, BED_LIMIT_SWITCHING will enable hysteresis\n  203  //\n  204: // Uncomment this to enable PID on the bed. It uses the same frequency PWM as the extruder.\n  205  // If your PID_dT above is the default, and correct for your hardware/configuration, that means 7.689Hz,\n  206  // which is fine for driving a square wave into a resistive load and does not significantly impact you FET heating.\n\nE:\\Documents\\Simon\\Mes documents\\3dPrint\\Firmware\\PrusaFW\\Firmware\\Configuration_prusa.h.bak:\n   73  \n   74  /*------------------------------------\n   75:     EXTRUDER SETTINGS\n   76  *------------------------------------*/\n   77  \n   ..\n   88  #define BED_MAXTEMP 110\n   89  \n   90: // Define PID constants for extruder\n   91  #define  DEFAULT_Kp 14\n   92  #define  DEFAULT_Ki 0.5\n   ..\n   96  #define EXTRUDE_MINTEMP 160\n   97  \n   98: // Extruder cooling fans\n   99: #define EXTRUDER_0_AUTO_FAN_PIN   6\n  100: #define EXTRUDER_1_AUTO_FAN_PIN   -1\n  101: #define EXTRUDER_2_AUTO_FAN_PIN   -1\n  102: #define EXTRUDER_AUTO_FAN_TEMPERATURE 50\n  103: #define EXTRUDER_AUTO_FAN_SPEED   255  // == full speed\n  104  \n  105  \n  ...\n  158  //#define TEMP_RUNAWAY_BED_TIMEOUT 360\n  159  \n  160: #define TEMP_RUNAWAY_EXTRUDER_HYSTERESIS 15\n  161: #define TEMP_RUNAWAY_EXTRUDER_TIMEOUT 45\n  162  \n  163  /*------------------------------------\n  ...\n  201  #define MESH_HOME_Z_SEARCH 5\n  202  \n  203: #define X_PROBE_OFFSET_FROM_EXTRUDER -25     // Z probe to nozzle X offset: -left  +right\n  204: #define Y_PROBE_OFFSET_FROM_EXTRUDER -32     // Z probe to nozzle Y offset: -front +behind\n  205: #define Z_PROBE_OFFSET_FROM_EXTRUDER -2  // Z probe to nozzle Z offset: -below (always!)\n  206  #endif\n  207  \n  ...\n  209  // Select PID or bang-bang with PIDTEMPBED. If bang-bang, BED_LIMIT_SWITCHING will enable hysteresis\n  210  //\n  211: // Uncomment this to enable PID on the bed. It uses the same frequency PWM as the extruder.\n  212  // If your PID_dT above is the default, and correct for your hardware/configuration, that means 7.689Hz,\n  213  // which is fine for driving a square wave into a resistive load and does not significantly impact you FET heating.\n\nE:\\Documents\\Simon\\Mes documents\\3dPrint\\Firmware\\PrusaFW\\Firmware\\ConfigurationStore.cpp:\n   96    EEPROM_WRITE_VAR(i,autoretract_enabled);\n   97    EEPROM_WRITE_VAR(i,retract_length);\n   98:   #if EXTRUDERS > 1\n   99    EEPROM_WRITE_VAR(i,retract_length_swap);\n  100    #endif\n  ...\n  102    EEPROM_WRITE_VAR(i,retract_zlift);\n  103    EEPROM_WRITE_VAR(i,retract_recover_length);\n  104:   #if EXTRUDERS > 1\n  105    EEPROM_WRITE_VAR(i,retract_recover_length_swap);\n  106    #endif\n  ...\n  111    EEPROM_WRITE_VAR(i, volumetric_enabled);\n  112    EEPROM_WRITE_VAR(i, filament_size[0]);\n  113:   #if EXTRUDERS > 1\n  114    EEPROM_WRITE_VAR(i, filament_size[1]);\n  115:   #if EXTRUDERS > 2\n  116    EEPROM_WRITE_VAR(i, filament_size[2]);\n  117    #endif\n  ...\n  210      SERIAL_ECHOPAIR(\"   M209 S\", (unsigned long)(autoretract_enabled ? 1 : 0));\n  211      SERIAL_ECHOLN(\"\");\n  212: #if EXTRUDERS > 1\n  213      SERIAL_ECHO_START;\n  214:     SERIAL_ECHOLNPGM(\"Multi-extruder settings:\");\n  215      SERIAL_ECHO_START;\n  216      SERIAL_ECHOPAIR(\"   Swap retract length (mm):    \", retract_length_swap);\n  ...\n  226          SERIAL_ECHOPAIR(\"   M200 D\", filament_size[0]);\n  227          SERIAL_ECHOLN(\"\"); \n  228: #if EXTRUDERS > 1\n  229      SERIAL_ECHO_START;\n  230          SERIAL_ECHOPAIR(\"   M200 T1 D\", filament_size[1]);\n  231          SERIAL_ECHOLN(\"\"); \n  232: #if EXTRUDERS > 2\n  233      SERIAL_ECHO_START;\n  234          SERIAL_ECHOPAIR(\"   M200 T2 D\", filament_size[2]);\n  ...\n  301      EEPROM_READ_VAR(i,autoretract_enabled);\n  302      EEPROM_READ_VAR(i,retract_length);\n  303:     #if EXTRUDERS > 1\n  304      EEPROM_READ_VAR(i,retract_length_swap);\n  305      #endif\n  ...\n  307      EEPROM_READ_VAR(i,retract_zlift);\n  308      EEPROM_READ_VAR(i,retract_recover_length);\n  309:     #if EXTRUDERS > 1\n  310      EEPROM_READ_VAR(i,retract_recover_length_swap);\n  311      #endif\n  ...\n  315      EEPROM_READ_VAR(i, volumetric_enabled);\n  316      EEPROM_READ_VAR(i, filament_size[0]);\n  317: #if EXTRUDERS > 1\n  318      EEPROM_READ_VAR(i, filament_size[1]);\n  319: #if EXTRUDERS > 2\n  320      EEPROM_READ_VAR(i, filament_size[2]);\n  321  #endif\n  ...\n  364  \n  365  #ifdef ENABLE_AUTO_BED_LEVELING\n  366:     zprobe_zoffset = -Z_PROBE_OFFSET_FROM_EXTRUDER;\n  367  #endif\n  368  #ifdef DOGLCD\n  ...\n  385    autoretract_enabled = false;\n  386    retract_length = RETRACT_LENGTH;\n  387: #if EXTRUDERS > 1\n  388    retract_length_swap = RETRACT_LENGTH_SWAP;\n  389  #endif\n  ...\n  391    retract_zlift = RETRACT_ZLIFT;\n  392    retract_recover_length = RETRACT_RECOVER_LENGTH;\n  393: #if EXTRUDERS > 1\n  394    retract_recover_length_swap = RETRACT_RECOVER_LENGTH_SWAP;\n  395  #endif\n  ...\n  399    volumetric_enabled = false;\n  400    filament_size[0] = DEFAULT_NOMINAL_FILAMENT_DIA;\n  401: #if EXTRUDERS > 1\n  402    filament_size[1] = DEFAULT_NOMINAL_FILAMENT_DIA;\n  403: #if EXTRUDERS > 2\n  404    filament_size[2] = DEFAULT_NOMINAL_FILAMENT_DIA;\n  405  #endif\n\nE:\\Documents\\Simon\\Mes documents\\3dPrint\\Firmware\\PrusaFW\\Firmware\\dogm_lcd_implementation.h:\n  229   #endif\n  230   \n  231:   // Extruders\n  232    _draw_heater_status(6, 0);\n  233:   #if EXTRUDERS > 1\n  234      _draw_heater_status(31, 1);\n  235:     #if EXTRUDERS > 2\n  236        _draw_heater_status(55, 2);\n  237      #endif\n\nE:\\Documents\\Simon\\Mes documents\\3dPrint\\Firmware\\PrusaFW\\Firmware\\DOGMbitmaps.h:\n   65  };\n   66  \n   67: // Here comes a compile-time operation to match the extruder symbols \n   68: // on the info screen to the set number of extruders in configuration.h\n   69  // \n   70: // When only one extruder is selected, the \"1\" on the symbol will not \n   71  // be displayed.\n   72  \n   73: #if EXTRUDERS == 1\n   74  \t#define STATUS_SCREENWIDTH \t\t115\t//Width in pixels\n   75  \t#define STATUS_SCREENHEIGHT \t19\t//Height in pixels\n   ..\n  121  \t0x0C,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0xFF,0xFF,0x80,0x00,0x00,0x00\n  122  \t};\n  123: #elif EXTRUDERS == 2\n  124  \t#define STATUS_SCREENWIDTH \t\t115\t//Width in pixels\n  125  \t#define STATUS_SCREENHEIGHT \t19\t//Height in pixels\n  ...\n  221  \t0x0C,0x00,0x00,0x06,0x00,0x00,0x06,0x00,0x01,0xFF,0xFF,0x80,0x00,0x00,0x00\n  222  \t};\n  223: #endif // Extruders \n  224  \n  225  \n\nE:\\Documents\\Simon\\Mes documents\\3dPrint\\Firmware\\PrusaFW\\Firmware\\langtool.php:\n   16  \t\t$v = str_replace('\" FIRMWARE_URL \"','https://github.com/prusa3d/Prusa-i3-Plus/',$v);\n   17  \t\t$v = str_replace('\" PROTOCOL_VERSION \"','1.0',$v);\n   18: \t\t$v = str_replace('\" STRINGIFY(EXTRUDERS) \"','1',$v);\n   19  \t\t$v = str_replace('\" MACHINE_UUID \"','00000000-0000-0000-0000-000000000000',$v);\n   20  \n\nE:\\Documents\\Simon\\Mes documents\\3dPrint\\Firmware\\PrusaFW\\Firmware\\langtool.pl:\n   43  \t\t$value =~ s/\" FIRMWARE_URL \"/https:\\/\\/github.com\\/prusa3d\\/Prusa-i3-Plus\\//;\n   44  \t\t$value =~ s/\" PROTOCOL_VERSION \"/1.0/;\n   45: \t\t$value =~ s/\" STRINGIFY\\(EXTRUDERS\\) \"/1/;\n   46  \t\t$value =~ s/\" MACHINE_UUID \"/00000000-0000-0000-0000-000000000000/;\n   47  \t\t${$out}{$symbol} = { value=>$value, %$modifiers };\n\nE:\\Documents\\Simon\\Mes documents\\3dPrint\\Firmware\\PrusaFW\\Firmware\\language_all.cpp:\n    6  extern unsigned char lang_selected;\n    7  \n    8: const char MSG_ACTIVE_EXTRUDER_EN[] PROGMEM = \"Active Extruder: \";\n    9: const char * const MSG_ACTIVE_EXTRUDER_LANG_TABLE[1] PROGMEM = {\n   10: \tMSG_ACTIVE_EXTRUDER_EN\n   11  };\n   12  \n   ..\n  886  };\n  887  \n  888: const char MSG_INVALID_EXTRUDER_EN[] PROGMEM = \"Invalid extruder\";\n  889: const char * const MSG_INVALID_EXTRUDER_LANG_TABLE[1] PROGMEM = {\n  890: \tMSG_INVALID_EXTRUDER_EN\n  891  };\n  892  \n  ...\n  972  };\n  973  \n  974: const char MSG_M104_INVALID_EXTRUDER_EN[] PROGMEM = \"M104 Invalid extruder \";\n  975: const char * const MSG_M104_INVALID_EXTRUDER_LANG_TABLE[1] PROGMEM = {\n  976: \tMSG_M104_INVALID_EXTRUDER_EN\n  977  };\n  978  \n  979: const char MSG_M105_INVALID_EXTRUDER_EN[] PROGMEM = \"M105 Invalid extruder \";\n  980: const char * const MSG_M105_INVALID_EXTRUDER_LANG_TABLE[1] PROGMEM = {\n  981: \tMSG_M105_INVALID_EXTRUDER_EN\n  982  };\n  983  \n  984: const char MSG_M109_INVALID_EXTRUDER_EN[] PROGMEM = \"M109 Invalid extruder \";\n  985: const char * const MSG_M109_INVALID_EXTRUDER_LANG_TABLE[1] PROGMEM = {\n  986: \tMSG_M109_INVALID_EXTRUDER_EN\n  987  };\n  988  \n  989: const char MSG_M115_REPORT_EN[] PROGMEM = \"FIRMWARE_NAME:Marlin V1.0.2; Sprinter/grbl mashup for gen6 FIRMWARE_URL:https://github.com/prusa3d/Prusa-i3-Plus/ PROTOCOL_VERSION:1.0 MACHINE_TYPE:\" CUSTOM_MENDEL_NAME \" EXTRUDER_COUNT:1 UUID:00000000-0000-0000-0000-000000000000\\n\";\n  990  const char * const MSG_M115_REPORT_LANG_TABLE[1] PROGMEM = {\n  991  \tMSG_M115_REPORT_EN\n  ...\n  997  };\n  998  \n  999: const char MSG_M200_INVALID_EXTRUDER_EN[] PROGMEM = \"M200 Invalid extruder \";\n 1000: const char * const MSG_M200_INVALID_EXTRUDER_LANG_TABLE[1] PROGMEM = {\n 1001: \tMSG_M200_INVALID_EXTRUDER_EN\n 1002  };\n 1003  \n 1004: const char MSG_M218_INVALID_EXTRUDER_EN[] PROGMEM = \"M218 Invalid extruder \";\n 1005: const char * const MSG_M218_INVALID_EXTRUDER_LANG_TABLE[1] PROGMEM = {\n 1006: \tMSG_M218_INVALID_EXTRUDER_EN\n 1007  };\n 1008  \n 1009: const char MSG_M221_INVALID_EXTRUDER_EN[] PROGMEM = \"M221 Invalid extruder \";\n 1010: const char * const MSG_M221_INVALID_EXTRUDER_LANG_TABLE[1] PROGMEM = {\n 1011: \tMSG_M221_INVALID_EXTRUDER_EN\n 1012  };\n 1013  \n ....\n 1117  };\n 1118  \n 1119: const char MSG_MOVE_E_EN[] PROGMEM = \"Extruder\";\n 1120  const char MSG_MOVE_E_IT[] PROGMEM = \"Muovi Estrusore\";\n 1121  const char MSG_MOVE_E_ES[] PROGMEM = \"Extrusor\";\n\nE:\\Documents\\Simon\\Mes documents\\3dPrint\\Firmware\\PrusaFW\\Firmware\\language_all.h:\n   25  #define LANG_TABLE_SELECT(TABLE) LANG_TABLE_SELECT_EXPLICIT(TABLE, lang_selected)\n   26  \n   27: extern const char* const MSG_ACTIVE_EXTRUDER_LANG_TABLE[1];\n   28: #define MSG_ACTIVE_EXTRUDER LANG_TABLE_SELECT_EXPLICIT(MSG_ACTIVE_EXTRUDER_LANG_TABLE, 0)\n   29  extern const char* const MSG_ADJUSTZ_LANG_TABLE[LANG_NUM];\n   30  #define MSG_ADJUSTZ LANG_TABLE_SELECT(MSG_ADJUSTZ_LANG_TABLE)\n   ..\n  211  extern const char* const MSG_INSERT_FILAMENT_LANG_TABLE[LANG_NUM];\n  212  #define MSG_INSERT_FILAMENT LANG_TABLE_SELECT(MSG_INSERT_FILAMENT_LANG_TABLE)\n  213: extern const char* const MSG_INVALID_EXTRUDER_LANG_TABLE[1];\n  214: #define MSG_INVALID_EXTRUDER LANG_TABLE_SELECT_EXPLICIT(MSG_INVALID_EXTRUDER_LANG_TABLE, 0)\n  215  extern const char* const MSG_KILLED_LANG_TABLE[LANG_NUM];\n  216  #define MSG_KILLED LANG_TABLE_SELECT(MSG_KILLED_LANG_TABLE)\n  ...\n  229  extern const char* const MSG_LOAD_FILAMENT_LANG_TABLE[LANG_NUM];\n  230  #define MSG_LOAD_FILAMENT LANG_TABLE_SELECT(MSG_LOAD_FILAMENT_LANG_TABLE)\n  231: extern const char* const MSG_M104_INVALID_EXTRUDER_LANG_TABLE[1];\n  232: #define MSG_M104_INVALID_EXTRUDER LANG_TABLE_SELECT_EXPLICIT(MSG_M104_INVALID_EXTRUDER_LANG_TABLE, 0)\n  233: extern const char* const MSG_M105_INVALID_EXTRUDER_LANG_TABLE[1];\n  234: #define MSG_M105_INVALID_EXTRUDER LANG_TABLE_SELECT_EXPLICIT(MSG_M105_INVALID_EXTRUDER_LANG_TABLE, 0)\n  235: extern const char* const MSG_M109_INVALID_EXTRUDER_LANG_TABLE[1];\n  236: #define MSG_M109_INVALID_EXTRUDER LANG_TABLE_SELECT_EXPLICIT(MSG_M109_INVALID_EXTRUDER_LANG_TABLE, 0)\n  237  extern const char* const MSG_M115_REPORT_LANG_TABLE[1];\n  238  #define MSG_M115_REPORT LANG_TABLE_SELECT_EXPLICIT(MSG_M115_REPORT_LANG_TABLE, 0)\n  239  extern const char* const MSG_M119_REPORT_LANG_TABLE[1];\n  240  #define MSG_M119_REPORT LANG_TABLE_SELECT_EXPLICIT(MSG_M119_REPORT_LANG_TABLE, 0)\n  241: extern const char* const MSG_M200_INVALID_EXTRUDER_LANG_TABLE[1];\n  242: #define MSG_M200_INVALID_EXTRUDER LANG_TABLE_SELECT_EXPLICIT(MSG_M200_INVALID_EXTRUDER_LANG_TABLE, 0)\n  243: extern const char* const MSG_M218_INVALID_EXTRUDER_LANG_TABLE[1];\n  244: #define MSG_M218_INVALID_EXTRUDER LANG_TABLE_SELECT_EXPLICIT(MSG_M218_INVALID_EXTRUDER_LANG_TABLE, 0)\n  245: extern const char* const MSG_M221_INVALID_EXTRUDER_LANG_TABLE[1];\n  246: #define MSG_M221_INVALID_EXTRUDER LANG_TABLE_SELECT_EXPLICIT(MSG_M221_INVALID_EXTRUDER_LANG_TABLE, 0)\n  247  extern const char* const MSG_MAIN_LANG_TABLE[LANG_NUM];\n  248  #define MSG_MAIN LANG_TABLE_SELECT(MSG_MAIN_LANG_TABLE)\n\nE:\\Documents\\Simon\\Mes documents\\3dPrint\\Firmware\\PrusaFW\\Firmware\\language_common.h:\n   20  +define MSG_BEGIN_FILE_LIST                 \"Begin file list\"\n   21  +define MSG_END_FILE_LIST                   \"End file list\"\n   22: +define MSG_M104_INVALID_EXTRUDER           \"M104 Invalid extruder \"\n   23: +define MSG_M105_INVALID_EXTRUDER           \"M105 Invalid extruder \"\n   24: +define MSG_M200_INVALID_EXTRUDER           \"M200 Invalid extruder \"\n   25: +define MSG_M218_INVALID_EXTRUDER           \"M218 Invalid extruder \"\n   26: +define MSG_M221_INVALID_EXTRUDER           \"M221 Invalid extruder \"\n   27  +define MSG_ERR_NO_THERMISTORS              \"No thermistors - no temperature\"\n   28: +define MSG_M109_INVALID_EXTRUDER           \"M109 Invalid extruder \"\n   29: +define MSG_M115_REPORT                     \"FIRMWARE_NAME:Marlin V1.0.2; Sprinter/grbl mashup for gen6 FIRMWARE_URL:\" FIRMWARE_URL \" PROTOCOL_VERSION:\" PROTOCOL_VERSION \" MACHINE_TYPE:\" CUSTOM_MENDEL_NAME \" EXTRUDER_COUNT:\" STRINGIFY(EXTRUDERS) \" UUID:\" MACHINE_UUID \"\\n\"\n   30  define MSG_COUNT_X                         \" Count X: \"\n   31  +define MSG_ERR_KILLED                      \"Printer halted. kill() called!\"\n   ..\n   33  +define MSG_RESEND                          \"Resend: \"\n   34  define MSG_UNKNOWN_COMMAND                 \"Unknown command: \\\"\"\n   35: define MSG_ACTIVE_EXTRUDER                 \"Active Extruder: \"\n   36: define MSG_INVALID_EXTRUDER                \"Invalid extruder\"\n   37  \n   38  define MSG_X_MIN                           \"x_min: \"\n\nE:\\Documents\\Simon\\Mes documents\\3dPrint\\Firmware\\PrusaFW\\Firmware\\language_cz.h:\n   21  #define MSG_MOVE_Y                          \"Posunout Y\"\n   22  #define MSG_MOVE_Z                          \"Posunout Z\"\n   23: #define MSG_MOVE_E                          \"Extruder\"\n   24  #define MSG_SPEED                           \"Rychlost\"\n   25  #define MSG_NOZZLE                          \"Tryska\"\n   ..\n  108  #define MSG_BEGIN_FILE_LIST                 \"Begin file list\"\n  109  #define MSG_END_FILE_LIST                   \"End file list\"\n  110: #define MSG_M104_INVALID_EXTRUDER           \"M104 Invalid extruder \"\n  111: #define MSG_M105_INVALID_EXTRUDER           \"M105 Invalid extruder \"\n  112: #define MSG_M200_INVALID_EXTRUDER           \"M200 Invalid extruder \"\n  113: #define MSG_M218_INVALID_EXTRUDER           \"M218 Invalid extruder \"\n  114: #define MSG_M221_INVALID_EXTRUDER           \"M221 Invalid extruder \"\n  115  #define MSG_ERR_NO_THERMISTORS              \"No thermistors - no temperature\"\n  116: #define MSG_M109_INVALID_EXTRUDER           \"M109 Invalid extruder \"\n  117  #define MSG_HEATING                         \"Zahrivani\"\n  118  #define MSG_HEATING_COMPLETE                \"Zahrivani OK.\"\n  119  #define MSG_BED_HEATING                     \"Zahrivani bed\"\n  120  #define MSG_BED_DONE                        \"Bed OK.\"\n  121: #define MSG_M115_REPORT                     \"FIRMWARE_NAME:Marlin V1.0.2; Sprinter/grbl mashup for gen6 FIRMWARE_URL:\" FIRMWARE_URL \" PROTOCOL_VERSION:\" PROTOCOL_VERSION \" MACHINE_TYPE:\" CUSTOM_MENDEL_NAME \" EXTRUDER_COUNT:\" STRINGIFY(EXTRUDERS) \" UUID:\" MACHINE_UUID \"\\n\"\n  122  #define MSG_ERR_KILLED                      \"Printer halted. kill() called!\"\n  123  #define MSG_ERR_STOPPED                     \"Printer stopped due to errors. Fix the error and use M999 to restart. (Temperature is reset. Set it after restarting)\"\n\nE:\\Documents\\Simon\\Mes documents\\3dPrint\\Firmware\\PrusaFW\\Firmware\\language_en.h:\n   22  #define MSG_MOVE_Y                          \"Move Y\"\n   23  #define MSG_MOVE_Z                          \"Move Z\"\n   24: #define MSG_MOVE_E                          \"Extruder\"\n   25  #define MSG_SPEED                           \"Speed\"\n   26  #define MSG_NOZZLE                          \"Nozzle\"\n   ..\n  106  #define MSG_BEGIN_FILE_LIST                 \"Begin file list\"\n  107  #define MSG_END_FILE_LIST                   \"End file list\"\n  108: #define MSG_M104_INVALID_EXTRUDER           \"M104 Invalid extruder \"\n  109: #define MSG_M105_INVALID_EXTRUDER           \"M105 Invalid extruder \"\n  110: #define MSG_M200_INVALID_EXTRUDER           \"M200 Invalid extruder \"\n  111: #define MSG_M218_INVALID_EXTRUDER           \"M218 Invalid extruder \"\n  112: #define MSG_M221_INVALID_EXTRUDER           \"M221 Invalid extruder \"\n  113  #define MSG_ERR_NO_THERMISTORS              \"No thermistors - no temperature\"\n  114: #define MSG_M109_INVALID_EXTRUDER           \"M109 Invalid extruder \"\n  115  #define MSG_HEATING                         \"Heating\"\n  116  #define(length=20) MSG_HEATING_COMPLETE     \"Heating done.\"\n  117  #define MSG_BED_HEATING                     \"Bed Heating\"\n  118  #define MSG_BED_DONE                        \"Bed done\"\n  119: #define MSG_M115_REPORT                     \"FIRMWARE_NAME:Marlin V1.0.2; Sprinter/grbl mashup for gen6 FIRMWARE_URL:\" FIRMWARE_URL \" PROTOCOL_VERSION:\" PROTOCOL_VERSION \" MACHINE_TYPE:\" CUSTOM_MENDEL_NAME \" EXTRUDER_COUNT:\" STRINGIFY(EXTRUDERS) \" UUID:\" MACHINE_UUID \"\\n\"\n  120  #define MSG_ERR_KILLED                      \"Printer halted. kill() called!\"\n  121  #define MSG_ERR_STOPPED                     \"Printer stopped due to errors. Fix the error and use M999 to restart. (Temperature is reset. Set it after restarting)\"\n\nE:\\Documents\\Simon\\Mes documents\\3dPrint\\Firmware\\PrusaFW\\Firmware\\language_es.h:\n   90  #define MSG_BEGIN_FILE_LIST                 \"Begin file list\"\n   91  #define MSG_END_FILE_LIST                   \"End file list\"\n   92: #define MSG_M104_INVALID_EXTRUDER           \"M104 Invalid extruder \"\n   93: #define MSG_M105_INVALID_EXTRUDER           \"M105 Invalid extruder \"\n   94: #define MSG_M200_INVALID_EXTRUDER           \"M200 Invalid extruder \"\n   95: #define MSG_M218_INVALID_EXTRUDER           \"M218 Invalid extruder \"\n   96: #define MSG_M221_INVALID_EXTRUDER           \"M221 Invalid extruder \"\n   97  #define MSG_ERR_NO_THERMISTORS              \"No thermistors - no temperature\"\n   98: #define MSG_M109_INVALID_EXTRUDER           \"M109 Invalid extruder \"\n   99: #define MSG_M115_REPORT                     \"FIRMWARE_NAME:Marlin V1.0.2; Sprinter/grbl mashup for gen6 FIRMWARE_URL:\" FIRMWARE_URL \" PROTOCOL_VERSION:\" PROTOCOL_VERSION \" MACHINE_TYPE:\" CUSTOM_MENDEL_NAME \" EXTRUDER_COUNT:\" STRINGIFY(EXTRUDERS) \" UUID:\" MACHINE_UUID \"\\n\"\n  100  #define MSG_ERR_KILLED                      \"Printer halted. kill() called!\"\n  101  #define MSG_ERR_STOPPED                     \"Printer stopped due to errors. Fix the error and use M999 to restart. (Temperature is reset. Set it after restarting)\"\n\nE:\\Documents\\Simon\\Mes documents\\3dPrint\\Firmware\\PrusaFW\\Firmware\\language_it.h:\n   99  #define MSG_BEGIN_FILE_LIST                 \"Begin file list\"\n  100  #define MSG_END_FILE_LIST                   \"End file list\"\n  101: #define MSG_M104_INVALID_EXTRUDER           \"M104 Invalid extruder \"\n  102: #define MSG_M105_INVALID_EXTRUDER           \"M105 Invalid extruder \"\n  103: #define MSG_M200_INVALID_EXTRUDER           \"M200 Invalid extruder \"\n  104: #define MSG_M218_INVALID_EXTRUDER           \"M218 Invalid extruder \"\n  105: #define MSG_M221_INVALID_EXTRUDER           \"M221 Invalid extruder \"\n  106  #define MSG_ERR_NO_THERMISTORS              \"No thermistors - no temperature\"\n  107: #define MSG_M109_INVALID_EXTRUDER           \"M109 Invalid extruder \"\n  108: #define MSG_M115_REPORT                     \"FIRMWARE_NAME:Marlin V1.0.2; Sprinter/grbl mashup for gen6 FIRMWARE_URL:\" FIRMWARE_URL \" PROTOCOL_VERSION:\" PROTOCOL_VERSION \" MACHINE_TYPE:\" CUSTOM_MENDEL_NAME \" EXTRUDER_COUNT:\" STRINGIFY(EXTRUDERS) \" UUID:\" MACHINE_UUID \"\\n\"\n  109  #define MSG_ERR_KILLED                      \"Printer halted. kill() called!\"\n  110  #define MSG_ERR_STOPPED                     \"Printer stopped due to errors. Fix the error and use M999 to restart. (Temperature is reset. Set it after restarting)\"\n\nE:\\Documents\\Simon\\Mes documents\\3dPrint\\Firmware\\PrusaFW\\Firmware\\language_pl.h:\n   18  #define MSG_MOVE_Y                          \"Przesunac Y\"\n   19  #define MSG_MOVE_Z                          \"Przesunac Z\"\n   20: #define MSG_MOVE_E                          \"Extruder\"\n   21  #define MSG_SPEED                           \"Predkosc\"\n   22  #define MSG_NOZZLE                          \"Dysza\"\n   ..\n   89  #define MSG_BEGIN_FILE_LIST                 \"Begin file list\"\n   90  #define MSG_END_FILE_LIST                   \"End file list\"\n   91: #define MSG_M104_INVALID_EXTRUDER           \"M104 Invalid extruder \"\n   92: #define MSG_M105_INVALID_EXTRUDER           \"M105 Invalid extruder \"\n   93: #define MSG_M200_INVALID_EXTRUDER           \"M200 Invalid extruder \"\n   94: #define MSG_M218_INVALID_EXTRUDER           \"M218 Invalid extruder \"\n   95: #define MSG_M221_INVALID_EXTRUDER           \"M221 Invalid extruder \"\n   96  #define MSG_ERR_NO_THERMISTORS              \"No thermistors - no temperature\"\n   97: #define MSG_M109_INVALID_EXTRUDER           \"M109 Invalid extruder \"\n   98: #define MSG_M115_REPORT                     \"FIRMWARE_NAME:Marlin V1.0.2; Sprinter/grbl mashup for gen6 FIRMWARE_URL:\" FIRMWARE_URL \" PROTOCOL_VERSION:\" PROTOCOL_VERSION \" MACHINE_TYPE:\" CUSTOM_MENDEL_NAME \" EXTRUDER_COUNT:\" STRINGIFY(EXTRUDERS) \" UUID:\" MACHINE_UUID \"\\n\"\n   99  #define MSG_ERR_KILLED                      \"Printer halted. kill() called!\"\n  100  #define MSG_ERR_STOPPED                     \"Printer stopped due to errors. Fix the error and use M999 to restart. (Temperature is reset. Set it after restarting)\"\n\nE:\\Documents\\Simon\\Mes documents\\3dPrint\\Firmware\\PrusaFW\\Firmware\\Marlin.h:\n  184  #endif\n  185  \n  186: #if (EXTRUDERS > 1) && defined(E1_ENABLE_PIN) && (E1_ENABLE_PIN > -1)\n  187    #define enable_e1() WRITE(E1_ENABLE_PIN, E_ENABLE_ON)\n  188    #define disable_e1() WRITE(E1_ENABLE_PIN,!E_ENABLE_ON)\n  ...\n  192  #endif\n  193  \n  194: #if (EXTRUDERS > 2) && defined(E2_ENABLE_PIN) && (E2_ENABLE_PIN > -1)\n  195    #define enable_e2() WRITE(E2_ENABLE_PIN, E_ENABLE_ON)\n  196    #define disable_e2() WRITE(E2_ENABLE_PIN,!E_ENABLE_ON)\n  ...\n  243  extern bool axis_relative_modes[];\n  244  extern int feedmultiply;\n  245: extern int extrudemultiply; // Sets extrude multiply factor (in percent) for all extruders\n  246  extern bool volumetric_enabled;\n  247: extern int extruder_multiply[EXTRUDERS]; // sets extrude multiply factor (in percent) for each extruder individually\n  248: extern float filament_size[EXTRUDERS]; // cross-sectional area of filament (in millimeters), typically around 1.75 or 2.85, 0 disables the volumetric calculations for the extruder.\n  249: extern float volumetric_multiplier[EXTRUDERS]; // reciprocal of cross-sectional area of filament (in square millimeters), stored this way to reduce computational burden in planner\n  250  extern float current_position[NUM_AXIS] ;\n  251  extern float destination[NUM_AXIS] ;\n  ...\n  275  #ifdef FWRETRACT\n  276  extern bool autoretract_enabled;\n  277: extern bool retracted[EXTRUDERS];\n  278  extern float retract_length, retract_length_swap, retract_feedrate, retract_zlift;\n  279  extern float retract_recover_length, retract_recover_length_swap, retract_recover_feedrate;\n  ...\n  294  \n  295  \n  296: // Handling multiple extruders pins\n  297: extern uint8_t active_extruder;\n  298  \n  299  #ifdef DIGIPOT_I2C\n\nE:\\Documents\\Simon\\Mes documents\\3dPrint\\Firmware\\PrusaFW\\Firmware\\Marlin_main.cpp:\n  150  // M85  - Set inactivity shutdown timer with parameter S<seconds>. To disable set zero (default)\n  151  // M92  - Set axis_steps_per_unit - same syntax as G92\n  152: // M104 - Set extruder target temp\n  153  // M105 - Read current temp\n  154  // M106 - Fan on\n  155  // M107 - Fan off\n  156: // M109 - Sxxx Wait for extruder current temp to reach target temp. Waits only when heating\n  157: //        Rxxx Wait for extruder current temp to reach target temp. Waits when heating and cooling\n  158  //        IF AUTOTEMP is enabled, S<mintemp> B<maxtemp> F<factor>. Exit autotemp by any M109 without F\n  159  // M112 - Emergency stop\n  ...\n  180  // M208 - set recover=unretract length S[positive mm surplus to the M207 S*] F[feedrate mm/sec]\n  181  // M209 - S<1=true/0=false> enable automatic retract detect if the slicer did not support G10/11: every normal extrude-only move will be classified as retract depending on the direction.\n  182: // M218 - set hotend offset (in mm): T<extruder_number> X<offset_on_X> Y<offset_on_Y>\n  183  // M220 S<factor in percent>- set speed factor override percentage\n  184  // M221 S<factor in percent>- set extrude factor override percentage\n  ...\n  196  // M402 - Raise z-probe if present\n  197  // M404 - N<dia in mm> Enter the nominal filament width (3mm, 1.75mm ) or will display nominal filament width without parameters\n  198: // M405 - Turn on Filament Sensor extrusion control.  Optional D<delay in cm> to set delay in centimeters between sensor and extruder \n  199  // M406 - Turn off Filament Sensor extrusion control \n  200  // M407 - Displays measured filament diameter \n  ...\n  237  \n  238  float homing_feedrate[] = HOMING_FEEDRATE;\n  239: // Currently only the extruder axis may be switched to a relative mode.\n  240  // Other axes are always absolute or relative based on the common relative_mode flag.\n  241  bool axis_relative_modes[] = AXIS_RELATIVE_MODES;\n  ...\n  243  int saved_feedmultiply;\n  244  int extrudemultiply=100; //100->1 200->2\n  245: int extruder_multiply[EXTRUDERS] = {100\n  246:   #if EXTRUDERS > 1\n  247      , 100\n  248:     #if EXTRUDERS > 2\n  249        , 100\n  250      #endif\n  ...\n  269  \n  270  bool volumetric_enabled = false;\n  271: float filament_size[EXTRUDERS] = { DEFAULT_NOMINAL_FILAMENT_DIA\n  272:   #if EXTRUDERS > 1\n  273        , DEFAULT_NOMINAL_FILAMENT_DIA\n  274:     #if EXTRUDERS > 2\n  275         , DEFAULT_NOMINAL_FILAMENT_DIA\n  276      #endif\n  277    #endif\n  278  };\n  279: float volumetric_multiplier[EXTRUDERS] = {1.0\n  280:   #if EXTRUDERS > 1\n  281      , 1.0\n  282:     #if EXTRUDERS > 2\n  283        , 1.0\n  284      #endif\n  ...\n  293  float zprobe_zoffset;\n  294  \n  295: // Extruder offset\n  296: #if EXTRUDERS > 1\n  297:   #define NUM_EXTRUDER_OFFSETS 2 // only in XY plane\n  298: float extruder_offset[NUM_EXTRUDER_OFFSETS][EXTRUDERS] = {\n  299: #if defined(EXTRUDER_OFFSET_X) && defined(EXTRUDER_OFFSET_Y)\n  300:   EXTRUDER_OFFSET_X, EXTRUDER_OFFSET_Y\n  301  #endif\n  302  };\n  303  #endif\n  304  \n  305: uint8_t active_extruder = 0;\n  306  int fanSpeed=0;\n  307  \n  308  #ifdef FWRETRACT\n  309    bool autoretract_enabled=false;\n  310:   bool retracted[EXTRUDERS]={false\n  311:     #if EXTRUDERS > 1\n  312      , false\n  313:      #if EXTRUDERS > 2\n  314        , false\n  315       #endif\n  316    #endif\n  317    };\n  318:   bool retracted_swap[EXTRUDERS]={false\n  319:     #if EXTRUDERS > 1\n  320      , false\n  321:      #if EXTRUDERS > 2\n  322        , false\n  323       #endif\n  ...\n  349    bool filament_sensor=false;  //M405 turns on filament_sensor control, M406 turns it off \n  350    float filament_width_meas=DEFAULT_MEASURED_FILAMENT_DIA; //Stores the measured filament diameter \n  351:   signed char measurement_delay[MAX_MEASUREMENT_DELAY+1];  //ring buffer to delay measurement  store extruder factor after subtracting 100 \n  352    int delay_index1=0;  //index into ring buffer\n  353    int delay_index2=-1;  //index into ring buffer - set to -1 on startup to indicate ring buffer needs to be initialized\n  ...\n  437  unsigned long _usb_timer = 0;\n  438  \n  439: static uint8_t tmp_extruder;\n  440  \n  441  \n  ...\n 1405  \n 1406      // put the bed at 0 so we don't go below it.\n 1407:     current_position[Z_AXIS] = zprobe_zoffset; // in the lsq we reach here after raising the extruder due to the loop structure\n 1408  \n 1409      plan_set_position(current_position[X_AXIS], current_position[Y_AXIS], current_position[Z_AXIS], current_position[E_AXIS]);\n ....\n 1447      // move down until you find the bed\n 1448      float zPosition = -10;\n 1449:     plan_buffer_line(current_position[X_AXIS], current_position[Y_AXIS], zPosition, current_position[E_AXIS], feedrate/60, active_extruder);\n 1450      st_synchronize();\n 1451  \n ....\n 1456      // move up the retract distance\n 1457      zPosition += home_retract_mm(Z_AXIS);\n 1458:     plan_buffer_line(current_position[X_AXIS], current_position[Y_AXIS], zPosition, current_position[E_AXIS], feedrate/60, active_extruder);\n 1459      st_synchronize();\n 1460  \n ....\n 1462      feedrate = homing_feedrate[Z_AXIS]/4;\n 1463      zPosition -= home_retract_mm(Z_AXIS) * 2;\n 1464:     plan_buffer_line(current_position[X_AXIS], current_position[Y_AXIS], zPosition, current_position[E_AXIS], feedrate/60, active_extruder);\n 1465      st_synchronize();\n 1466  \n ....\n 1476  \n 1477      current_position[Z_AXIS] = z;\n 1478:     plan_buffer_line(current_position[X_AXIS], current_position[Y_AXIS], current_position[Z_AXIS], current_position[E_AXIS], feedrate/60, active_extruder);\n 1479      st_synchronize();\n 1480  \n ....\n 1483      current_position[X_AXIS] = x;\n 1484      current_position[Y_AXIS] = y;\n 1485:     plan_buffer_line(current_position[X_AXIS], current_position[Y_AXIS], current_position[Z_AXIS], current_position[E_AXIS], feedrate/60, active_extruder);\n 1486      st_synchronize();\n 1487  \n ....\n 1498    // move to right place\n 1499    do_blocking_move_to(current_position[X_AXIS], current_position[Y_AXIS], z_before);\n 1500:   do_blocking_move_to(x - X_PROBE_OFFSET_FROM_EXTRUDER, y - Y_PROBE_OFFSET_FROM_EXTRUDER, current_position[Z_AXIS]);\n 1501  \n 1502    run_z_probe();\n ....\n 1531      destination[axis] = 1.5 * max_length(axis) * axis_home_dir;\n 1532      feedrate = homing_feedrate[axis];\n 1533:     plan_buffer_line(destination[X_AXIS], destination[Y_AXIS], destination[Z_AXIS], destination[E_AXIS], feedrate/60, active_extruder);\n 1534      st_synchronize();\n 1535  \n ....\n 1537      plan_set_position(current_position[X_AXIS], current_position[Y_AXIS], current_position[Z_AXIS], current_position[E_AXIS]);\n 1538      destination[axis] = -home_retract_mm(axis) * axis_home_dir;\n 1539:     plan_buffer_line(destination[X_AXIS], destination[Y_AXIS], destination[Z_AXIS], destination[E_AXIS], feedrate/60, active_extruder);\n 1540      st_synchronize();\n 1541  \n 1542      destination[axis] = 2*home_retract_mm(axis) * axis_home_dir;\n 1543      feedrate = homing_feedrate[axis]/2 ;\n 1544:     plan_buffer_line(destination[X_AXIS], destination[Y_AXIS], destination[Z_AXIS], destination[E_AXIS], feedrate/60, active_extruder);\n 1545      st_synchronize();\n 1546      axis_is_at_home(axis);\n ....\n 1568  #ifdef FWRETRACT\n 1569    void retract(bool retracting, bool swapretract = false) {\n 1570:     if(retracting && !retracted[active_extruder]) {\n 1571        destination[X_AXIS]=current_position[X_AXIS];\n 1572        destination[Y_AXIS]=current_position[Y_AXIS];\n ....\n 1574        destination[E_AXIS]=current_position[E_AXIS];\n 1575        if (swapretract) {\n 1576:         current_position[E_AXIS]+=retract_length_swap/volumetric_multiplier[active_extruder];\n 1577        } else {\n 1578:         current_position[E_AXIS]+=retract_length/volumetric_multiplier[active_extruder];\n 1579        }\n 1580        plan_set_e_position(current_position[E_AXIS]);\n 1581        float oldFeedrate = feedrate;\n 1582        feedrate=retract_feedrate*60;\n 1583:       retracted[active_extruder]=true;\n 1584        prepare_move();\n 1585        current_position[Z_AXIS]-=retract_zlift;\n ....\n 1587        prepare_move();\n 1588        feedrate = oldFeedrate;\n 1589:     } else if(!retracting && retracted[active_extruder]) {\n 1590        destination[X_AXIS]=current_position[X_AXIS];\n 1591        destination[Y_AXIS]=current_position[Y_AXIS];\n ....\n 1596        //prepare_move();\n 1597        if (swapretract) {\n 1598:         current_position[E_AXIS]-=(retract_length_swap+retract_recover_length_swap)/volumetric_multiplier[active_extruder]; \n 1599        } else {\n 1600:         current_position[E_AXIS]-=(retract_length+retract_recover_length)/volumetric_multiplier[active_extruder]; \n 1601        }\n 1602        plan_set_e_position(current_position[E_AXIS]);\n 1603        float oldFeedrate = feedrate;\n 1604        feedrate=retract_recover_feedrate*60;\n 1605:       retracted[active_extruder]=false;\n 1606        prepare_move();\n 1607        feedrate = oldFeedrate;\n ....\n 1680                          target[E_AXIS]+= FILAMENTCHANGE_FIRSTRETRACT ;\n 1681                          \n 1682:                         plan_buffer_line(target[X_AXIS], target[Y_AXIS], target[Z_AXIS], target[E_AXIS], 400, active_extruder);\n 1683  \n 1684  \n 1685                          target[Z_AXIS]+= FILAMENTCHANGE_ZADD ;\n 1686  \n 1687:                         plan_buffer_line(target[X_AXIS], target[Y_AXIS], target[Z_AXIS], target[E_AXIS], 300, active_extruder);\n 1688  \n 1689                          target[X_AXIS]= FILAMENTCHANGE_XPOS ;\n ....\n 1692                           \n 1693                   \n 1694:                         plan_buffer_line(target[X_AXIS], target[Y_AXIS], target[Z_AXIS], target[E_AXIS], 70, active_extruder);\n 1695  \n 1696                          target[E_AXIS]+= FILAMENTCHANGE_FINALRETRACT ;\n 1697                            \n 1698  \n 1699:                         plan_buffer_line(target[X_AXIS], target[Y_AXIS], target[Z_AXIS], target[E_AXIS], 20, active_extruder);\n 1700  \n 1701                          //finish moves\n 1702                          st_synchronize();\n 1703:                         //disable extruder steppers so filament can be removed\n 1704                          disable_e0();\n 1705                          disable_e1();\n ....\n 1752                          \n 1753                          target[E_AXIS]+= FILAMENTCHANGE_FIRSTFEED ;\n 1754:                         plan_buffer_line(target[X_AXIS], target[Y_AXIS], target[Z_AXIS], target[E_AXIS], 20, active_extruder); \n 1755                          \n 1756                          \n 1757                          target[E_AXIS]+= FILAMENTCHANGE_FINALFEED ;\n 1758:                         plan_buffer_line(target[X_AXIS], target[Y_AXIS], target[Z_AXIS], target[E_AXIS], 2, active_extruder); \n 1759                          \n 1760                   \n ....\n 1772                               case 2:\n 1773                                       target[E_AXIS]+= FILAMENTCHANGE_FIRSTFEED ;\n 1774:                                      plan_buffer_line(target[X_AXIS], target[Y_AXIS], target[Z_AXIS], target[E_AXIS], 20, active_extruder); \n 1775                          \n 1776                          \n 1777                                       target[E_AXIS]+= FILAMENTCHANGE_FINALFEED ;\n 1778:                                      plan_buffer_line(target[X_AXIS], target[Y_AXIS], target[Z_AXIS], target[E_AXIS], 2, active_extruder); \n 1779                                        \n 1780                                       \n ....\n 1783                               case 3:\n 1784                                       target[E_AXIS]+= FILAMENTCHANGE_FINALFEED ;\n 1785:                                      plan_buffer_line(target[X_AXIS], target[Y_AXIS], target[Z_AXIS], target[E_AXIS], 2, active_extruder); \n 1786                                       lcd_loading_color();\n 1787                                       break;\n ....\n 1797                          \n 1798                        target[E_AXIS]+= 5;\n 1799:                       plan_buffer_line(target[X_AXIS], target[Y_AXIS], target[Z_AXIS], target[E_AXIS], 2, active_extruder);\n 1800                          \n 1801                        target[E_AXIS]+= FILAMENTCHANGE_FIRSTRETRACT;\n 1802:                       plan_buffer_line(target[X_AXIS], target[Y_AXIS], target[Z_AXIS], target[E_AXIS], 400, active_extruder);\n 1803                          \n 1804  \n 1805                          //current_position[E_AXIS]=target[E_AXIS]; //the long retract of L is compensated by manual filament feeding\n 1806                          //plan_set_e_position(current_position[E_AXIS]);\n 1807:                         plan_buffer_line(target[X_AXIS], target[Y_AXIS], target[Z_AXIS], target[E_AXIS], 70, active_extruder); //should do nothing\n 1808:                         plan_buffer_line(lastpos[X_AXIS], lastpos[Y_AXIS], target[Z_AXIS], target[E_AXIS], 70, active_extruder); //move xy back\n 1809:                         plan_buffer_line(lastpos[X_AXIS], lastpos[Y_AXIS], lastpos[Z_AXIS], target[E_AXIS], 200, active_extruder); //move z back\n 1810                          \n 1811                          \n ....\n 1814                        \n 1815                               \n 1816:                         plan_buffer_line(lastpos[X_AXIS], lastpos[Y_AXIS], lastpos[Z_AXIS], target[E_AXIS], 5, active_extruder); //final untretract\n 1817                          \n 1818                          \n ....\n 1886        #ifdef FWRETRACT\n 1887        case 10: // G10 retract\n 1888:        #if EXTRUDERS > 1\n 1889:         retracted_swap[active_extruder]=(code_seen('S') && code_value_long() == 1); // checks for swap retract argument\n 1890:         retract(true,retracted_swap[active_extruder]);\n 1891         #else\n 1892          retract(true);\n ....\n 1894        break;\n 1895        case 11: // G11 retract_recover\n 1896:        #if EXTRUDERS > 1\n 1897:         retract(false,retracted_swap[active_extruder]);\n 1898         #else\n 1899          retract(false);\n ....\n 1959            feedrate *= sqrt(pow(max_length(X_AXIS) / max_length(Y_AXIS), 2) + 1);\n 1960          }\n 1961:         plan_buffer_line(destination[X_AXIS], destination[Y_AXIS], destination[Z_AXIS], destination[E_AXIS], feedrate/60, active_extruder);\n 1962          st_synchronize();\n 1963  \n ....\n 1967          destination[X_AXIS] = current_position[X_AXIS];\n 1968          destination[Y_AXIS] = current_position[Y_AXIS];\n 1969:         plan_buffer_line(destination[X_AXIS], destination[Y_AXIS], destination[Z_AXIS], destination[E_AXIS], feedrate/60, active_extruder);\n 1970          feedrate = 0.0;\n 1971          st_synchronize();\n ....\n 1997                destination[Z_AXIS] = Z_RAISE_BEFORE_HOMING * home_dir(Z_AXIS) * (-1);    // Set destination away from bed\n 1998                feedrate = max_feedrate[Z_AXIS];\n 1999:               plan_buffer_line(destination[X_AXIS], destination[Y_AXIS], destination[Z_AXIS], destination[E_AXIS], feedrate, active_extruder);\n 2000                st_synchronize();\n 2001              #endif // defined (Z_RAISE_BEFORE_HOMING) && (Z_RAISE_BEFORE_HOMING > 0)\n ....\n 2017                enable_endstops(false);\n 2018                plan_set_position(current_position[X_AXIS], current_position[Y_AXIS], current_position[Z_AXIS], current_position[E_AXIS]);\n 2019:               plan_buffer_line(destination[X_AXIS], destination[Y_AXIS], destination[Z_AXIS], destination[E_AXIS], feedrate, active_extruder);\n 2020                st_synchronize();\n 2021                current_position[X_AXIS] = destination[X_AXIS];\n ....\n 2030          #else // defined(Z_SAFE_HOMING): Z Safe mode activated.\n 2031            if(home_all_axis) {\n 2032:             destination[X_AXIS] = round(Z_SAFE_HOMING_X_POINT - X_PROBE_OFFSET_FROM_EXTRUDER);\n 2033:             destination[Y_AXIS] = round(Z_SAFE_HOMING_Y_POINT - Y_PROBE_OFFSET_FROM_EXTRUDER);\n 2034              destination[Z_AXIS] = Z_RAISE_BEFORE_HOMING * home_dir(Z_AXIS) * (-1);    // Set destination away from bed\n 2035              feedrate = XY_TRAVEL_SPEED/60;\n ....\n 2037  \n 2038              plan_set_position(current_position[X_AXIS], current_position[Y_AXIS], current_position[Z_AXIS], current_position[E_AXIS]);\n 2039:             plan_buffer_line(destination[X_AXIS], destination[Y_AXIS], destination[Z_AXIS], destination[E_AXIS], feedrate, active_extruder);\n 2040              st_synchronize();\n 2041              current_position[X_AXIS] = destination[X_AXIS];\n ....\n 2047            if(code_seen(axis_codes[Z_AXIS])) {\n 2048              if ( (axis_known_position[X_AXIS]) && (axis_known_position[Y_AXIS]) \\\n 2049:               && (current_position[X_AXIS]+X_PROBE_OFFSET_FROM_EXTRUDER >= X_MIN_POS) \\\n 2050:               && (current_position[X_AXIS]+X_PROBE_OFFSET_FROM_EXTRUDER <= X_MAX_POS) \\\n 2051:               && (current_position[Y_AXIS]+Y_PROBE_OFFSET_FROM_EXTRUDER >= Y_MIN_POS) \\\n 2052:               && (current_position[Y_AXIS]+Y_PROBE_OFFSET_FROM_EXTRUDER <= Y_MAX_POS)) {\n 2053  \n 2054                current_position[Z_AXIS] = 0;\n ....\n 2056                destination[Z_AXIS] = Z_RAISE_BEFORE_HOMING * home_dir(Z_AXIS) * (-1);    // Set destination away from bed\n 2057                feedrate = max_feedrate[Z_AXIS];\n 2058:               plan_buffer_line(destination[X_AXIS], destination[Y_AXIS], destination[Z_AXIS], destination[E_AXIS], feedrate, active_extruder);\n 2059                st_synchronize();\n 2060  \n ....\n 2202                  } else\n 2203                  {\n 2204:                   // raise extruder\n 2205                    z_before = current_position[Z_AXIS] + Z_RAISE_BETWEEN_PROBINGS;\n 2206                  }\n ....\n 2258              // When the bed is uneven, this height must be corrected.\n 2259              real_z = float(st_get_position(Z_AXIS))/axis_steps_per_unit[Z_AXIS];  //get the real Z (since the auto bed leveling is already correcting the plane)\n 2260:             x_tmp = current_position[X_AXIS] + X_PROBE_OFFSET_FROM_EXTRUDER;\n 2261:             y_tmp = current_position[Y_AXIS] + Y_PROBE_OFFSET_FROM_EXTRUDER;\n 2262              z_tmp = current_position[Z_AXIS];\n 2263  \n ....\n 2364              // First move up. During this first movement, the babystepping will be reverted.\n 2365              current_position[Z_AXIS] = MESH_HOME_Z_SEARCH;\n 2366:             plan_buffer_line(current_position[X_AXIS], current_position[Y_AXIS], current_position[Z_AXIS], current_position[E_AXIS], homing_feedrate[Z_AXIS]/60, active_extruder);\n 2367              // The move to the first calibration point.\n 2368              current_position[X_AXIS] = pgm_read_float(bed_ref_points);\n ....\n 2370              world2machine_clamp(current_position[X_AXIS], current_position[Y_AXIS]);\n 2371  //            mbl.get_meas_xy(0, 0, current_position[X_AXIS], current_position[Y_AXIS], false);            \n 2372:             plan_buffer_line(current_position[X_AXIS], current_position[Y_AXIS], current_position[Z_AXIS], current_position[E_AXIS], homing_feedrate[X_AXIS]/30, active_extruder);\n 2373              // Wait until the move is finished.\n 2374              st_synchronize();\n ....\n 2405                  // Move Z to proper distance\n 2406                  current_position[Z_AXIS] = MESH_HOME_Z_SEARCH;\n 2407:                 plan_buffer_line(current_position[X_AXIS], current_position[Y_AXIS], current_position[Z_AXIS], current_position[E_AXIS], Z_LIFT_FEEDRATE, active_extruder);\n 2408                  st_synchronize();\n 2409  \n ....\n 2413  //                mbl.get_meas_xy(ix, iy, current_position[X_AXIS], current_position[Y_AXIS], false);\n 2414                  enable_endstops(false);\n 2415:                 plan_buffer_line(current_position[X_AXIS], current_position[Y_AXIS], current_position[Z_AXIS], current_position[E_AXIS], XY_AXIS_FEEDRATE, active_extruder);\n 2416                  st_synchronize();\n 2417                  \n ....\n 2438              }\n 2439              current_position[Z_AXIS] = MESH_HOME_Z_SEARCH;\n 2440:             plan_buffer_line(current_position[X_AXIS], current_position[Y_AXIS],current_position[Z_AXIS] , current_position[E_AXIS], Z_LIFT_FEEDRATE, active_extruder);\n 2441              if (mesh_point != MESH_MEAS_NUM_X_POINTS * MESH_MEAS_NUM_Y_POINTS) {\n 2442                  st_synchronize();\n ....\n 2504              current_position[Z_AXIS] = Z_MIN_POS;\n 2505              world2machine_clamp(current_position[X_AXIS], current_position[Y_AXIS]);\n 2506:             plan_buffer_line(current_position[X_AXIS], current_position[X_AXIS], current_position[Z_AXIS], current_position[E_AXIS], XY_AXIS_FEEDRATE, active_extruder);\n 2507              st_synchronize();\n 2508  \n ....\n 2916              // Move the print head close to the bed.\n 2917              current_position[Z_AXIS] = MESH_HOME_Z_SEARCH;\n 2918:             plan_buffer_line(current_position[X_AXIS], current_position[Y_AXIS],current_position[Z_AXIS] , current_position[E_AXIS], homing_feedrate[Z_AXIS]/40, active_extruder);\n 2919              st_synchronize();\n 2920  \n ....\n 2948                  // Print head up.\n 2949                  current_position[Z_AXIS] = MESH_HOME_Z_SEARCH;\n 2950:                 plan_buffer_line(current_position[X_AXIS], current_position[Y_AXIS],current_position[Z_AXIS] , current_position[E_AXIS], homing_feedrate[Z_AXIS]/40, active_extruder);\n 2951                  st_synchronize();\n 2952                  if (result >= 0) {\n ....\n 2962                      // Print head up.\n 2963                      current_position[Z_AXIS] = MESH_HOME_Z_SEARCH;\n 2964:                     plan_buffer_line(current_position[X_AXIS], current_position[Y_AXIS],current_position[Z_AXIS] , current_position[E_AXIS], homing_feedrate[Z_AXIS]/40, active_extruder);\n 2965                      st_synchronize();\n 2966                      // if (result >= 0) babystep_apply();\n ....\n 3019          // Move the print head close to the bed.\n 3020          current_position[Z_AXIS] = MESH_HOME_Z_SEARCH;\n 3021:         plan_buffer_line(current_position[X_AXIS], current_position[Y_AXIS],current_position[Z_AXIS] , current_position[E_AXIS], homing_feedrate[Z_AXIS]/40, active_extruder);\n 3022          st_synchronize();\n 3023          // Home in the XY plane.\n ....\n 3035          // Print head up.\n 3036          current_position[Z_AXIS] = MESH_HOME_Z_SEARCH;\n 3037:         plan_buffer_line(current_position[X_AXIS], current_position[Y_AXIS],current_position[Z_AXIS] , current_position[E_AXIS], homing_feedrate[Z_AXIS]/40, active_extruder);\n 3038          st_synchronize();\n 3039          lcd_update_enable(true);\n ....\n 3104  \n 3105  \tif (code_seen('X') || code_seen('x') ) {\n 3106:         \tX_probe_location = code_value() -  X_PROBE_OFFSET_FROM_EXTRUDER;\n 3107  \t\tif (X_probe_location<X_MIN_POS || X_probe_location>X_MAX_POS ) {\n 3108  \t\t\tSERIAL_PROTOCOLPGM(\"?Specified X position out of range.\\n\");\n ....\n 3112  \n 3113  \tif (code_seen('Y') || code_seen('y') ) {\n 3114:         \tY_probe_location = code_value() -  Y_PROBE_OFFSET_FROM_EXTRUDER;\n 3115  \t\tif (Y_probe_location<Y_MIN_POS || Y_probe_location>Y_MAX_POS ) {\n 3116  \t\t\tSERIAL_PROTOCOLPGM(\"?Specified Y position out of range.\\n\");\n ....\n 3138  \t\t\text_position,\n 3139      \t\t\thoming_feedrate[Z_AXIS]/60,\n 3140: \t\t\tactive_extruder);\n 3141          st_synchronize();\n 3142  \n ....\n 3152  \t\t\text_position,\n 3153      \t\t\thoming_feedrate[X_AXIS]/60,\n 3154: \t\t\tactive_extruder);\n 3155          st_synchronize();\n 3156  \n ....\n 3174  \t\t\text_position,\n 3175      \t\t\thoming_feedrate[X_AXIS]/60,\n 3176: \t\t\tactive_extruder);\n 3177          st_synchronize();\n 3178  \tcurrent_position[Z_AXIS] = Z_current = st_get_position_mm(Z_AXIS);\n ....\n 3273  \n 3274  \t\tplan_buffer_line( X_probe_location, Y_probe_location, Z_start_location, \n 3275: \t\t\t\t  current_position[E_AXIS], homing_feedrate[Z_AXIS]/60, active_extruder);\n 3276          \tst_synchronize();\n 3277  \n ....\n 3304          break;\n 3305        }\n 3306:       if (code_seen('S')) setTargetHotend(code_value(), tmp_extruder);\n 3307        setWatch();\n 3308        break;\n ....\n 3319        #if defined(TEMP_0_PIN) && TEMP_0_PIN > -1\n 3320          SERIAL_PROTOCOLPGM(\"ok T:\");\n 3321:         SERIAL_PROTOCOL_F(degHotend(tmp_extruder),1);\n 3322          SERIAL_PROTOCOLPGM(\" /\");\n 3323:         SERIAL_PROTOCOL_F(degTargetHotend(tmp_extruder),1);\n 3324          #if defined(TEMP_BED_PIN) && TEMP_BED_PIN > -1\n 3325            SERIAL_PROTOCOLPGM(\" B:\");\n ....\n 3328            SERIAL_PROTOCOL_F(degTargetBed(),1);\n 3329          #endif //TEMP_BED_PIN\n 3330:         for (int8_t cur_extruder = 0; cur_extruder < EXTRUDERS; ++cur_extruder) {\n 3331            SERIAL_PROTOCOLPGM(\" T\");\n 3332:           SERIAL_PROTOCOL(cur_extruder);\n 3333            SERIAL_PROTOCOLPGM(\":\");\n 3334:           SERIAL_PROTOCOL_F(degHotend(cur_extruder),1);\n 3335            SERIAL_PROTOCOLPGM(\" /\");\n 3336:           SERIAL_PROTOCOL_F(degTargetHotend(cur_extruder),1);\n 3337          }\n 3338        #else\n ....\n 3342  \n 3343          SERIAL_PROTOCOLPGM(\" @:\");\n 3344:       #ifdef EXTRUDER_WATTS\n 3345:         SERIAL_PROTOCOL((EXTRUDER_WATTS * getHeaterPower(tmp_extruder))/127);\n 3346          SERIAL_PROTOCOLPGM(\"W\");\n 3347        #else\n 3348:         SERIAL_PROTOCOL(getHeaterPower(tmp_extruder));\n 3349        #endif\n 3350  \n ....\n 3364              SERIAL_PROTOCOL_F(rawBedTemp()/OVERSAMPLENR,0);\n 3365            #endif\n 3366:           for (int8_t cur_extruder = 0; cur_extruder < EXTRUDERS; ++cur_extruder) {\n 3367              SERIAL_PROTOCOLPGM(\"  T\");\n 3368:             SERIAL_PROTOCOL(cur_extruder);\n 3369              SERIAL_PROTOCOLPGM(\":\");\n 3370:             SERIAL_PROTOCOL_F(degHotend(cur_extruder),1);\n 3371              SERIAL_PROTOCOLPGM(\"C->\");\n 3372:             SERIAL_PROTOCOL_F(rawHotendTemp(cur_extruder)/OVERSAMPLENR,0);\n 3373            }\n 3374          #endif\n ....\n 3378        break;\n 3379      case 109:\n 3380:     {// M109 - Wait for extruder heater to reach target.\n 3381        if(setTargetedHotend(109)){\n 3382          break;\n ....\n 3390        #endif\n 3391        if (code_seen('S')) {\n 3392:         setTargetHotend(code_value(), tmp_extruder);\n 3393                CooldownNoWait = true;\n 3394              } else if (code_seen('R')) {\n 3395:               setTargetHotend(code_value(), tmp_extruder);\n 3396          CooldownNoWait = false;\n 3397        }\n ....\n 3410  \n 3411        /* See if we are heating up or cooling down */\n 3412:       target_direction = isHeatingHotend(tmp_extruder); // true if heating, false if cooling\n 3413  \n 3414        cancel_heatup = false;\n ....\n 3422                (residencyStart >= 0 && (((unsigned int) (millis() - residencyStart)) < (TEMP_RESIDENCY_TIME * 1000UL)))) ) {\n 3423        #else\n 3424:         while ( target_direction ? (isHeatingHotend(tmp_extruder)) : (isCoolingHotend(tmp_extruder)&&(CooldownNoWait==false)) ) {\n 3425        #endif //TEMP_RESIDENCY_TIME\n 3426            if( (millis() - codenum) > 1000UL )\n 3427            { //Print Temp Reading and remaining time every 1 second while heating up/cooling down\n 3428              SERIAL_PROTOCOLPGM(\"T:\");\n 3429:             SERIAL_PROTOCOL_F(degHotend(tmp_extruder),1);\n 3430              SERIAL_PROTOCOLPGM(\" E:\");\n 3431:             SERIAL_PROTOCOL((int)tmp_extruder);\n 3432  \t\t\t\n 3433              #ifdef TEMP_RESIDENCY_TIME\n ....\n 3453              /* start/restart the TEMP_RESIDENCY_TIME timer whenever we reach target temp for the first time\n 3454                or when current temp falls outside the hysteresis after target temp was reached */\n 3455:           if ((residencyStart == -1 &&  target_direction && (degHotend(tmp_extruder) >= (degTargetHotend(tmp_extruder)-TEMP_WINDOW))) ||\n 3456:               (residencyStart == -1 && !target_direction && (degHotend(tmp_extruder) <= (degTargetHotend(tmp_extruder)+TEMP_WINDOW))) ||\n 3457:               (residencyStart > -1 && labs(degHotend(tmp_extruder) - degTargetHotend(tmp_extruder)) > TEMP_HYSTERESIS) )\n 3458  \t\t\t  {\n 3459  \t\t\t\tresidencyStart = millis();\n ....\n 3493            if(( millis() - codenum) > 1000 ) //Print Temp Reading every 1 second while heating up.\n 3494            {\n 3495:             float tt=degHotend(active_extruder);\n 3496              SERIAL_PROTOCOLPGM(\"T:\");\n 3497              SERIAL_PROTOCOL(tt);\n 3498              SERIAL_PROTOCOLPGM(\" E:\");\n 3499:             SERIAL_PROTOCOL((int)active_extruder);\n 3500              SERIAL_PROTOCOLPGM(\" B:\");\n 3501              SERIAL_PROTOCOL_F(degBed(),1);\n ....\n 3764        {\n 3765  \n 3766:         tmp_extruder = active_extruder;\n 3767          if(code_seen('T')) {\n 3768:           tmp_extruder = code_value();\n 3769:           if(tmp_extruder >= EXTRUDERS) {\n 3770              SERIAL_ECHO_START;\n 3771:             SERIAL_ECHO(MSG_M200_INVALID_EXTRUDER);\n 3772              break;\n 3773            }\n ....\n 3778  \t\t  float diameter = (float)code_value();\n 3779  \t\t  if (diameter == 0.0) {\n 3780: \t\t\t// setting any extruder filament size disables volumetric on the assumption that\n 3781: \t\t\t// slicers either generate in extruder values as cubic mm or as as filament feeds\n 3782: \t\t\t// for all extruders\n 3783  \t\t    volumetric_enabled = false;\n 3784  \t\t  } else {\n 3785:             filament_size[tmp_extruder] = (float)code_value();\n 3786: \t\t\t// make sure all extruders have some sane value for the filament size\n 3787  \t\t\tfilament_size[0] = (filament_size[0] == 0.0 ? DEFAULT_NOMINAL_FILAMENT_DIA : filament_size[0]);\n 3788:             #if EXTRUDERS > 1\n 3789  \t\t\tfilament_size[1] = (filament_size[1] == 0.0 ? DEFAULT_NOMINAL_FILAMENT_DIA : filament_size[1]);\n 3790:             #if EXTRUDERS > 2\n 3791  \t\t\tfilament_size[2] = (filament_size[2] == 0.0 ? DEFAULT_NOMINAL_FILAMENT_DIA : filament_size[2]);\n 3792              #endif\n ....\n 3885              autoretract_enabled=false;\n 3886              retracted[0]=false;\n 3887:             #if EXTRUDERS > 1\n 3888                retracted[1]=false;\n 3889              #endif\n 3890:             #if EXTRUDERS > 2\n 3891                retracted[2]=false;\n 3892              #endif\n ....\n 3896              autoretract_enabled=true;\n 3897              retracted[0]=false;\n 3898:             #if EXTRUDERS > 1\n 3899                retracted[1]=false;\n 3900              #endif\n 3901:             #if EXTRUDERS > 2\n 3902                retracted[2]=false;\n 3903              #endif\n ....\n 3913      }break;\n 3914      #endif // FWRETRACT\n 3915:     #if EXTRUDERS > 1\n 3916:     case 218: // M218 - set hotend offset (in mm), T<extruder_number> X<offset_on_X> Y<offset_on_Y>\n 3917      {\n 3918        if(setTargetedHotend(218)){\n ....\n 3921        if(code_seen('X'))\n 3922        {\n 3923:         extruder_offset[X_AXIS][tmp_extruder] = code_value();\n 3924        }\n 3925        if(code_seen('Y'))\n 3926        {\n 3927:         extruder_offset[Y_AXIS][tmp_extruder] = code_value();\n 3928        }\n 3929        SERIAL_ECHO_START;\n 3930        SERIAL_ECHORPGM(MSG_HOTEND_OFFSET);\n 3931:       for(tmp_extruder = 0; tmp_extruder < EXTRUDERS; tmp_extruder++)\n 3932        {\n 3933           SERIAL_ECHO(\" \");\n 3934:          SERIAL_ECHO(extruder_offset[X_AXIS][tmp_extruder]);\n 3935           SERIAL_ECHO(\",\");\n 3936:          SERIAL_ECHO(extruder_offset[Y_AXIS][tmp_extruder]);\n 3937        }\n 3938        SERIAL_ECHOLN(\"\");\n ....\n 3957              break;\n 3958            }\n 3959:           extruder_multiply[tmp_extruder] = tmp_code;\n 3960          }\n 3961          else\n ....\n 4352          lastpos[E_AXIS]=current_position[E_AXIS];\n 4353  \n 4354:         //Restract extruder\n 4355          if(code_seen('E'))\n 4356          {\n ....\n 4363            #endif\n 4364          }\n 4365:         plan_buffer_line(target[X_AXIS], target[Y_AXIS], target[Z_AXIS], target[E_AXIS], FILAMENTCHANGE_RFEED, active_extruder);\n 4366  \n 4367          //Lift Z\n ....\n 4384            \n 4385          }\n 4386:         plan_buffer_line(target[X_AXIS], target[Y_AXIS], target[Z_AXIS], target[E_AXIS], FILAMENTCHANGE_ZFEED, active_extruder);\n 4387  \n 4388          //Move XY to side\n ....\n 4407            #endif\n 4408          }\n 4409:         plan_buffer_line(target[X_AXIS], target[Y_AXIS], target[Z_AXIS], target[E_AXIS], FILAMENTCHANGE_XYFEED, active_extruder);\n 4410  \n 4411          // Unload filament\n ....\n 4420            #endif\n 4421          }\n 4422:         plan_buffer_line(target[X_AXIS], target[Y_AXIS], target[Z_AXIS], target[E_AXIS], FILAMENTCHANGE_RFEED, active_extruder);\n 4423  \n 4424          //finish moves\n 4425          st_synchronize();\n 4426:         //disable extruder steppers so filament can be removed\n 4427          disable_e0();\n 4428          disable_e1();\n ....\n 4467          //Feed the filament to the end of nozzle quickly\n 4468          target[E_AXIS]+= FILAMENTCHANGE_FIRSTFEED ;\n 4469:         plan_buffer_line(target[X_AXIS], target[Y_AXIS], target[Z_AXIS], target[E_AXIS], FILAMENTCHANGE_EFEED, active_extruder); \n 4470          \n 4471          //Extrude some filament\n 4472          target[E_AXIS]+= FILAMENTCHANGE_FINALFEED ;\n 4473:         plan_buffer_line(target[X_AXIS], target[Y_AXIS], target[Z_AXIS], target[E_AXIS], FILAMENTCHANGE_EXFEED, active_extruder); \n 4474          \n 4475   \n ....\n 4487               case 2:\n 4488                       target[E_AXIS]+= FILAMENTCHANGE_FIRSTFEED ;\n 4489:                      plan_buffer_line(target[X_AXIS], target[Y_AXIS], target[Z_AXIS], target[E_AXIS], FILAMENTCHANGE_EFEED, active_extruder); \n 4490                  \n 4491                       target[E_AXIS]+= FILAMENTCHANGE_FINALFEED ;\n 4492:                      plan_buffer_line(target[X_AXIS], target[Y_AXIS], target[Z_AXIS], target[E_AXIS], FILAMENTCHANGE_EXFEED, active_extruder); \n 4493  \n 4494                       lcd_loading_filament();\n ....\n 4498               case 3:\n 4499                       target[E_AXIS]+= FILAMENTCHANGE_FINALFEED ;\n 4500:                      plan_buffer_line(target[X_AXIS], target[Y_AXIS], target[Z_AXIS], target[E_AXIS], 2, active_extruder); \n 4501                       lcd_loading_color();\n 4502                       break;\n ....\n 4515        //Feed a little of filament to stabilize pressure\n 4516        target[E_AXIS]+= FILAMENTCHANGE_RECFEED;\n 4517:       plan_buffer_line(target[X_AXIS], target[Y_AXIS], target[Z_AXIS], target[E_AXIS], FILAMENTCHANGE_EXFEED, active_extruder);\n 4518          \n 4519        //Retract\n 4520        target[E_AXIS]+= FILAMENTCHANGE_FIRSTRETRACT;\n 4521:       plan_buffer_line(target[X_AXIS], target[Y_AXIS], target[Z_AXIS], target[E_AXIS], FILAMENTCHANGE_RFEED, active_extruder);\n 4522          \n 4523  \n 4524          \n 4525:       //plan_buffer_line(target[X_AXIS], target[Y_AXIS], target[Z_AXIS], target[E_AXIS], 70, active_extruder); //should do nothing\n 4526        \n 4527        //Move XY back\n 4528:       plan_buffer_line(lastpos[X_AXIS], lastpos[Y_AXIS], target[Z_AXIS], target[E_AXIS], FILAMENTCHANGE_XYFEED, active_extruder);\n 4529        \n 4530        //Move Z back\n 4531:       plan_buffer_line(lastpos[X_AXIS], lastpos[Y_AXIS], lastpos[Z_AXIS], target[E_AXIS], FILAMENTCHANGE_ZFEED, active_extruder);\n 4532          \n 4533          \n ....\n 4535          \n 4536        //Unretract       \n 4537:       plan_buffer_line(lastpos[X_AXIS], lastpos[Y_AXIS], lastpos[Z_AXIS], target[E_AXIS], FILAMENTCHANGE_RFEED, active_extruder);\n 4538          \n 4539        //Set E position to original  \n ....\n 4570          // this one uses actual amps in floating point\n 4571          for(int i=0;i<NUM_AXIS;i++) if(code_seen(axis_codes[i])) digipot_i2c_set_current(i, code_value());\n 4572:         // for each additional extruder (named B,C,D,E..., channels 4,5,6,7...)\n 4573          for(int i=NUM_AXIS;i<DIGIPOT_I2C_NUM_CHANNELS;i++) if(code_seen('B'+i-NUM_AXIS)) digipot_i2c_set_current(i, code_value());\n 4574        #endif\n ....\n 4624    else if(code_seen('T'))\n 4625    {\n 4626:     tmp_extruder = code_value();\n 4627:     if(tmp_extruder >= EXTRUDERS) {\n 4628        SERIAL_ECHO_START;\n 4629        SERIAL_ECHO(\"T\");\n 4630:       SERIAL_ECHO(tmp_extruder);\n 4631:       SERIAL_ECHOLN(MSG_INVALID_EXTRUDER);\n 4632      }\n 4633      else {\n ....\n 4640          }\n 4641        }\n 4642:       #if EXTRUDERS > 1\n 4643:       if(tmp_extruder != active_extruder) {\n 4644:         // Save current position to return to after applying extruder offset\n 4645          memcpy(destination, current_position, sizeof(destination));\n 4646:         // Offset extruder (only by XY)\n 4647          int i;\n 4648          for(i = 0; i < 2; i++) {\n 4649             current_position[i] = current_position[i] -\n 4650:                                  extruder_offset[i][active_extruder] +\n 4651:                                  extruder_offset[i][tmp_extruder];\n 4652          }\n 4653:         // Set the new active extruder and position\n 4654:         active_extruder = tmp_extruder;\n 4655          plan_set_position(current_position[X_AXIS], current_position[Y_AXIS], current_position[Z_AXIS], current_position[E_AXIS]);\n 4656          // Move to the old position if 'F' was in the parameters\n ....\n 4661        #endif\n 4662        SERIAL_ECHO_START;\n 4663:       SERIAL_ECHO(MSG_ACTIVE_EXTRUDER);\n 4664:       SERIAL_PROTOCOLLN((int)active_extruder);\n 4665      }\n 4666    } // end if(code_seen('T')) (end of T codes)\n ....\n 4745          float negative_z_offset = 0;\n 4746          #ifdef ENABLE_AUTO_BED_LEVELING\n 4747:             if (Z_PROBE_OFFSET_FROM_EXTRUDER < 0) negative_z_offset = negative_z_offset + Z_PROBE_OFFSET_FROM_EXTRUDER;\n 4748              if (add_homing[Z_AXIS] < 0) negative_z_offset = negative_z_offset + add_homing[Z_AXIS];\n 4749          #endif\n ....\n 4756  \n 4757  #ifdef MESH_BED_LEVELING\n 4758:     void mesh_plan_buffer_line(const float &x, const float &y, const float &z, const float &e, const float &feed_rate, const uint8_t extruder) {\n 4759          float dx = x - current_position[X_AXIS];\n 4760          float dy = y - current_position[Y_AXIS];\n ....\n 4778                                   current_position[Z_AXIS] + t * dz,\n 4779                                   current_position[E_AXIS] + t * de,\n 4780:                                  feed_rate, extruder);\n 4781              }\n 4782          }\n 4783          // The rest of the path.\n 4784:         plan_buffer_line(x, y, z, e, feed_rate, extruder);\n 4785          current_position[X_AXIS] = x;\n 4786          current_position[Y_AXIS] = y;\n ....\n 4798    if( (current_position[X_AXIS] == destination [X_AXIS]) && (current_position[Y_AXIS] == destination [Y_AXIS])) {\n 4799  #ifdef MESH_BED_LEVELING\n 4800:       mesh_plan_buffer_line(destination[X_AXIS], destination[Y_AXIS], destination[Z_AXIS], destination[E_AXIS], feedrate/60, active_extruder);\n 4801  #else\n 4802:       plan_buffer_line(destination[X_AXIS], destination[Y_AXIS], destination[Z_AXIS], destination[E_AXIS], feedrate/60, active_extruder);\n 4803  #endif\n 4804    }\n 4805    else {\n 4806  #ifdef MESH_BED_LEVELING\n 4807:     mesh_plan_buffer_line(destination[X_AXIS], destination[Y_AXIS], destination[Z_AXIS], destination[E_AXIS], feedrate*feedmultiply*(1./(60.f*100.f)), active_extruder);\n 4808  #else\n 4809:      plan_buffer_line(destination[X_AXIS], destination[Y_AXIS], destination[Z_AXIS], destination[E_AXIS], feedrate*feedmultiply*(1./(60.f*100.f)), active_extruder);\n 4810  #endif\n 4811    }\n ....\n 4820  \n 4821    // Trace the arc\n 4822:   mc_arc(current_position, destination, offset, X_AXIS, Y_AXIS, Z_AXIS, feedrate*feedmultiply/60/100.0, r, isclockwise, active_extruder);\n 4823  \n 4824    // As far as the parser is concerned, the position is now == target. In reality the\n ....\n 4849  \n 4850      if(!READ(X_ENABLE_PIN) || !READ(Y_ENABLE_PIN) || !READ(Z_ENABLE_PIN) || (soft_pwm_bed > 0)\n 4851:     #if EXTRUDERS > 2\n 4852         || !READ(E2_ENABLE_PIN)\n 4853      #endif\n 4854:     #if EXTRUDER > 1\n 4855        #if defined(X2_ENABLE_PIN) && X2_ENABLE_PIN > -1\n 4856         || !READ(X2_ENABLE_PIN)\n ....\n 4887    if(millis() > stat_update) {\n 4888      stat_update += 500; // Update every 0.5s\n 4889:     for (int8_t cur_extruder = 0; cur_extruder < EXTRUDERS; ++cur_extruder) {\n 4890:        max_temp = max(max_temp, degHotend(cur_extruder));\n 4891:        max_temp = max(max_temp, degTargetHotend(cur_extruder));\n 4892      }\n 4893      #if defined(TEMP_BED_PIN) && TEMP_BED_PIN > -1\n ....\n 4973      controllerFan(); //Check if fan should be turned on to cool stepper drivers down\n 4974    #endif\n 4975:   #ifdef EXTRUDER_RUNOUT_PREVENT\n 4976:     if( (millis() - previous_millis_cmd) >  EXTRUDER_RUNOUT_SECONDS*1000 )\n 4977:     if(degHotend(active_extruder)>EXTRUDER_RUNOUT_MINTEMP)\n 4978      {\n 4979       bool oldstatus=READ(E0_ENABLE_PIN);\n ....\n 4982       float oldedes=destination[E_AXIS];\n 4983       plan_buffer_line(destination[X_AXIS], destination[Y_AXIS], destination[Z_AXIS],\n 4984:                       destination[E_AXIS]+EXTRUDER_RUNOUT_EXTRUDE*EXTRUDER_RUNOUT_ESTEPS/axis_steps_per_unit[E_AXIS],\n 4985:                       EXTRUDER_RUNOUT_SPEED/60.*EXTRUDER_RUNOUT_ESTEPS/axis_steps_per_unit[E_AXIS], active_extruder);\n 4986       current_position[E_AXIS]=oldepos;\n 4987       destination[E_AXIS]=oldedes;\n ....\n 5119  \n 5120  bool setTargetedHotend(int code){\n 5121:   tmp_extruder = active_extruder;\n 5122    if(code_seen('T')) {\n 5123:     tmp_extruder = code_value();\n 5124:     if(tmp_extruder >= EXTRUDERS) {\n 5125        SERIAL_ECHO_START;\n 5126        switch(code){\n 5127          case 104:\n 5128:           SERIAL_ECHO(MSG_M104_INVALID_EXTRUDER);\n 5129            break;\n 5130          case 105:\n 5131:           SERIAL_ECHO(MSG_M105_INVALID_EXTRUDER);\n 5132            break;\n 5133          case 109:\n 5134:           SERIAL_ECHO(MSG_M109_INVALID_EXTRUDER);\n 5135            break;\n 5136          case 218:\n 5137:           SERIAL_ECHO(MSG_M218_INVALID_EXTRUDER);\n 5138            break;\n 5139          case 221:\n 5140:           SERIAL_ECHO(MSG_M221_INVALID_EXTRUDER);\n 5141            break;\n 5142        }\n 5143:       SERIAL_ECHOLN(tmp_extruder);\n 5144        return true;\n 5145      }\n ....\n 5183  void calculate_volumetric_multipliers() {\n 5184  \tvolumetric_multiplier[0] = calculate_volumetric_multiplier(filament_size[0]);\n 5185: #if EXTRUDERS > 1\n 5186  \tvolumetric_multiplier[1] = calculate_volumetric_multiplier(filament_size[1]);\n 5187: #if EXTRUDERS > 2\n 5188  \tvolumetric_multiplier[2] = calculate_volumetric_multiplier(filament_size[2]);\n 5189  #endif\n\nE:\\Documents\\Simon\\Mes documents\\3dPrint\\Firmware\\PrusaFW\\Firmware\\mesh_bed_calibration.cpp:\n   19  #define WEIGHT_FIRST_ROW_Y_LOW  (0.0f)\n   20  \n   21: #define BED_ZERO_REF_X (X_PROBE_OFFSET_FROM_EXTRUDER)\n   22: #define BED_ZERO_REF_Y (Y_PROBE_OFFSET_FROM_EXTRUDER)\n   23  \n   24  // Scaling of the real machine axes against the programmed dimensions in the firmware.\n   ..\n  665  static inline void go_xyz(float x, float y, float z, float fr)\n  666  {\n  667:     plan_buffer_line(x, y, z, current_position[E_AXIS], fr, active_extruder);\n  668      st_synchronize();\n  669  }\n  ...\n  671  static inline void go_xy(float x, float y, float fr)\n  672  {\n  673:     plan_buffer_line(x, y, current_position[Z_AXIS], current_position[E_AXIS], fr, active_extruder);\n  674      st_synchronize();\n  675  }\n  ...\n  677  static inline void go_to_current(float fr)\n  678  {\n  679:     plan_buffer_line(current_position[X_AXIS], current_position[Y_AXIS], current_position[Z_AXIS], current_position[E_AXIS], fr, active_extruder);\n  680      st_synchronize();\n  681  }\n  ...\n 2109  static void shift_z(float delta)\n 2110  {\n 2111:     plan_buffer_line(current_position[X_AXIS], current_position[Y_AXIS], current_position[Z_AXIS] - delta, current_position[E_AXIS], homing_feedrate[Z_AXIS]/40, active_extruder);\n 2112      st_synchronize();\n 2113      plan_set_z_position(current_position[Z_AXIS]);\n\nE:\\Documents\\Simon\\Mes documents\\3dPrint\\Firmware\\PrusaFW\\Firmware\\mesh_bed_leveling.cpp:\n   42      if (use_default || vec_undef(cntr) || vec_undef(vec_x) || vec_undef(vec_y)) {\n   43          // Default, uncorrected positions of the calibration points. Works well for correctly built printers.\n   44:         x = float(MESH_MIN_X) + float(MEAS_NUM_X_DIST) * float(ix) - X_PROBE_OFFSET_FROM_EXTRUDER;\n   45          //FIXME\n   46          //x -= 5.f;\n   47:         y = float(MESH_MIN_Y) + float(MEAS_NUM_Y_DIST) * float(iy) - Y_PROBE_OFFSET_FROM_EXTRUDER;\n   48      } else {\n   49  #if 0\n\nE:\\Documents\\Simon\\Mes documents\\3dPrint\\Firmware\\PrusaFW\\Firmware\\motion_control.cpp:\n   27  // segment is configured in settings.mm_per_arc_segment.  \n   28  void mc_arc(float *position, float *target, float *offset, uint8_t axis_0, uint8_t axis_1, \n   29:   uint8_t axis_linear, float feed_rate, float radius, uint8_t isclockwise, uint8_t extruder)\n   30  {      \n   31    //   int acceleration_manager_was_enabled = plan_is_acceleration_manager_enabled();\n   ..\n   34    float center_axis1 = position[axis_1] + offset[axis_1];\n   35    float linear_travel = target[axis_linear] - position[axis_linear];\n   36:   float extruder_travel = target[E_AXIS] - position[E_AXIS];\n   37    float r_axis0 = -offset[axis_0];  // Radius vector from center to current location\n   38    float r_axis1 = -offset[axis_1];\n   ..\n   66    float theta_per_segment = angular_travel/segments;\n   67    float linear_per_segment = linear_travel/segments;\n   68:   float extruder_per_segment = extruder_travel/segments;\n   69    \n   70    /* Vector rotation by transformation matrix: r is the original vector, r_T is the rotated vector,\n   ..\n  107    arc_target[axis_linear] = position[axis_linear];\n  108    \n  109:   // Initialize the extruder axis\n  110    arc_target[E_AXIS] = position[E_AXIS];\n  111  \n  ...\n  132      arc_target[axis_1] = center_axis1 + r_axis1;\n  133      arc_target[axis_linear] += linear_per_segment;\n  134:     arc_target[E_AXIS] += extruder_per_segment;\n  135  \n  136      clamp_to_software_endstops(arc_target);\n  137:     plan_buffer_line(arc_target[X_AXIS], arc_target[Y_AXIS], arc_target[Z_AXIS], arc_target[E_AXIS], feed_rate, extruder);\n  138      \n  139    }\n  140    // Ensure last segment arrives at target location.\n  141:   plan_buffer_line(target[X_AXIS], target[Y_AXIS], target[Z_AXIS], target[E_AXIS], feed_rate, extruder);\n  142  \n  143    //   plan_set_acceleration_manager_enabled(acceleration_manager_was_enabled);\n\nE:\\Documents\\Simon\\Mes documents\\3dPrint\\Firmware\\PrusaFW\\Firmware\\motion_control.h:\n   28  // for vector transformation direction.\n   29  void mc_arc(float *position, float *target, float *offset, unsigned char axis_0, unsigned char axis_1,\n   30:   unsigned char axis_linear, float feed_rate, float radius, unsigned char isclockwise, uint8_t extruder);\n   31    \n   32  #endif\n\nE:\\Documents\\Simon\\Mes documents\\3dPrint\\Firmware\\PrusaFW\\Firmware\\pins.h:\n  303  //List of pins which to ignore when asked to change by gcode, 0 and 1 are RX and TX, do not mess with those!\n  304  #define _E0_PINS E0_STEP_PIN, E0_DIR_PIN, E0_ENABLE_PIN, HEATER_0_PIN,\n  305: #if EXTRUDERS > 1\n  306    #define _E1_PINS E1_STEP_PIN, E1_DIR_PIN, E1_ENABLE_PIN, HEATER_1_PIN,\n  307  #else\n  308    #define _E1_PINS\n  309  #endif\n  310: #if EXTRUDERS > 2\n  311    #define _E2_PINS E2_STEP_PIN, E2_DIR_PIN, E2_ENABLE_PIN, HEATER_2_PIN,\n  312  #else\n\nE:\\Documents\\Simon\\Mes documents\\3dPrint\\Firmware\\PrusaFW\\Firmware\\planner.cpp:\n  102  #endif\n  103  \n  104: unsigned char g_uc_extruder_last_move[3] = {0,0,0};\n  105  \n  106  //===========================================================================\n  ...\n  513  // mm. Microseconds specify how many microseconds the move should take to perform. To aid acceleration\n  514  // calculation the caller must also provide the physical length of the line in millimeters.\n  515: void plan_buffer_line(float x, float y, float z, const float &e, float feed_rate, const uint8_t &extruder)\n  516  {\n  517      // Calculate the buffer head after we push this byte\n  ...\n  601    if(target[E_AXIS]!=position[E_AXIS])\n  602    {\n  603:     if(degHotend(active_extruder)<extrude_min_temp)\n  604      {\n  605        position[E_AXIS]=target[E_AXIS]; //behave as if the move really took place, but ignore E part\n  ...\n  638    block->steps_z = labs(target[Z_AXIS]-position[Z_AXIS]);\n  639    block->steps_e = labs(target[E_AXIS]-position[E_AXIS]);\n  640:   block->steps_e *= volumetric_multiplier[active_extruder];\n  641    block->steps_e *= extrudemultiply;\n  642    block->steps_e /= 100;\n  ...\n  681    }\n  682  \n  683:   block->active_extruder = extruder;\n  684  \n  685    //enable active axes\n  ...\n  698  #endif\n  699  \n  700:   // Enable extruder(s)\n  701    if(block->steps_e != 0)\n  702    {\n  703:     if (DISABLE_INACTIVE_EXTRUDER) //enable only selected extruder\n  704      {\n  705  \n  706:       if(g_uc_extruder_last_move[0] > 0) g_uc_extruder_last_move[0]--;\n  707:       if(g_uc_extruder_last_move[1] > 0) g_uc_extruder_last_move[1]--;\n  708:       if(g_uc_extruder_last_move[2] > 0) g_uc_extruder_last_move[2]--;\n  709        \n  710:       switch(extruder)\n  711        {\n  712          case 0: \n  713            enable_e0(); \n  714:           g_uc_extruder_last_move[0] = BLOCK_BUFFER_SIZE*2;\n  715            \n  716:           if(g_uc_extruder_last_move[1] == 0) disable_e1(); \n  717:           if(g_uc_extruder_last_move[2] == 0) disable_e2(); \n  718          break;\n  719          case 1:\n  720            enable_e1(); \n  721:           g_uc_extruder_last_move[1] = BLOCK_BUFFER_SIZE*2;\n  722            \n  723:           if(g_uc_extruder_last_move[0] == 0) disable_e0(); \n  724:           if(g_uc_extruder_last_move[2] == 0) disable_e2(); \n  725          break;\n  726          case 2:\n  727            enable_e2(); \n  728:           g_uc_extruder_last_move[2] = BLOCK_BUFFER_SIZE*2;\n  729            \n  730:           if(g_uc_extruder_last_move[0] == 0) disable_e0(); \n  731:           if(g_uc_extruder_last_move[1] == 0) disable_e1(); \n  732          break;        \n  733        }\n  ...\n  769    #endif\n  770    delta_mm[Z_AXIS] = (target[Z_AXIS]-position[Z_AXIS])/axis_steps_per_unit[Z_AXIS];\n  771:   delta_mm[E_AXIS] = ((target[E_AXIS]-position[E_AXIS])/axis_steps_per_unit[E_AXIS])*volumetric_multiplier[active_extruder]*extrudemultiply/100.0;\n  772    if ( block->steps_x <=dropsegments && block->steps_y <=dropsegments && block->steps_z <=dropsegments )\n  773    {\n  ...\n  809    \n  810    \n  811:     if((extruder==FILAMENT_SENSOR_EXTRUDER_NUM) && (delay_index2 > -1))  //only for extruder with filament sensor and if ring buffer is initialized\n  812        {\n  813      delay_dist = delay_dist + delta_mm[E_AXIS];  //increment counter with next move in e axis\n  ...\n 1056    else {\n 1057      long acc_dist = estimate_acceleration_distance(0, block->nominal_rate, block->acceleration_st);\n 1058:     float advance = (STEPS_PER_CUBIC_MM_E * EXTRUDER_ADVANCE_K) * \n 1059        (current_speed[E_AXIS] * current_speed[E_AXIS] * EXTRUSION_AREA * EXTRUSION_AREA)*256;\n 1060      block->advance = advance;\n\nE:\\Documents\\Simon\\Mes documents\\3dPrint\\Firmware\\PrusaFW\\Firmware\\planner.h:\n   47  typedef struct {\n   48    // Fields used by the bresenham algorithm for tracing the line\n   49:   // steps_x.y,z, step_event_count, acceleration_rate, direction_bits and active_extruder are set by plan_buffer_line().\n   50    long steps_x, steps_y, steps_z, steps_e;  // Step count along each axis\n   51    unsigned long step_event_count;           // The number of step events required to complete this block\n   52    long acceleration_rate;                   // The acceleration rate used for acceleration calculation\n   53    unsigned char direction_bits;             // The direction bit set for this block (refers to *_DIRECTION_BIT in config.h)\n   54:   unsigned char active_extruder;            // Selects the active extruder\n   55    // accelerate_until and decelerate_after are set by calculate_trapezoid_for_block() and they need to be synchronized with the stepper interrupt controller.\n   56    long accelerate_until;                    // The index of the step event on which to stop acceleration\n   ..\n  103  \n  104  #ifdef ENABLE_AUTO_BED_LEVELING\n  105: void plan_buffer_line(float x, float y, float z, const float &e, float feed_rate, const uint8_t &extruder);\n  106  \n  107  // Get the position applying the bed level matrix if enabled\n  108  vector_3 plan_get_position();\n  109  #else\n  110: void plan_buffer_line(float x, float y, float z, const float &e, float feed_rate, const uint8_t &extruder);\n  111: //void plan_buffer_line(const float &x, const float &y, const float &z, const float &e, float feed_rate, const uint8_t &extruder);\n  112  #endif // ENABLE_AUTO_BED_LEVELING\n  113  \n\nE:\\Documents\\Simon\\Mes documents\\3dPrint\\Firmware\\PrusaFW\\Firmware\\stepper.cpp:\n  311      final_advance = current_block->final_advance;\n  312      // Do E steps + advance steps\n  313:     e_steps[current_block->active_extruder] += ((advance >>8) - old_advance);\n  314      old_advance = advance >>8;\n  315    #endif\n  ...\n  362  \n  363  //      #ifdef ADVANCE\n  364: //      e_steps[current_block->active_extruder] = 0;\n  365  //      #endif\n  366      }\n  ...\n  555          counter_e -= current_block->step_event_count;\n  556          if ((out_bits & (1<<E_AXIS)) != 0) { // - direction\n  557:           e_steps[current_block->active_extruder]--;\n  558          }\n  559          else {\n  560:           e_steps[current_block->active_extruder]++;\n  561          }\n  562        }\n  ...\n  639          //if(advance > current_block->advance) advance = current_block->advance;\n  640          // Do E steps + advance steps\n  641:         e_steps[current_block->active_extruder] += ((advance >>8) - old_advance);\n  642          old_advance = advance >>8;\n  643  \n  ...\n  668          if(advance < final_advance) advance = final_advance;\n  669          // Do E steps + advance steps\n  670:         e_steps[current_block->active_extruder] += ((advance >>8) - old_advance);\n  671          old_advance = advance >>8;\n  672        #endif //ADVANCE\n  ...\n  709          }\n  710        }\n  711:  #if EXTRUDERS > 1\n  712        if (e_steps[1] != 0) {\n  713          WRITE(E1_STEP_PIN, INVERT_E_STEP_PIN);\n  ...\n  724        }\n  725   #endif\n  726:  #if EXTRUDERS > 2\n  727        if (e_steps[2] != 0) {\n  728          WRITE(E2_STEP_PIN, INVERT_E_STEP_PIN);\n\nE:\\Documents\\Simon\\Mes documents\\3dPrint\\Firmware\\PrusaFW\\Firmware\\stepper.h:\n   24  #include \"planner.h\"\n   25  \n   26: #if EXTRUDERS > 2\n   27:   #define WRITE_E_STEP(v) { if(current_block->active_extruder == 2) { WRITE(E2_STEP_PIN, v); } else { if(current_block->active_extruder == 1) { WRITE(E1_STEP_PIN, v); } else { WRITE(E0_STEP_PIN, v); }}}\n   28:   #define NORM_E_DIR() { if(current_block->active_extruder == 2) { WRITE(E2_DIR_PIN, !INVERT_E2_DIR); } else { if(current_block->active_extruder == 1) { WRITE(E1_DIR_PIN, !INVERT_E1_DIR); } else { WRITE(E0_DIR_PIN, !INVERT_E0_DIR); }}}\n   29:   #define REV_E_DIR() { if(current_block->active_extruder == 2) { WRITE(E2_DIR_PIN, INVERT_E2_DIR); } else { if(current_block->active_extruder == 1) { WRITE(E1_DIR_PIN, INVERT_E1_DIR); } else { WRITE(E0_DIR_PIN, INVERT_E0_DIR); }}}\n   30: #elif EXTRUDERS > 1\n   31:   #define WRITE_E_STEP(v) { if(current_block->active_extruder == 1) { WRITE(E1_STEP_PIN, v); } else { WRITE(E0_STEP_PIN, v); }}\n   32:   #define NORM_E_DIR() { if(current_block->active_extruder == 1) { WRITE(E1_DIR_PIN, !INVERT_E1_DIR); } else { WRITE(E0_DIR_PIN, !INVERT_E0_DIR); }}\n   33:   #define REV_E_DIR() { if(current_block->active_extruder == 1) { WRITE(E1_DIR_PIN, INVERT_E1_DIR); } else { WRITE(E0_DIR_PIN, INVERT_E0_DIR); }}\n   34  #else\n   35    #define WRITE_E_STEP(v) WRITE(E0_STEP_PIN, v)\n\nE:\\Documents\\Simon\\Mes documents\\3dPrint\\Firmware\\PrusaFW\\Firmware\\temperature.cpp:\n   42  //=============================public variables============================\n   43  //===========================================================================\n   44: int target_temperature[EXTRUDERS] = { 0 };\n   45  int target_temperature_bed = 0;\n   46: int current_temperature_raw[EXTRUDERS] = { 0 };\n   47: float current_temperature[EXTRUDERS] = { 0.0 };\n   48  int current_temperature_bed_raw = 0;\n   49  float current_temperature_bed = 0.0;\n   ..\n   78  \n   79  #ifdef FILAMENT_SENSOR\n   80:   int current_raw_filwidth = 0;  //Holds measured filament diameter - one extruder only\n   81  #endif  \n   82  //===========================================================================\n   ..\n   87  #ifdef PIDTEMP\n   88    //static cannot be external:\n   89:   static float temp_iState[EXTRUDERS] = { 0 };\n   90:   static float temp_dState[EXTRUDERS] = { 0 };\n   91:   static float pTerm[EXTRUDERS];\n   92:   static float iTerm[EXTRUDERS];\n   93:   static float dTerm[EXTRUDERS];\n   94    //int output;\n   95:   static float pid_error[EXTRUDERS];\n   96:   static float temp_iState_min[EXTRUDERS];\n   97:   static float temp_iState_max[EXTRUDERS];\n   98:   // static float pid_input[EXTRUDERS];\n   99:   // static float pid_output[EXTRUDERS];\n  100:   static bool pid_reset[EXTRUDERS];\n  101  #endif //PIDTEMP\n  102  #ifdef PIDTEMPBED\n  ...\n  114  \tstatic unsigned long  previous_millis_bed_heater;\n  115  #endif //PIDTEMPBED\n  116:   static unsigned char soft_pwm[EXTRUDERS];\n  117  \n  118  #ifdef FAN_SOFT_PWM\n  119    static unsigned char soft_pwm_fan;\n  120  #endif\n  121: #if (defined(EXTRUDER_0_AUTO_FAN_PIN) && EXTRUDER_0_AUTO_FAN_PIN > -1) || \\\n  122:     (defined(EXTRUDER_1_AUTO_FAN_PIN) && EXTRUDER_1_AUTO_FAN_PIN > -1) || \\\n  123:     (defined(EXTRUDER_2_AUTO_FAN_PIN) && EXTRUDER_2_AUTO_FAN_PIN > -1)\n  124:   static unsigned long extruder_autofan_last_check;\n  125  #endif  \n  126  \n  127: #if EXTRUDERS > 3\n  128:   # error Unsupported number of extruders\n  129: #elif EXTRUDERS > 2\n  130:   # define ARRAY_BY_EXTRUDERS(v1, v2, v3) { v1, v2, v3 }\n  131: #elif EXTRUDERS > 1\n  132:   # define ARRAY_BY_EXTRUDERS(v1, v2, v3) { v1, v2 }\n  133  #else\n  134:   # define ARRAY_BY_EXTRUDERS(v1, v2, v3) { v1 }\n  135  #endif\n  136  \n  137  // Init min and max temp with extreme values to prevent false errors during startup\n  138: static int minttemp_raw[EXTRUDERS] = ARRAY_BY_EXTRUDERS( HEATER_0_RAW_LO_TEMP , HEATER_1_RAW_LO_TEMP , HEATER_2_RAW_LO_TEMP );\n  139: static int maxttemp_raw[EXTRUDERS] = ARRAY_BY_EXTRUDERS( HEATER_0_RAW_HI_TEMP , HEATER_1_RAW_HI_TEMP , HEATER_2_RAW_HI_TEMP );\n  140: static int minttemp[EXTRUDERS] = ARRAY_BY_EXTRUDERS( 0, 0, 0 );\n  141: static int maxttemp[EXTRUDERS] = ARRAY_BY_EXTRUDERS( 16383, 16383, 16383 );\n  142  #ifdef BED_MINTEMP\n  143  static int bed_minttemp_raw = HEATER_BED_RAW_LO_TEMP;\n  ...\n  151    static uint8_t heater_ttbllen_map[2] = { HEATER_0_TEMPTABLE_LEN, HEATER_1_TEMPTABLE_LEN };\n  152  #else\n  153:   static void *heater_ttbl_map[EXTRUDERS] = ARRAY_BY_EXTRUDERS( (void *)HEATER_0_TEMPTABLE, (void *)HEATER_1_TEMPTABLE, (void *)HEATER_2_TEMPTABLE );\n  154:   static uint8_t heater_ttbllen_map[EXTRUDERS] = ARRAY_BY_EXTRUDERS( HEATER_0_TEMPTABLE_LEN, HEATER_1_TEMPTABLE_LEN, HEATER_2_TEMPTABLE_LEN );\n  155  #endif\n  156  \n  ...\n  160  \n  161  #ifdef WATCH_TEMP_PERIOD\n  162: int watch_start_temp[EXTRUDERS] = ARRAY_BY_EXTRUDERS(0,0,0);\n  163: unsigned long watchmillis[EXTRUDERS] = ARRAY_BY_EXTRUDERS(0,0,0);\n  164  #endif //WATCH_TEMP_PERIOD\n  165  \n  ...\n  175  //===========================================================================\n  176  \n  177: void PID_autotune(float temp, int extruder, int ncycles)\n  178  {\n  179    float input = 0.0;\n  ...\n  192    float max = 0, min = 10000;\n  193  \n  194: #if (defined(EXTRUDER_0_AUTO_FAN_PIN) && EXTRUDER_0_AUTO_FAN_PIN > -1) || \\\n  195:     (defined(EXTRUDER_1_AUTO_FAN_PIN) && EXTRUDER_1_AUTO_FAN_PIN > -1) || \\\n  196:     (defined(EXTRUDER_2_AUTO_FAN_PIN) && EXTRUDER_2_AUTO_FAN_PIN > -1)\n  197:   unsigned long extruder_autofan_last_check = millis();\n  198  #endif\n  199  \n  200:   if ((extruder >= EXTRUDERS)\n  201    #if (TEMP_BED_PIN <= -1)\n  202:        ||(extruder < 0)\n  203    #endif\n  204         ){\n  205:           SERIAL_ECHOLN(\"PID Autotune failed. Bad extruder number.\");\n  206            return;\n  207          }\n  ...\n  211    disable_heater(); // switch off all heaters.\n  212  \n  213:   if (extruder<0)\n  214    {\n  215       soft_pwm_bed = (MAX_BED_POWER)/2;\n  ...\n  218     else\n  219     {\n  220:      soft_pwm[extruder] = (PID_MAX)/2;\n  221       bias = d = (PID_MAX)/2;\n  222    }\n  ...\n  230        updateTemperaturesFromRawValues();\n  231  \n  232:       input = (extruder<0)?current_temperature_bed:current_temperature[extruder];\n  233  \n  234        max=max(max,input);\n  235        min=min(min,input);\n  236  \n  237:       #if (defined(EXTRUDER_0_AUTO_FAN_PIN) && EXTRUDER_0_AUTO_FAN_PIN > -1) || \\\n  238:           (defined(EXTRUDER_1_AUTO_FAN_PIN) && EXTRUDER_1_AUTO_FAN_PIN > -1) || \\\n  239:           (defined(EXTRUDER_2_AUTO_FAN_PIN) && EXTRUDER_2_AUTO_FAN_PIN > -1)\n  240:       if(millis() - extruder_autofan_last_check > 2500) {\n  241:         checkExtruderAutoFans();\n  242:         extruder_autofan_last_check = millis();\n  243        }\n  244        #endif\n  ...\n  247          if(millis() - t2 > 5000) { \n  248            heating=false;\n  249:           if (extruder<0)\n  250              soft_pwm_bed = (bias - d) >> 1;\n  251            else\n  252:             soft_pwm[extruder] = (bias - d) >> 1;\n  253            t1=millis();\n  254            t_high=t1 - t2;\n  ...\n  263            if(cycles > 0) {\n  264              bias += (d*(t_high - t_low))/(t_low + t_high);\n  265:             bias = constrain(bias, 20 ,(extruder<0?(MAX_BED_POWER):(PID_MAX))-20);\n  266:             if(bias > (extruder<0?(MAX_BED_POWER):(PID_MAX))/2) d = (extruder<0?(MAX_BED_POWER):(PID_MAX)) - 1 - bias;\n  267              else d = bias;\n  268  \n  ...\n  301              }\n  302            }\n  303:           if (extruder<0)\n  304              soft_pwm_bed = (bias + d) >> 1;\n  305            else\n  306:             soft_pwm[extruder] = (bias + d) >> 1;\n  307            cycles++;\n  308            min=temp;\n  ...\n  316      if(millis() - temp_millis > 2000) {\n  317        int p;\n  318:       if (extruder<0){\n  319          p=soft_pwm_bed;       \n  320          SERIAL_PROTOCOLPGM(\"ok B:\");\n  321        }else{\n  322:         p=soft_pwm[extruder];       \n  323          SERIAL_PROTOCOLPGM(\"ok T:\");\n  324        }\n  ...\n  345  {\n  346  #ifdef PIDTEMP\n  347:   for(int e = 0; e < EXTRUDERS; e++) { \n  348       temp_iState_max[e] = PID_INTEGRAL_DRIVE_MAX / Ki;  \n  349    }\n  ...\n  360  }\n  361  \n  362: #if (defined(EXTRUDER_0_AUTO_FAN_PIN) && EXTRUDER_0_AUTO_FAN_PIN > -1) || \\\n  363:     (defined(EXTRUDER_1_AUTO_FAN_PIN) && EXTRUDER_1_AUTO_FAN_PIN > -1) || \\\n  364:     (defined(EXTRUDER_2_AUTO_FAN_PIN) && EXTRUDER_2_AUTO_FAN_PIN > -1)\n  365  \n  366    #if defined(FAN_PIN) && FAN_PIN > -1\n  367:     #if EXTRUDER_0_AUTO_FAN_PIN == FAN_PIN \n  368:        #error \"You cannot set EXTRUDER_0_AUTO_FAN_PIN equal to FAN_PIN\"\n  369      #endif\n  370:     #if EXTRUDER_1_AUTO_FAN_PIN == FAN_PIN \n  371:        #error \"You cannot set EXTRUDER_1_AUTO_FAN_PIN equal to FAN_PIN\"\n  372      #endif\n  373:     #if EXTRUDER_2_AUTO_FAN_PIN == FAN_PIN \n  374:        #error \"You cannot set EXTRUDER_2_AUTO_FAN_PIN equal to FAN_PIN\"\n  375      #endif\n  376    #endif \n  377  \n  378: void setExtruderAutoFanState(int pin, bool state)\n  379  {\n  380:   unsigned char newFanSpeed = (state != 0) ? EXTRUDER_AUTO_FAN_SPEED : 0;\n  381    // this idiom allows both digital and PWM fan outputs (see M42 handling).\n  382    pinMode(pin, OUTPUT);\n  ...\n  385  }\n  386  \n  387: void checkExtruderAutoFans()\n  388  {\n  389    uint8_t fanState = 0;\n  390  \n  391    // which fan pins need to be turned on?      \n  392:   #if defined(EXTRUDER_0_AUTO_FAN_PIN) && EXTRUDER_0_AUTO_FAN_PIN > -1\n  393:     if (current_temperature[0] > EXTRUDER_AUTO_FAN_TEMPERATURE) \n  394        fanState |= 1;\n  395    #endif\n  396:   #if defined(EXTRUDER_1_AUTO_FAN_PIN) && EXTRUDER_1_AUTO_FAN_PIN > -1\n  397:     if (current_temperature[1] > EXTRUDER_AUTO_FAN_TEMPERATURE) \n  398      {\n  399:       if (EXTRUDER_1_AUTO_FAN_PIN == EXTRUDER_0_AUTO_FAN_PIN) \n  400          fanState |= 1;\n  401        else\n  ...\n  403      }\n  404    #endif\n  405:   #if defined(EXTRUDER_2_AUTO_FAN_PIN) && EXTRUDER_2_AUTO_FAN_PIN > -1\n  406:     if (current_temperature[2] > EXTRUDER_AUTO_FAN_TEMPERATURE) \n  407      {\n  408:       if (EXTRUDER_2_AUTO_FAN_PIN == EXTRUDER_0_AUTO_FAN_PIN) \n  409          fanState |= 1;\n  410:       else if (EXTRUDER_2_AUTO_FAN_PIN == EXTRUDER_1_AUTO_FAN_PIN) \n  411          fanState |= 2;\n  412        else\n  ...\n  415    #endif\n  416    \n  417:   // update extruder auto fan states\n  418:   #if defined(EXTRUDER_0_AUTO_FAN_PIN) && EXTRUDER_0_AUTO_FAN_PIN > -1\n  419:     setExtruderAutoFanState(EXTRUDER_0_AUTO_FAN_PIN, (fanState & 1) != 0);\n  420    #endif \n  421:   #if defined(EXTRUDER_1_AUTO_FAN_PIN) && EXTRUDER_1_AUTO_FAN_PIN > -1\n  422:     if (EXTRUDER_1_AUTO_FAN_PIN != EXTRUDER_0_AUTO_FAN_PIN) \n  423:       setExtruderAutoFanState(EXTRUDER_1_AUTO_FAN_PIN, (fanState & 2) != 0);\n  424    #endif \n  425:   #if defined(EXTRUDER_2_AUTO_FAN_PIN) && EXTRUDER_2_AUTO_FAN_PIN > -1\n  426:     if (EXTRUDER_2_AUTO_FAN_PIN != EXTRUDER_0_AUTO_FAN_PIN \n  427:         && EXTRUDER_2_AUTO_FAN_PIN != EXTRUDER_1_AUTO_FAN_PIN)\n  428:       setExtruderAutoFanState(EXTRUDER_2_AUTO_FAN_PIN, (fanState & 4) != 0);\n  429    #endif \n  430  }\n  431  \n  432: #endif // any extruder auto fan pins set\n  433  \n  434  void manage_heater()\n  ...\n  446  #endif\n  447  \n  448:   for(int e = 0; e < EXTRUDERS; e++) \n  449    {\n  450  \n  451: #ifdef TEMP_RUNAWAY_EXTRUDER_HYSTERESIS\n  452  \t  temp_runaway_check(e+1, target_temperature[e], current_temperature[e], (int)soft_pwm[e], false);\n  453  #endif\n  ...\n  542          if(IsStopped() == false) {\n  543            SERIAL_ERROR_START;\n  544:           SERIAL_ERRORLNPGM(\"Extruder switched off. Temperature difference between temp sensors is too high !\");\n  545            LCD_ALERTMESSAGEPGM(\"Err: REDUNDANT TEMP ERROR\");\n  546          }\n  ...\n  550        }\n  551      #endif\n  552:   } // End extruder for loop\n  553  \n  554:   #if (defined(EXTRUDER_0_AUTO_FAN_PIN) && EXTRUDER_0_AUTO_FAN_PIN > -1) || \\\n  555:       (defined(EXTRUDER_1_AUTO_FAN_PIN) && EXTRUDER_1_AUTO_FAN_PIN > -1) || \\\n  556:       (defined(EXTRUDER_2_AUTO_FAN_PIN) && EXTRUDER_2_AUTO_FAN_PIN > -1)\n  557:   if(millis() - extruder_autofan_last_check > 2500)  // only need to check fan state very infrequently\n  558    {\n  559:     checkExtruderAutoFans();\n  560:     extruder_autofan_last_check = millis();\n  561    }  \n  562    #endif       \n  ...\n  645    #endif\n  646    \n  647: //code for controlling the extruder rate based on the width sensor \n  648  #ifdef FILAMENT_SENSOR\n  649    if(filament_sensor) \n  ...\n  661  \t\t\t  meas_shift_index=MAX_MEASUREMENT_DELAY;\n  662  \t\t  \n  663: \t\t     volumetric_multiplier[FILAMENT_SENSOR_EXTRUDER_NUM] = pow((float)(100+measurement_delay[meas_shift_index])/100.0,2);\n  664: \t\t     if (volumetric_multiplier[FILAMENT_SENSOR_EXTRUDER_NUM] <0.01)\n  665: \t\t    \t volumetric_multiplier[FILAMENT_SENSOR_EXTRUDER_NUM]=0.01;\n  666  \t}\n  667  #endif\n  ...\n  669  \n  670  #define PGM_RD_W(x)   (short)pgm_read_word(&x)\n  671: // Derived from RepRap FiveD extruder::getTemperature()\n  672  // For hot end temperature measurement.\n  673  static float analog2temp(int raw, uint8_t e) {\n  674  #ifdef TEMP_SENSOR_1_AS_REDUNDANT\n  675:   if(e > EXTRUDERS)\n  676  #else\n  677:   if(e >= EXTRUDERS)\n  678  #endif\n  679    {\n  680        SERIAL_ERROR_START;\n  681        SERIAL_ERROR((int)e);\n  682:       SERIAL_ERRORLNPGM(\" - Invalid extruder number !\");\n  683        kill();\n  684        return 0.0;\n  ...\n  717  }\n  718  \n  719: // Derived from RepRap FiveD extruder::getTemperature()\n  720  // For bed temperature measurement.\n  721  static float analog2tempBed(int raw) {\n  ...\n  776  static void updateTemperaturesFromRawValues()\n  777  {\n  778:     for(uint8_t e=0;e<EXTRUDERS;e++)\n  779      {\n  780          current_temperature[e] = analog2temp(current_temperature_raw[e], e);\n  ...\n  835  #endif\n  836    \n  837:   // Finish init of mult extruder arrays \n  838:   for(int e = 0; e < EXTRUDERS; e++) {\n  839      // populate with the first value \n  840      maxttemp[e] = maxttemp[0];\n  ...\n  966  #endif //MAXTEMP\n  967  \n  968: #if (EXTRUDERS > 1) && defined(HEATER_1_MINTEMP)\n  969    minttemp[1] = HEATER_1_MINTEMP;\n  970    while(analog2temp(minttemp_raw[1], 1) < HEATER_1_MINTEMP) {\n  ...\n  976    }\n  977  #endif // MINTEMP 1\n  978: #if (EXTRUDERS > 1) && defined(HEATER_1_MAXTEMP)\n  979    maxttemp[1] = HEATER_1_MAXTEMP;\n  980    while(analog2temp(maxttemp_raw[1], 1) > HEATER_1_MAXTEMP) {\n  ...\n  987  #endif //MAXTEMP 1\n  988  \n  989: #if (EXTRUDERS > 2) && defined(HEATER_2_MINTEMP)\n  990    minttemp[2] = HEATER_2_MINTEMP;\n  991    while(analog2temp(minttemp_raw[2], 2) < HEATER_2_MINTEMP) {\n  ...\n  997    }\n  998  #endif //MINTEMP 2\n  999: #if (EXTRUDERS > 2) && defined(HEATER_2_MAXTEMP)\n 1000    maxttemp[2] = HEATER_2_MAXTEMP;\n 1001    while(analog2temp(maxttemp_raw[2], 2) > HEATER_2_MAXTEMP) {\n ....\n 1033  {  \n 1034  #ifdef WATCH_TEMP_PERIOD\n 1035:   for (int e = 0; e < EXTRUDERS; e++)\n 1036    {\n 1037      if(degHotend(e) < degTargetHotend(e) - (WATCH_TEMP_INCREASE * 2))\n ....\n 1044  }\n 1045  \n 1046: #if (defined (TEMP_RUNAWAY_BED_HYSTERESIS) && TEMP_RUNAWAY_BED_TIMEOUT > 0) || (defined (TEMP_RUNAWAY_EXTRUDER_HYSTERESIS) && TEMP_RUNAWAY_EXTRUDER_TIMEOUT > 0)\n 1047  void temp_runaway_check(int _heater_id, float _target_temperature, float _current_temperature, float _output, bool _isbed)\n 1048  {\n ....\n 1060  \t}\n 1061  #endif\n 1062: #ifdef \tTEMP_RUNAWAY_EXTRUDER_TIMEOUT\n 1063  \tif (!_isbed)\n 1064  \t{\n 1065: \t\t__hysteresis = TEMP_RUNAWAY_EXTRUDER_HYSTERESIS;\n 1066: \t\t__timeout = TEMP_RUNAWAY_EXTRUDER_TIMEOUT;\n 1067  \t}\n 1068  #endif\n ....\n 1156  void disable_heater()\n 1157  {\n 1158:   for(int i=0;i<EXTRUDERS;i++)\n 1159      setTargetHotend(0,i);\n 1160    setTargetBed(0);\n ....\n 1167    #endif\n 1168       \n 1169:   #if defined(TEMP_1_PIN) && TEMP_1_PIN > -1 && EXTRUDERS > 1\n 1170      target_temperature[1]=0;\n 1171      soft_pwm[1]=0;\n ....\n 1175    #endif\n 1176        \n 1177:   #if defined(TEMP_2_PIN) && TEMP_2_PIN > -1 && EXTRUDERS > 2\n 1178      target_temperature[2]=0;\n 1179      soft_pwm[2]=0;\n ....\n 1197      SERIAL_ERROR_START;\n 1198      SERIAL_ERRORLN((int)e);\n 1199:     SERIAL_ERRORLNPGM(\": Extruder switched off. MAXTEMP triggered !\");\n 1200      LCD_ALERTMESSAGEPGM(\"Err: MAXTEMP\");\n 1201    }\n ....\n 1206      \n 1207    #endif\n 1208:     SET_OUTPUT(EXTRUDER_0_AUTO_FAN_PIN);\n 1209      SET_OUTPUT(FAN_PIN);\n 1210      SET_OUTPUT(BEEPER);\n 1211      WRITE(FAN_PIN, 1);\n 1212:     WRITE(EXTRUDER_0_AUTO_FAN_PIN, 1);\n 1213      WRITE(BEEPER, 1);\n 1214      fanSpeed=255;\n ....\n 1220      SERIAL_ERROR_START;\n 1221      SERIAL_ERRORLN((int)e);\n 1222:     SERIAL_ERRORLNPGM(\": Extruder switched off. MINTEMP triggered !\");\n 1223      LCD_ALERTMESSAGEPGM(\"Err: MINTEMP\");\n 1224    }\n ....\n 1330    static unsigned char state_timer_heater_0 = 0;\n 1331  #endif \n 1332: #if (EXTRUDERS > 1) || defined(HEATERS_PARALLEL)\n 1333    static unsigned char soft_pwm_1;\n 1334  #ifdef SLOW_PWM_HEATERS\n ....\n 1337  #endif \n 1338  #endif\n 1339: #if EXTRUDERS > 2\n 1340    static unsigned char soft_pwm_2;\n 1341  #ifdef SLOW_PWM_HEATERS\n ....\n 1369      } else WRITE(HEATER_0_PIN,0);\n 1370      \n 1371: #if EXTRUDERS > 1\n 1372      soft_pwm_1 = soft_pwm[1];\n 1373      if(soft_pwm_1 > 0) WRITE(HEATER_1_PIN,1); else WRITE(HEATER_1_PIN,0);\n 1374  #endif\n 1375: #if EXTRUDERS > 2\n 1376      soft_pwm_2 = soft_pwm[2];\n 1377      if(soft_pwm_2 > 0) WRITE(HEATER_2_PIN,1); else WRITE(HEATER_2_PIN,0);\n ....\n 1392  #endif\n 1393    }\n 1394: #if EXTRUDERS > 1\n 1395    if(soft_pwm_1 < pwm_count) WRITE(HEATER_1_PIN,0);\n 1396  #endif\n 1397: #if EXTRUDERS > 2\n 1398    if(soft_pwm_2 < pwm_count) WRITE(HEATER_2_PIN,0);\n 1399  #endif\n ....\n 1418  #endif\n 1419    if (slow_pwm_count == 0) {\n 1420:     // EXTRUDER 0 \n 1421      soft_pwm_0 = soft_pwm[0];\n 1422      if (soft_pwm_0 > 0) {\n ....\n 1448      }\n 1449      \n 1450: #if EXTRUDERS > 1\n 1451:     // EXTRUDER 1\n 1452      soft_pwm_1 = soft_pwm[1];\n 1453      if (soft_pwm_1 > 0) {\n ....\n 1474  #endif\n 1475      \n 1476: #if EXTRUDERS > 2\n 1477:     // EXTRUDER 2\n 1478      soft_pwm_2 = soft_pwm[2];\n 1479      if (soft_pwm_2 > 0) {\n ....\n 1527    } // if (slow_pwm_count == 0)\n 1528    \n 1529:   // EXTRUDER 0 \n 1530    if (soft_pwm_0 < slow_pwm_count) {\n 1531      // turn OFF heather only if the minimum time is up \n ....\n 1543    }\n 1544      \n 1545: #if EXTRUDERS > 1\n 1546:   // EXTRUDER 1 \n 1547    if (soft_pwm_1 < slow_pwm_count) {\n 1548      // turn OFF heather only if the minimum time is up \n ....\n 1558  #endif\n 1559    \n 1560: #if EXTRUDERS > 2\n 1561:   // EXTRUDER 2\n 1562    if (soft_pwm_2 < slow_pwm_count) {\n 1563      // turn OFF heather only if the minimum time is up \n ....\n 1604      slow_pwm_count &= 0x7f;\n 1605      \n 1606:     // Extruder 0\n 1607      if (state_timer_heater_0 > 0) {\n 1608        state_timer_heater_0--;\n 1609      } \n 1610    \n 1611: #if EXTRUDERS > 1\n 1612:     // Extruder 1\n 1613      if (state_timer_heater_1 > 0) \n 1614        state_timer_heater_1--;\n 1615  #endif\n 1616      \n 1617: #if EXTRUDERS > 2\n 1618:     // Extruder 2\n 1619      if (state_timer_heater_2 > 0) \n 1620        state_timer_heater_2--;\n ....\n 1754      {\n 1755        current_temperature_raw[0] = raw_temp_0_value;\n 1756: #if EXTRUDERS > 1\n 1757        current_temperature_raw[1] = raw_temp_1_value;\n 1758  #endif\n ....\n 1760        redundant_temperature_raw = raw_temp_1_value;\n 1761  #endif\n 1762: #if EXTRUDERS > 2\n 1763        current_temperature_raw[2] = raw_temp_2_value;\n 1764  #endif\n ....\n 1793          min_temp_error(0);\n 1794      }\n 1795: #if EXTRUDERS > 1\n 1796  #if HEATER_1_RAW_LO_TEMP > HEATER_1_RAW_HI_TEMP\n 1797      if(current_temperature_raw[1] <= maxttemp_raw[1]) {\n ....\n 1809      }\n 1810  #endif\n 1811: #if EXTRUDERS > 2\n 1812  #if HEATER_2_RAW_LO_TEMP > HEATER_2_RAW_HI_TEMP\n 1813      if(current_temperature_raw[2] <= maxttemp_raw[2]) {\n\nE:\\Documents\\Simon\\Mes documents\\3dPrint\\Firmware\\PrusaFW\\Firmware\\temperature.h:\n   42  // low level conversion routines\n   43  // do not use these routines and variables outside of temperature.cpp\n   44: extern int target_temperature[EXTRUDERS];  \n   45: extern float current_temperature[EXTRUDERS];\n   46  #ifdef SHOW_TEMP_ADC_VALUES\n   47:   extern int current_temperature_raw[EXTRUDERS];\n   48    extern int current_temperature_bed_raw;\n   49  #endif\n   ..\n   97  //deg=degreeCelsius\n   98  \n   99: FORCE_INLINE float degHotend(uint8_t extruder) {  \n  100:   return current_temperature[extruder];\n  101  };\n  102  \n  103  #ifdef SHOW_TEMP_ADC_VALUES\n  104:   FORCE_INLINE float rawHotendTemp(uint8_t extruder) {  \n  105:     return current_temperature_raw[extruder];\n  106    };\n  107  \n  ...\n  115  };\n  116  \n  117: FORCE_INLINE float degTargetHotend(uint8_t extruder) {  \n  118:   return target_temperature[extruder];\n  119  };\n  120  \n  ...\n  123  };\n  124  \n  125: FORCE_INLINE void setTargetHotend(const float &celsius, uint8_t extruder) {  \n  126:   target_temperature[extruder] = celsius;\n  127  };\n  128  \n  ...\n  131  };\n  132  \n  133: FORCE_INLINE bool isHeatingHotend(uint8_t extruder){  \n  134:   return target_temperature[extruder] > current_temperature[extruder];\n  135  };\n  136  \n  ...\n  139  };\n  140  \n  141: FORCE_INLINE bool isCoolingHotend(uint8_t extruder) {  \n  142:   return target_temperature[extruder] < current_temperature[extruder];\n  143  };\n  144  \n  ...\n  152  #define isHeatingHotend0() isHeatingHotend(0)\n  153  #define isCoolingHotend0() isCoolingHotend(0)\n  154: #if EXTRUDERS > 1\n  155  #define degHotend1() degHotend(1)\n  156  #define degTargetHotend1() degTargetHotend(1)\n  ...\n  161  #define setTargetHotend1(_celsius) do{}while(0)\n  162  #endif\n  163: #if EXTRUDERS > 2\n  164  #define degHotend2() degHotend(2)\n  165  #define degTargetHotend2() degTargetHotend(2)\n  ...\n  170  #define setTargetHotend2(_celsius) do{}while(0)\n  171  #endif\n  172: #if EXTRUDERS > 3\n  173: #error Invalid number of extruders\n  174  #endif\n  175  \n  176: #if (defined (TEMP_RUNAWAY_BED_HYSTERESIS) && TEMP_RUNAWAY_BED_TIMEOUT > 0) || (defined (TEMP_RUNAWAY_EXTRUDER_HYSTERESIS) && TEMP_RUNAWAY_EXTRUDER_TIMEOUT > 0)\n  177  static float temp_runaway_status[4];\n  178  static float temp_runaway_target[4];\n  ...\n  195   {\n  196    autotemp_enabled=false;\n  197:   if(degTargetHotend(active_extruder)>autotemp_min)\n  198:     setTargetHotend(0,active_extruder);\n  199   }\n  200   #endif\n  201  }\n  202  \n  203: void PID_autotune(float temp, int extruder, int ncycles);\n  204  \n  205: void setExtruderAutoFanState(int pin, bool state);\n  206: void checkExtruderAutoFans();\n  207  \n  208  #endif\n\nE:\\Documents\\Simon\\Mes documents\\3dPrint\\Firmware\\PrusaFW\\Firmware\\ultralcd.cpp:\n  572        // G90: Absolute positioning.\n  573  \t\t\tenquecommand_P(PSTR(\"G90\"));\n  574:       // M83: Set extruder to relative mode.\n  575  \t\t\tenquecommand_P(PSTR(\"M83\"));\n  576  \t\t\t#ifdef X_CANCEL_POS \n  ...\n 1172        encoderPosition = 0;\n 1173        world2machine_clamp(current_position[X_AXIS], current_position[Y_AXIS]);\n 1174:       plan_buffer_line(current_position[X_AXIS], current_position[Y_AXIS], current_position[Z_AXIS], current_position[E_AXIS], manual_feedrate[axis] / 60, active_extruder);\n 1175        lcdDrawUpdate = 1;\n 1176      }\n ....\n 1189        current_position[E_AXIS] += float((int)encoderPosition) * move_menu_scale;\n 1190        encoderPosition = 0;\n 1191:       plan_buffer_line(current_position[X_AXIS], current_position[Y_AXIS], current_position[Z_AXIS], current_position[E_AXIS], manual_feedrate[E_AXIS] / 60, active_extruder);\n 1192        lcdDrawUpdate = 1;\n 1193      }\n ....\n 1195    if (lcdDrawUpdate)\n 1196    {\n 1197:     lcd_implementation_drawedit(PSTR(\"Extruder\"), ftostr31(current_position[E_AXIS]));\n 1198    }\n 1199    if (LCD_CLICKED) lcd_goto_menu(lcd_move_menu_axis);\n ....\n 1464                      current_position[Z_AXIS] += fabs(encoderPosition);\n 1465                      encoderPosition = 0;\n 1466:                     plan_buffer_line(current_position[X_AXIS], current_position[Y_AXIS], current_position[Z_AXIS], current_position[E_AXIS], manual_feedrate[Z_AXIS] / 60, active_extruder);\n 1467                  }\n 1468              }\n ....\n 2857  \t\tcurrent_position[2] = (READ(Z_MIN_PIN) ^ Z_MIN_ENDSTOP_INVERTING == 1) ? current_position[2] = current_position[2] + 10 : current_position[2];\n 2858  \t}\n 2859: \tplan_buffer_line(current_position[X_AXIS], current_position[Y_AXIS], current_position[Z_AXIS], current_position[E_AXIS], manual_feedrate[0] / 60, active_extruder);\n 2860  \tdelay(500);\n 2861  \n ....\n 2893  \t\t}\n 2894  \n 2895: \t\tplan_buffer_line(current_position[X_AXIS], current_position[Y_AXIS], current_position[Z_AXIS], current_position[3], manual_feedrate[0] / 60, active_extruder);\n 2896  \t\tst_synchronize();\n 2897  \n ....\n 2939  \n 2940  \tcurrent_position[_axis] = current_position[_axis] + 15;\n 2941: \tplan_buffer_line(current_position[X_AXIS], current_position[Y_AXIS], current_position[Z_AXIS], current_position[3], manual_feedrate[0] / 60, active_extruder);\n 2942  \n 2943  \tif (!_stepresult)\n\nE:\\Documents\\Simon\\Mes documents\\3dPrint\\Firmware\\PrusaFW\\Firmware\\ultralcd_implementation_hitachi_HD44780.h:\n 1234      if (target_temperature[0] > 0) leds |= LED_B;\n 1235      if (fanSpeed) leds |= LED_C;\n 1236:     #if EXTRUDERS > 1  \n 1237        if (target_temperature[1] > 0) leds |= LED_C;\n 1238      #endif\n\nE:\\Documents\\Simon\\Mes documents\\3dPrint\\Firmware\\PrusaFW\\Firmware\\variants\\1_75_ZRIB_CONFIG.h:\n   64  \n   65  /*------------------------------------\n   66: EXTRUDER SETTINGS\n   67  *------------------------------------*/\n   68  \n   ..\n   79  #define BED_MAXTEMP 150\n   80  \n   81: // Define PID constants for extruder\n   82  #define  DEFAULT_Kp 14\n   83  #define  DEFAULT_Ki 0.5\n   ..\n   87  #define EXTRUDE_MINTEMP 160\n   88  \n   89: // Extruder cooling fans\n   90: #define EXTRUDER_0_AUTO_FAN_PIN   6\n   91: #define EXTRUDER_1_AUTO_FAN_PIN   -1\n   92: #define EXTRUDER_2_AUTO_FAN_PIN   -1\n   93: #define EXTRUDER_AUTO_FAN_TEMPERATURE 50\n   94: #define EXTRUDER_AUTO_FAN_SPEED   255  // == full speed\n   95  \n   96  \n   ..\n  149  //#define TEMP_RUNAWAY_BED_TIMEOUT 360\n  150  \n  151: #define TEMP_RUNAWAY_EXTRUDER_HYSTERESIS 15\n  152: #define TEMP_RUNAWAY_EXTRUDER_TIMEOUT 45\n  153  \n  154  /*------------------------------------\n  ...\n  193  #define MESH_HOME_Z_SEARCH 5\n  194  \n  195: #define X_PROBE_OFFSET_FROM_EXTRUDER 23     // Z probe to nozzle X offset: -left  +right\n  196: #define Y_PROBE_OFFSET_FROM_EXTRUDER 9     // Z probe to nozzle Y offset: -front +behind\n  197: #define Z_PROBE_OFFSET_FROM_EXTRUDER -0.4  // Z probe to nozzle Z offset: -below (always!)\n  198  #endif\n  199  \n  ...\n  201  // Select PID or bang-bang with PIDTEMPBED. If bang-bang, BED_LIMIT_SWITCHING will enable hysteresis\n  202  //\n  203: // Uncomment this to enable PID on the bed. It uses the same frequency PWM as the extruder.\n  204  // If your PID_dT above is the default, and correct for your hardware/configuration, that means 7.689Hz,\n  205  // which is fine for driving a square wave into a resistive load and does not significantly impact you FET heating.\n\nE:\\Documents\\Simon\\Mes documents\\3dPrint\\Firmware\\PrusaFW\\Firmware\\variants\\1_75mm_MK2-RAMBo10a-E3Dv6full.h:\n   64  \n   65  /*------------------------------------\n   66: EXTRUDER SETTINGS\n   67  *------------------------------------*/\n   68  \n   ..\n   79  #define BED_MAXTEMP 150\n   80  \n   81: // Define PID constants for extruder\n   82  #define  DEFAULT_Kp 40.925\n   83  #define  DEFAULT_Ki 4.875\n   ..\n   87  #define EXTRUDE_MINTEMP 130\n   88  \n   89: // Extruder cooling fans\n   90: #define EXTRUDER_0_AUTO_FAN_PIN   8\n   91: #define EXTRUDER_1_AUTO_FAN_PIN   -1\n   92: #define EXTRUDER_2_AUTO_FAN_PIN   -1\n   93: #define EXTRUDER_AUTO_FAN_TEMPERATURE 50\n   94: #define EXTRUDER_AUTO_FAN_SPEED   255  // == full speed\n   95  \n   96  \n   ..\n  149  //#define TEMP_RUNAWAY_BED_TIMEOUT 360\n  150  \n  151: #define TEMP_RUNAWAY_EXTRUDER_HYSTERESIS 15\n  152: #define TEMP_RUNAWAY_EXTRUDER_TIMEOUT 45\n  153  \n  154  /*------------------------------------\n  ...\n  193  #define MESH_HOME_Z_SEARCH 5\n  194  \n  195: #define X_PROBE_OFFSET_FROM_EXTRUDER 23     // Z probe to nozzle X offset: -left  +right\n  196: #define Y_PROBE_OFFSET_FROM_EXTRUDER 9     // Z probe to nozzle Y offset: -front +behind\n  197: #define Z_PROBE_OFFSET_FROM_EXTRUDER -0.4  // Z probe to nozzle Z offset: -below (always!)\n  198  #endif\n  199  \n  ...\n  201  // Select PID or bang-bang with PIDTEMPBED. If bang-bang, BED_LIMIT_SWITCHING will enable hysteresis\n  202  //\n  203: // Uncomment this to enable PID on the bed. It uses the same frequency PWM as the extruder.\n  204  // If your PID_dT above is the default, and correct for your hardware/configuration, that means 7.689Hz,\n  205  // which is fine for driving a square wave into a resistive load and does not significantly impact you FET heating.\n\nE:\\Documents\\Simon\\Mes documents\\3dPrint\\Firmware\\PrusaFW\\Firmware\\variants\\1_75mm_MK2-RAMBo13a-E3Dv6full.h:\n   64  \n   65  /*------------------------------------\n   66: EXTRUDER SETTINGS\n   67  *------------------------------------*/\n   68  \n   ..\n   79  #define BED_MAXTEMP 150\n   80  \n   81: // Define PID constants for extruder\n   82  #define  DEFAULT_Kp 40.925\n   83  #define  DEFAULT_Ki 4.875\n   ..\n   87  #define EXTRUDE_MINTEMP 130\n   88  \n   89: // Extruder cooling fans\n   90: #define EXTRUDER_0_AUTO_FAN_PIN   8\n   91: #define EXTRUDER_1_AUTO_FAN_PIN   -1\n   92: #define EXTRUDER_2_AUTO_FAN_PIN   -1\n   93: #define EXTRUDER_AUTO_FAN_TEMPERATURE 50\n   94: #define EXTRUDER_AUTO_FAN_SPEED   255  // == full speed\n   95  \n   96  \n   ..\n  149  //#define TEMP_RUNAWAY_BED_TIMEOUT 360\n  150  \n  151: #define TEMP_RUNAWAY_EXTRUDER_HYSTERESIS 15\n  152: #define TEMP_RUNAWAY_EXTRUDER_TIMEOUT 45\n  153  \n  154  /*------------------------------------\n  ...\n  193  #define MESH_HOME_Z_SEARCH 5\n  194  \n  195: #define X_PROBE_OFFSET_FROM_EXTRUDER 23     // Z probe to nozzle X offset: -left  +right\n  196: #define Y_PROBE_OFFSET_FROM_EXTRUDER 9     // Z probe to nozzle Y offset: -front +behind\n  197: #define Z_PROBE_OFFSET_FROM_EXTRUDER -0.4  // Z probe to nozzle Z offset: -below (always!)\n  198  #endif\n  199  \n  ...\n  201  // Select PID or bang-bang with PIDTEMPBED. If bang-bang, BED_LIMIT_SWITCHING will enable hysteresis\n  202  //\n  203: // Uncomment this to enable PID on the bed. It uses the same frequency PWM as the extruder.\n  204  // If your PID_dT above is the default, and correct for your hardware/configuration, that means 7.689Hz,\n  205  // which is fine for driving a square wave into a resistive load and does not significantly impact you FET heating.\n\nE:\\Documents\\Simon\\Mes documents\\3dPrint\\Firmware\\PrusaFW\\Firmware\\variants\\1_75mm_RAMPS1_4_ANETA8.h:\n   60  \n   61  /*------------------------------------\n   62:     EXTRUDER SETTINGS\n   63  *------------------------------------*/\n   64  \n   ..\n   75  #define BED_MAXTEMP 110\n   76  \n   77: // Define PID constants for extruder\n   78  #define  DEFAULT_Kp 7.0\n   79  #define  DEFAULT_Ki 0.1\n   ..\n   83  #define EXTRUDE_MINTEMP 150\n   84  \n   85: // Extruder cooling fans\n   86: #define EXTRUDER_0_AUTO_FAN_PIN   -1\n   87: #define EXTRUDER_1_AUTO_FAN_PIN   -1\n   88: #define EXTRUDER_2_AUTO_FAN_PIN   -1\n   89: #define EXTRUDER_AUTO_FAN_TEMPERATURE 50\n   90: #define EXTRUDER_AUTO_FAN_SPEED   255  // == full speed\n   91  \n   92  \n   ..\n  194  //#define TEMP_RUNAWAY_BED_TIMEOUT 360\n  195  \n  196: #define TEMP_RUNAWAY_EXTRUDER_HYSTERESIS 15\n  197: #define TEMP_RUNAWAY_EXTRUDER_TIMEOUT 45\n  198  \n  199  \n\nE:\\Documents\\Simon\\Mes documents\\3dPrint\\Firmware\\Marlin 1.1.0-RC6 - ZRIB BOARD\\Marlin\\pins_RAMPS_14.h:\n   26   * Applies to the following boards:\n   27   *\n   28:  *  RAMPS_14_EFB (Extruder, Fan, Bed)\n   29:  *  RAMPS_14_EEB (Extruder, Extruder, Bed)\n   30:  *  RAMPS_14_EFF (Extruder, Fan, Fan)\n   31:  *  RAMPS_14_EEF (Extruder, Extruder, Fan)\n   32   *  RAMPS_14_SF  (Spindle, Controller Fan)\n   33   *\n   34:  *  RAMPS_13_EFB (Extruder, Fan, Bed)\n   35:  *  RAMPS_13_EEB (Extruder, Extruder, Bed)\n   36:  *  RAMPS_13_EFF (Extruder, Fan, Fan)\n   37:  *  RAMPS_13_EEF (Extruder, Extruder, Fan)\n   38   *  RAMPS_13_SF  (Spindle, Controller Fan)\n   39   *\n   ..\n  125    #define HEATER_0_PIN      8\n  126  #else\n  127:   #define HEATER_0_PIN     10   // EXTRUDER 1\n  128  #endif\n  129  \n  ...\n  131    #define HEATER_1_PIN     7 //ZRIB BOARD\n  132  #else\n  133:   #define HEATER_1_PIN      9   // EXTRUDER 2 (FAN On Sprinter)\n  134  #endif\n  135  \n\n918 matches across 37 files\n\n\nSearching 938 files for \"BOARD_RAMBO_MINI_1_3\"\n\nE:\\Documents\\Simon\\Mes documents\\3dPrint\\Firmware\\PrusaFW\\Firmware\\boards.h:\n    6  \n    7  #define BOARD_RAMBO             301  // Rambo\n    8: #define BOARD_RAMBO_MINI_1_3    302  // Rambo-mini 1.3\n    9  #define BOARD_RAMBO_MINI_1_0    102  // Rambo-mini 1.0\n   10  \n\nE:\\Documents\\Simon\\Mes documents\\3dPrint\\Firmware\\PrusaFW\\Firmware\\Configuration_prusa.h:\n   17  \n   18  // Electronics\n   19: #define MOTHERBOARD BOARD_RAMBO_MINI_1_3\n   20  \n   21  \n\nE:\\Documents\\Simon\\Mes documents\\3dPrint\\Firmware\\PrusaFW\\Firmware\\variants\\1_75_ZRIB_CONFIG.h:\n   17  \n   18  // Electronics\n   19: #define MOTHERBOARD BOARD_RAMBO_MINI_1_3\n   20  \n   21  \n\nE:\\Documents\\Simon\\Mes documents\\3dPrint\\Firmware\\PrusaFW\\Firmware\\variants\\1_75mm_MK2-RAMBo13a-E3Dv6full.h:\n   17  \n   18  // Electronics\n   19: #define MOTHERBOARD BOARD_RAMBO_MINI_1_3\n   20  \n   21  \n\n4 matches across 4 files\n\n\nSearching 937 files for \"FAN\"\n\nE:\\Documents\\Simon\\Mes documents\\3dPrint\\Firmware\\PrusaFW\\ArduinoAddons\\Arduino_1.0.x\\libraries\\U8glib\\utility\\u8g_font_data.c:\n    <binary>\n\nE:\\Documents\\Simon\\Mes documents\\3dPrint\\Firmware\\PrusaFW\\ArduinoAddons\\Arduino_1.6.x\\hardware\\marlin\\avr\\libraries\\U8glib\\utility\\u8g_font_data.c:\n    <binary>\n\nE:\\Documents\\Simon\\Mes documents\\3dPrint\\Firmware\\PrusaFW\\Firmware\\Configuration.h:\n  621  #endif\n  622  \n  623: // Increase the FAN pwm frequency. Removes the PWM noise but increases heating in the FET/Arduino\n  624: //#define FAST_PWM_FAN\n  625  \n  626  // Temperature status LEDs that display the hotend and bet temperature.\n  ...\n  629  //#define TEMP_STAT_LEDS\n  630  \n  631: // Use software PWM to drive the fan, as for the heaters. This uses a very low frequency\n  632  // which is not ass annoying as with the hardware PWM. On the other hand, if this frequency\n  633  // is too low, you should also increment SOFT_PWM_SCALE.\n  634: //#define FAN_SOFT_PWM\n  635  \n  636  // Incrementing this by 1 will double the software PWM frequency,\n  637: // affecting heaters, and the fan if FAN_SOFT_PWM is enabled.\n  638  // However, control resolution will be halved for each increment;\n  639  // at zero value, there are 128 effective control positions.\n\nE:\\Documents\\Simon\\Mes documents\\3dPrint\\Firmware\\PrusaFW\\Firmware\\Configuration_adv.h:\n   59  #define TEMP_SENSOR_AD595_GAIN   1.0\n   60  \n   61: //This is for controlling a fan to cool down the stepper drivers\n   62  //it will turn on when any driver is enabled\n   63  //and turn off after the set amount of seconds from last driver being disabled again\n   64: #define CONTROLLERFAN_PIN -1 //Pin used for the fan to cool controller (-1 to disable)\n   65: #define CONTROLLERFAN_SECS 60 //How many seconds, after all motors were disabled, the fan should run\n   66: #define CONTROLLERFAN_SPEED 255  // == full speed\n   67  \n   68: // When first starting the main fan, run it at full speed for the\n   69: // given number of milliseconds.  This gets the fan spinning reliably\n   70: // before setting a PWM value. (Does not work with software PWM for fan on Sanguinololu)\n   71: //#define FAN_KICKSTART_TIME 100\n   72  \n   73  \n\nE:\\Documents\\Simon\\Mes documents\\3dPrint\\Firmware\\PrusaFW\\Firmware\\Configuration_prusa.h:\n   87  #define EXTRUDE_MINTEMP 160\n   88  \n   89: // Extruder cooling fans\n   90: #define EXTRUDER_0_AUTO_FAN_PIN   6\n   91: #define EXTRUDER_1_AUTO_FAN_PIN   -1\n   92: #define EXTRUDER_2_AUTO_FAN_PIN   -1\n   93: #define EXTRUDER_AUTO_FAN_TEMPERATURE 50\n   94: #define EXTRUDER_AUTO_FAN_SPEED   255  // == full speed\n   95  \n   96  \n   ..\n  248  #define PLA_PREHEAT_HOTEND_TEMP 215\n  249  #define PLA_PREHEAT_HPB_TEMP 55\n  250: #define PLA_PREHEAT_FAN_SPEED 0  \n  251  \n  252  #define ABS_PREHEAT_HOTEND_TEMP 255\n  253  #define ABS_PREHEAT_HPB_TEMP 100\n  254: #define ABS_PREHEAT_FAN_SPEED 0 \n  255  \n  256  #define HIPS_PREHEAT_HOTEND_TEMP 220\n  257  #define HIPS_PREHEAT_HPB_TEMP 100\n  258: #define HIPS_PREHEAT_FAN_SPEED 0 \n  259  \n  260  #define PP_PREHEAT_HOTEND_TEMP 254\n  261  #define PP_PREHEAT_HPB_TEMP 100\n  262: #define PP_PREHEAT_FAN_SPEED 0 \n  263  \n  264  #define PET_PREHEAT_HOTEND_TEMP 240\n  265  #define PET_PREHEAT_HPB_TEMP 90\n  266: #define PET_PREHEAT_FAN_SPEED 0 \n  267  \n  268  #define FLEX_PREHEAT_HOTEND_TEMP 230\n  269  #define FLEX_PREHEAT_HPB_TEMP 50\n  270: #define FLEX_PREHEAT_FAN_SPEED 0 \n  271  \n  272  /*------------------------------------\n\nE:\\Documents\\Simon\\Mes documents\\3dPrint\\Firmware\\PrusaFW\\Firmware\\Configuration_prusa.h.bak:\n   96  #define EXTRUDE_MINTEMP 160\n   97  \n   98: // Extruder cooling fans\n   99: #define EXTRUDER_0_AUTO_FAN_PIN   6\n  100: #define EXTRUDER_1_AUTO_FAN_PIN   -1\n  101: #define EXTRUDER_2_AUTO_FAN_PIN   -1\n  102: #define EXTRUDER_AUTO_FAN_TEMPERATURE 50\n  103: #define EXTRUDER_AUTO_FAN_SPEED   255  // == full speed\n  104  \n  105  \n  ...\n  255  #define PLA_PREHEAT_HOTEND_TEMP 200\n  256  #define PLA_PREHEAT_HPB_TEMP 55\n  257: #define PLA_PREHEAT_FAN_SPEED 0  \n  258  \n  259  #define ABS_PREHEAT_HOTEND_TEMP 240\n  260  #define ABS_PREHEAT_HPB_TEMP 100\n  261: #define ABS_PREHEAT_FAN_SPEED 0 \n  262  \n  263  #define HIPS_PREHEAT_HOTEND_TEMP 220\n  264  #define HIPS_PREHEAT_HPB_TEMP 100\n  265: #define HIPS_PREHEAT_FAN_SPEED 0 \n  266  \n  267  #define PP_PREHEAT_HOTEND_TEMP 254\n  268  #define PP_PREHEAT_HPB_TEMP 100\n  269: #define PP_PREHEAT_FAN_SPEED 0 \n  270  \n  271  #define PET_PREHEAT_HOTEND_TEMP 240\n  272  #define PET_PREHEAT_HPB_TEMP 90\n  273: #define PET_PREHEAT_FAN_SPEED 0 \n  274  \n  275  #define FLEX_PREHEAT_HOTEND_TEMP 230\n  276  #define FLEX_PREHEAT_HPB_TEMP 50\n  277: #define FLEX_PREHEAT_FAN_SPEED 0 \n  278  \n  279  // This sets the max power delivered to the bed, and replaces the HEATER_BED_DUTY_CYCLE_DIVIDER option.\n\nE:\\Documents\\Simon\\Mes documents\\3dPrint\\Firmware\\PrusaFW\\Firmware\\ConfigurationStore.cpp:\n   64    EEPROM_WRITE_VAR(i,add_homing);\n   65    #ifndef ULTIPANEL\n   66:   int plaPreheatHotendTemp = PLA_PREHEAT_HOTEND_TEMP, plaPreheatHPBTemp = PLA_PREHEAT_HPB_TEMP, plaPreheatFanSpeed = PLA_PREHEAT_FAN_SPEED;\n   67:   int absPreheatHotendTemp = ABS_PREHEAT_HOTEND_TEMP, absPreheatHPBTemp = ABS_PREHEAT_HPB_TEMP, absPreheatFanSpeed = ABS_PREHEAT_FAN_SPEED;\n   68    \n   69  \n   ..\n   72    EEPROM_WRITE_VAR(i,plaPreheatHotendTemp);\n   73    EEPROM_WRITE_VAR(i,plaPreheatHPBTemp);\n   74:   EEPROM_WRITE_VAR(i,plaPreheatFanSpeed);\n   75    EEPROM_WRITE_VAR(i,absPreheatHotendTemp);\n   76    EEPROM_WRITE_VAR(i,absPreheatHPBTemp);\n   77:   EEPROM_WRITE_VAR(i,absPreheatFanSpeed);\n   78    \n   79    EEPROM_WRITE_VAR(i,zprobe_zoffset);\n   ..\n  272          EEPROM_READ_VAR(i,add_homing);\n  273          #ifndef ULTIPANEL\n  274:         int plaPreheatHotendTemp, plaPreheatHPBTemp, plaPreheatFanSpeed;\n  275:         int absPreheatHotendTemp, absPreheatHPBTemp, absPreheatFanSpeed;\n  276  \n  277          #endif\n  278          EEPROM_READ_VAR(i,plaPreheatHotendTemp);\n  279          EEPROM_READ_VAR(i,plaPreheatHPBTemp);\n  280:         EEPROM_READ_VAR(i,plaPreheatFanSpeed);\n  281          EEPROM_READ_VAR(i,absPreheatHotendTemp);\n  282          EEPROM_READ_VAR(i,absPreheatHPBTemp);\n  283:         EEPROM_READ_VAR(i,absPreheatFanSpeed);\n  284          \n  285  \n\nE:\\Documents\\Simon\\Mes documents\\3dPrint\\Firmware\\PrusaFW\\Firmware\\dogm_lcd_implementation.h:\n  188  {\n  189  \n  190:  static unsigned char fan_rot = 0;\n  191   \n  192   u8g.setColorIndex(1);\t// black on white\n  193   \n  194:  // Symbols menu graphics, animated fan\n  195:  u8g.drawBitmapP(9,1,STATUS_SCREENBYTEWIDTH,STATUS_SCREENHEIGHT, (blink % 2) && fanSpeed ? status_screen0_bmp : status_screen1_bmp);\n  196   \n  197   #ifdef SDSUPPORT\n  ...\n  241    _draw_heater_status(81, -1);\n  242   \n  243:  // Fan\n  244   u8g.setFont(FONT_STATUSMENU);\n  245   u8g.setPrintPos(104,27);\n  246:  #if defined(FAN_PIN) && FAN_PIN > -1\n  247:  u8g.print(itostr3(int((fanSpeed*100)/256 + 1)));\n  248   u8g.print(\"%\");\n  249   #else\n\nE:\\Documents\\Simon\\Mes documents\\3dPrint\\Firmware\\PrusaFW\\Firmware\\language_all.cpp:\n  651  };\n  652  \n  653: const char MSG_FAN_SPEED_EN[] PROGMEM = \"Fan speed\";\n  654: const char MSG_FAN_SPEED_CZ[] PROGMEM = \"Rychlost vent.\";\n  655: const char MSG_FAN_SPEED_IT[] PROGMEM = \"Velocità ventola\";\n  656: const char MSG_FAN_SPEED_ES[] PROGMEM = \"Ventilador\";\n  657: const char MSG_FAN_SPEED_PL[] PROGMEM = \"Predkosc went.\";\n  658: const char * const MSG_FAN_SPEED_LANG_TABLE[LANG_NUM] PROGMEM = {\n  659: \tMSG_FAN_SPEED_EN,\n  660: \tMSG_FAN_SPEED_CZ,\n  661: \tMSG_FAN_SPEED_IT,\n  662: \tMSG_FAN_SPEED_ES,\n  663: \tMSG_FAN_SPEED_PL\n  664  };\n  665  \n\nE:\\Documents\\Simon\\Mes documents\\3dPrint\\Firmware\\PrusaFW\\Firmware\\language_all.h:\n  165  extern const char* const MSG_FACTOR_LANG_TABLE[1];\n  166  #define MSG_FACTOR LANG_TABLE_SELECT_EXPLICIT(MSG_FACTOR_LANG_TABLE, 0)\n  167: extern const char* const MSG_FAN_SPEED_LANG_TABLE[LANG_NUM];\n  168: #define MSG_FAN_SPEED LANG_TABLE_SELECT(MSG_FAN_SPEED_LANG_TABLE)\n  169  extern const char* const MSG_FILAMENTCHANGE_LANG_TABLE[LANG_NUM];\n  170  #define MSG_FILAMENTCHANGE LANG_TABLE_SELECT(MSG_FILAMENTCHANGE_LANG_TABLE)\n\nE:\\Documents\\Simon\\Mes documents\\3dPrint\\Firmware\\PrusaFW\\Firmware\\language_cz.h:\n   27  #define MSG_NOZZLE2                         \"Tryska3\"\n   28  #define MSG_BED                             \"Bed\"\n   29: #define MSG_FAN_SPEED                       \"Rychlost vent.\"\n   30  #define MSG_FLOW                            \"Prutok\"\n   31  #define MSG_FLOW0                           \"Prutok 0\"\n\nE:\\Documents\\Simon\\Mes documents\\3dPrint\\Firmware\\PrusaFW\\Firmware\\language_en.h:\n   28  #define MSG_NOZZLE2                         \"Nozzle3\"\n   29  #define MSG_BED                             \"Bed\"\n   30: #define MSG_FAN_SPEED                       \"Fan speed\"\n   31  #define MSG_FLOW                            \"Flow\"\n   32  #define MSG_FLOW0                           \"Flow 0\"\n\nE:\\Documents\\Simon\\Mes documents\\3dPrint\\Firmware\\PrusaFW\\Firmware\\language_es.h:\n   22  #define MSG_NOZZLE                          \"Fusor\"\n   23  #define MSG_BED                             \"Base\"\n   24: #define MSG_FAN_SPEED                       \"Ventilador\"\n   25  #define MSG_FLOW                            \"Flujo\"\n   26  #define MSG_TEMPERATURE                     \"Temperatura\"\n\nE:\\Documents\\Simon\\Mes documents\\3dPrint\\Firmware\\PrusaFW\\Firmware\\language_it.h:\n   23  #define MSG_NOZZLE2                         \"Nozzle3\"\n   24  #define MSG_BED                             \"Letto\"\n   25: #define MSG_FAN_SPEED                       \"Velocità ventola\"\n   26  #define MSG_FLOW                            \"Flusso\"\n   27  #define MSG_TEMPERATURE                     \"Temperatura\"\n\nE:\\Documents\\Simon\\Mes documents\\3dPrint\\Firmware\\PrusaFW\\Firmware\\language_pl.h:\n   22  #define MSG_NOZZLE                          \"Dysza\"\n   23  #define MSG_BED                             \"Stolik\"\n   24: #define MSG_FAN_SPEED                       \"Predkosc went.\"\n   25  #define MSG_FLOW                            \"Przeplyw\"\n   26  #define MSG_TEMPERATURE                     \"Temperatura\"\n\nE:\\Documents\\Simon\\Mes documents\\3dPrint\\Firmware\\PrusaFW\\Firmware\\Marlin.h:\n  231  void refresh_cmd_timeout(void);\n  232  \n  233: #ifdef FAST_PWM_FAN\n  234  void setPwmFrequency(uint8_t pin, int val);\n  235  #endif\n  ...\n  255  extern bool axis_known_position[3];\n  256  extern float zprobe_zoffset;\n  257: extern int fanSpeed;\n  258  extern void homeaxis(int axis);\n  259  \n  260  \n  261: #ifdef FAN_SOFT_PWM\n  262: extern unsigned char fanSpeedSoftPwm;\n  263  #endif\n  264  \n\nE:\\Documents\\Simon\\Mes documents\\3dPrint\\Firmware\\PrusaFW\\Firmware\\Marlin_main.cpp:\n  152  // M104 - Set extruder target temp\n  153  // M105 - Read current temp\n  154: // M106 - Fan on\n  155: // M107 - Fan off\n  156  // M109 - Sxxx Wait for extruder current temp to reach target temp. Waits only when heating\n  157  //        Rxxx Wait for extruder current temp to reach target temp. Waits when heating and cooling\n  ...\n  304  \n  305  uint8_t active_extruder = 0;\n  306: int fanSpeed=0;\n  307  \n  308  #ifdef FWRETRACT\n  ...\n  992    \n  993  \n  994:   #if defined(CONTROLLERFAN_PIN) && CONTROLLERFAN_PIN > -1\n  995:     SET_OUTPUT(CONTROLLERFAN_PIN); //Set pin used for driver cooling fan\n  996    #endif\n  997  \n  ...\n 2871            }\n 2872          }\n 2873:       #if defined(FAN_PIN) && FAN_PIN > -1\n 2874:         if (pin_number == FAN_PIN)\n 2875:           fanSpeed = pin_status;\n 2876        #endif\n 2877          if (pin_number > -1)\n ....\n 3514          break;\n 3515  \n 3516:     #if defined(FAN_PIN) && FAN_PIN > -1\n 3517:       case 106: //M106 Fan On\n 3518          if (code_seen('S')){\n 3519:            fanSpeed=constrain(code_value(),0,255);\n 3520          }\n 3521          else {\n 3522:           fanSpeed=255;\n 3523          }\n 3524          break;\n 3525:       case 107: //M107 Fan Off\n 3526:         fanSpeed = 0;\n 3527          break;\n 3528:     #endif //FAN_PIN\n 3529  \n 3530      #if defined(PS_ON_PIN) && PS_ON_PIN > -1\n ....\n 3556          disable_e2();\n 3557          finishAndDisableSteppers();\n 3558:         fanSpeed = 0;\n 3559          delay(1000); // Wait a little before to switch off\n 3560        #if defined(SUICIDE_PIN) && SUICIDE_PIN > -1\n ....\n 4831  }\n 4832  \n 4833: #if defined(CONTROLLERFAN_PIN) && CONTROLLERFAN_PIN > -1\n 4834  \n 4835: #if defined(FAN_PIN)\n 4836:   #if CONTROLLERFAN_PIN == FAN_PIN\n 4837:     #error \"You cannot set CONTROLLERFAN_PIN equal to FAN_PIN\"\n 4838    #endif\n 4839  #endif\n ....\n 4842  unsigned long lastMotorCheck = 0;\n 4843  \n 4844: void controllerFan()\n 4845  {\n 4846    if ((millis() - lastMotorCheck) >= 2500) //Not a time critical function, so we only check every 2500ms\n ....\n 4860         || !READ(E0_ENABLE_PIN)) //If any of the drivers are enabled...\n 4861      {\n 4862:       lastMotor = millis(); //... set time to NOW so the fan will turn on\n 4863      }\n 4864  \n 4865:     if ((millis() - lastMotor) >= (CONTROLLERFAN_SECS*1000UL) || lastMotor == 0) //If the last time any driver was enabled, is longer since than CONTROLLERSEC...\n 4866      {\n 4867:         digitalWrite(CONTROLLERFAN_PIN, 0);\n 4868:         analogWrite(CONTROLLERFAN_PIN, 0);\n 4869      }\n 4870      else\n 4871      {\n 4872:         // allows digital or PWM fan output to be used (see M42 handling)\n 4873:         digitalWrite(CONTROLLERFAN_PIN, CONTROLLERFAN_SPEED);\n 4874:         analogWrite(CONTROLLERFAN_PIN, CONTROLLERFAN_SPEED);\n 4875      }\n 4876    }\n ....\n 4970    #endif\n 4971      \n 4972:   #if defined(CONTROLLERFAN_PIN) && CONTROLLERFAN_PIN > -1\n 4973:     controllerFan(); //Check if fan should be turned on to cool stepper drivers down\n 4974    #endif\n 4975    #ifdef EXTRUDER_RUNOUT_PREVENT\n ....\n 5048  bool IsStopped() { return Stopped; };\n 5049  \n 5050: #ifdef FAST_PWM_FAN\n 5051  void setPwmFrequency(uint8_t pin, int val)\n 5052  {\n ....\n 5116    }\n 5117  }\n 5118: #endif //FAST_PWM_FAN\n 5119  \n 5120  bool setTargetedHotend(int code){\n\nE:\\Documents\\Simon\\Mes documents\\3dPrint\\Firmware\\PrusaFW\\Firmware\\pins.h:\n   72    #define HEATER_BED_PIN 8\n   73    \n   74:   #define FAN_PIN     57 //Aux1  // 9\n   75    \n   76    #define PS_ON_PIN 12\n   ..\n  101    #define LCD_PINS_D6 27\n  102    #define LCD_PINS_D7 29\n  103:   #define FAN_1_PIN -1 //6\n  104  \n  105    #define KILL_PIN           41 //80 with Smart Controller LCD\n  ...\n  173  \n  174  #define SENSITIVE_PINS {0, 1, X_STEP_PIN, X_DIR_PIN, X_ENABLE_PIN, X_MIN_PIN, X_MAX_PIN, Y_STEP_PIN, Y_DIR_PIN, Y_ENABLE_PIN, Y_MIN_PIN, Y_MAX_PIN, Z_STEP_PIN, Z_DIR_PIN, Z_ENABLE_PIN, Z_MIN_PIN, Z_MAX_PIN, PS_ON_PIN, \\\n  175:                         HEATER_BED_PIN, FAN_PIN,                  \\\n  176                          _E0_PINS _E1_PINS _E2_PINS             \\\n  177                          analogInputToDigitalPin(TEMP_0_PIN), analogInputToDigitalPin(TEMP_1_PIN), analogInputToDigitalPin(TEMP_2_PIN), analogInputToDigitalPin(TEMP_BED_PIN) }\n\nE:\\Documents\\Simon\\Mes documents\\3dPrint\\Firmware\\PrusaFW\\Firmware\\planner.cpp:\n  408    unsigned char z_active = 0;\n  409    unsigned char e_active = 0;\n  410:   unsigned char tail_fan_speed = fanSpeed;\n  411    block_t *block;\n  412  \n  ...\n  414    {\n  415      uint8_t block_index = block_buffer_tail;\n  416:     tail_fan_speed = block_buffer[block_index].fan_speed;\n  417      while(block_index != block_buffer_head)\n  418      {\n  ...\n  434      disable_e2(); \n  435    }\n  436: #if defined(FAN_PIN) && FAN_PIN > -1\n  437:   #ifdef FAN_KICKSTART_TIME\n  438:     static unsigned long fan_kick_end;\n  439:     if (tail_fan_speed) {\n  440:       if (fan_kick_end == 0) {\n  441:         // Just starting up fan - run at full power.\n  442:         fan_kick_end = millis() + FAN_KICKSTART_TIME;\n  443:         tail_fan_speed = 255;\n  444:       } else if (fan_kick_end > millis())\n  445:         // Fan still spinning up.\n  446:         tail_fan_speed = 255;\n  447      } else {\n  448:       fan_kick_end = 0;\n  449      }\n  450:   #endif//FAN_KICKSTART_TIME\n  451:   #ifdef FAN_SOFT_PWM\n  452:   fanSpeedSoftPwm = tail_fan_speed;\n  453    #else\n  454:   analogWrite(FAN_PIN,tail_fan_speed);\n  455:   #endif//!FAN_SOFT_PWM\n  456: #endif//FAN_PIN > -1\n  457  #ifdef AUTOTEMP\n  458    getHighESpeed();\n  ...\n  649    }\n  650  \n  651:   block->fan_speed = fanSpeed;\n  652  \n  653    // Compute direction bits for this block \n\nE:\\Documents\\Simon\\Mes documents\\3dPrint\\Firmware\\PrusaFW\\Firmware\\planner.h:\n   87    unsigned long final_rate;                          // The minimal rate at exit\n   88    unsigned long acceleration_st;                     // acceleration steps/sec^2\n   89:   unsigned long fan_speed;\n   90    volatile char busy;\n   91  } block_t;\n\nE:\\Documents\\Simon\\Mes documents\\3dPrint\\Firmware\\PrusaFW\\Firmware\\temperature.cpp:\n   67  #endif //PIDTEMPBED\n   68    \n   69: #ifdef FAN_SOFT_PWM\n   70:   unsigned char fanSpeedSoftPwm;\n   71  #endif\n   72  \n   ..\n  116    static unsigned char soft_pwm[EXTRUDERS];\n  117  \n  118: #ifdef FAN_SOFT_PWM\n  119:   static unsigned char soft_pwm_fan;\n  120  #endif\n  121: #if (defined(EXTRUDER_0_AUTO_FAN_PIN) && EXTRUDER_0_AUTO_FAN_PIN > -1) || \\\n  122:     (defined(EXTRUDER_1_AUTO_FAN_PIN) && EXTRUDER_1_AUTO_FAN_PIN > -1) || \\\n  123:     (defined(EXTRUDER_2_AUTO_FAN_PIN) && EXTRUDER_2_AUTO_FAN_PIN > -1)\n  124:   static unsigned long extruder_autofan_last_check;\n  125  #endif  \n  126  \n  ...\n  192    float max = 0, min = 10000;\n  193  \n  194: #if (defined(EXTRUDER_0_AUTO_FAN_PIN) && EXTRUDER_0_AUTO_FAN_PIN > -1) || \\\n  195:     (defined(EXTRUDER_1_AUTO_FAN_PIN) && EXTRUDER_1_AUTO_FAN_PIN > -1) || \\\n  196:     (defined(EXTRUDER_2_AUTO_FAN_PIN) && EXTRUDER_2_AUTO_FAN_PIN > -1)\n  197:   unsigned long extruder_autofan_last_check = millis();\n  198  #endif\n  199  \n  ...\n  235        min=min(min,input);\n  236  \n  237:       #if (defined(EXTRUDER_0_AUTO_FAN_PIN) && EXTRUDER_0_AUTO_FAN_PIN > -1) || \\\n  238:           (defined(EXTRUDER_1_AUTO_FAN_PIN) && EXTRUDER_1_AUTO_FAN_PIN > -1) || \\\n  239:           (defined(EXTRUDER_2_AUTO_FAN_PIN) && EXTRUDER_2_AUTO_FAN_PIN > -1)\n  240:       if(millis() - extruder_autofan_last_check > 2500) {\n  241:         checkExtruderAutoFans();\n  242:         extruder_autofan_last_check = millis();\n  243        }\n  244        #endif\n  ...\n  360  }\n  361  \n  362: #if (defined(EXTRUDER_0_AUTO_FAN_PIN) && EXTRUDER_0_AUTO_FAN_PIN > -1) || \\\n  363:     (defined(EXTRUDER_1_AUTO_FAN_PIN) && EXTRUDER_1_AUTO_FAN_PIN > -1) || \\\n  364:     (defined(EXTRUDER_2_AUTO_FAN_PIN) && EXTRUDER_2_AUTO_FAN_PIN > -1)\n  365  \n  366:   #if defined(FAN_PIN) && FAN_PIN > -1\n  367:     #if EXTRUDER_0_AUTO_FAN_PIN == FAN_PIN \n  368:        #error \"You cannot set EXTRUDER_0_AUTO_FAN_PIN equal to FAN_PIN\"\n  369      #endif\n  370:     #if EXTRUDER_1_AUTO_FAN_PIN == FAN_PIN \n  371:        #error \"You cannot set EXTRUDER_1_AUTO_FAN_PIN equal to FAN_PIN\"\n  372      #endif\n  373:     #if EXTRUDER_2_AUTO_FAN_PIN == FAN_PIN \n  374:        #error \"You cannot set EXTRUDER_2_AUTO_FAN_PIN equal to FAN_PIN\"\n  375      #endif\n  376    #endif \n  377  \n  378: void setExtruderAutoFanState(int pin, bool state)\n  379  {\n  380:   unsigned char newFanSpeed = (state != 0) ? EXTRUDER_AUTO_FAN_SPEED : 0;\n  381:   // this idiom allows both digital and PWM fan outputs (see M42 handling).\n  382    pinMode(pin, OUTPUT);\n  383:   digitalWrite(pin, newFanSpeed);\n  384:   analogWrite(pin, newFanSpeed);\n  385  }\n  386  \n  387: void checkExtruderAutoFans()\n  388  {\n  389:   uint8_t fanState = 0;\n  390  \n  391:   // which fan pins need to be turned on?      \n  392:   #if defined(EXTRUDER_0_AUTO_FAN_PIN) && EXTRUDER_0_AUTO_FAN_PIN > -1\n  393:     if (current_temperature[0] > EXTRUDER_AUTO_FAN_TEMPERATURE) \n  394:       fanState |= 1;\n  395    #endif\n  396:   #if defined(EXTRUDER_1_AUTO_FAN_PIN) && EXTRUDER_1_AUTO_FAN_PIN > -1\n  397:     if (current_temperature[1] > EXTRUDER_AUTO_FAN_TEMPERATURE) \n  398      {\n  399:       if (EXTRUDER_1_AUTO_FAN_PIN == EXTRUDER_0_AUTO_FAN_PIN) \n  400:         fanState |= 1;\n  401        else\n  402:         fanState |= 2;\n  403      }\n  404    #endif\n  405:   #if defined(EXTRUDER_2_AUTO_FAN_PIN) && EXTRUDER_2_AUTO_FAN_PIN > -1\n  406:     if (current_temperature[2] > EXTRUDER_AUTO_FAN_TEMPERATURE) \n  407      {\n  408:       if (EXTRUDER_2_AUTO_FAN_PIN == EXTRUDER_0_AUTO_FAN_PIN) \n  409:         fanState |= 1;\n  410:       else if (EXTRUDER_2_AUTO_FAN_PIN == EXTRUDER_1_AUTO_FAN_PIN) \n  411:         fanState |= 2;\n  412        else\n  413:         fanState |= 4;\n  414      }\n  415    #endif\n  416    \n  417:   // update extruder auto fan states\n  418:   #if defined(EXTRUDER_0_AUTO_FAN_PIN) && EXTRUDER_0_AUTO_FAN_PIN > -1\n  419:     setExtruderAutoFanState(EXTRUDER_0_AUTO_FAN_PIN, (fanState & 1) != 0);\n  420    #endif \n  421:   #if defined(EXTRUDER_1_AUTO_FAN_PIN) && EXTRUDER_1_AUTO_FAN_PIN > -1\n  422:     if (EXTRUDER_1_AUTO_FAN_PIN != EXTRUDER_0_AUTO_FAN_PIN) \n  423:       setExtruderAutoFanState(EXTRUDER_1_AUTO_FAN_PIN, (fanState & 2) != 0);\n  424    #endif \n  425:   #if defined(EXTRUDER_2_AUTO_FAN_PIN) && EXTRUDER_2_AUTO_FAN_PIN > -1\n  426:     if (EXTRUDER_2_AUTO_FAN_PIN != EXTRUDER_0_AUTO_FAN_PIN \n  427:         && EXTRUDER_2_AUTO_FAN_PIN != EXTRUDER_1_AUTO_FAN_PIN)\n  428:       setExtruderAutoFanState(EXTRUDER_2_AUTO_FAN_PIN, (fanState & 4) != 0);\n  429    #endif \n  430  }\n  431  \n  432: #endif // any extruder auto fan pins set\n  433  \n  434  void manage_heater()\n  ...\n  552    } // End extruder for loop\n  553  \n  554:   #if (defined(EXTRUDER_0_AUTO_FAN_PIN) && EXTRUDER_0_AUTO_FAN_PIN > -1) || \\\n  555:       (defined(EXTRUDER_1_AUTO_FAN_PIN) && EXTRUDER_1_AUTO_FAN_PIN > -1) || \\\n  556:       (defined(EXTRUDER_2_AUTO_FAN_PIN) && EXTRUDER_2_AUTO_FAN_PIN > -1)\n  557:   if(millis() - extruder_autofan_last_check > 2500)  // only need to check fan state very infrequently\n  558    {\n  559:     checkExtruderAutoFans();\n  560:     extruder_autofan_last_check = millis();\n  561    }  \n  562    #endif       \n  ...\n  861      SET_OUTPUT(HEATER_BED_PIN);\n  862    #endif  \n  863:   #if defined(FAN_PIN) && (FAN_PIN > -1) \n  864:     SET_OUTPUT(FAN_PIN);\n  865:     #ifdef FAST_PWM_FAN\n  866:     setPwmFrequency(FAN_PIN, 1); // No prescaling. Pwm frequency = F_CPU/256/8\n  867      #endif\n  868:     #ifdef FAN_SOFT_PWM\n  869:     soft_pwm_fan = fanSpeedSoftPwm / 2;\n  870      #endif\n  871    #endif  \n  ...\n 1206      \n 1207    #endif\n 1208:     SET_OUTPUT(EXTRUDER_0_AUTO_FAN_PIN);\n 1209:     SET_OUTPUT(FAN_PIN);\n 1210      SET_OUTPUT(BEEPER);\n 1211:     WRITE(FAN_PIN, 1);\n 1212:     WRITE(EXTRUDER_0_AUTO_FAN_PIN, 1);\n 1213      WRITE(BEEPER, 1);\n 1214:     fanSpeed=255;\n 1215  }\n 1216  \n ....\n 1381      if(soft_pwm_b > 0) WRITE(HEATER_BED_PIN,1); else WRITE(HEATER_BED_PIN,0);\n 1382  #endif\n 1383: #ifdef FAN_SOFT_PWM\n 1384:     soft_pwm_fan = fanSpeedSoftPwm / 2;\n 1385:     if(soft_pwm_fan > 0) WRITE(FAN_PIN,1); else WRITE(FAN_PIN,0);\n 1386  #endif\n 1387    }\n ....\n 1401    if(soft_pwm_b < pwm_count) WRITE(HEATER_BED_PIN,0);\n 1402  #endif\n 1403: #ifdef FAN_SOFT_PWM\n 1404:   if(soft_pwm_fan < pwm_count) WRITE(FAN_PIN,0);\n 1405  #endif\n 1406    \n ....\n 1588  #endif\n 1589    \n 1590: #ifdef FAN_SOFT_PWM\n 1591    if (pwm_count == 0){\n 1592:     soft_pwm_fan = fanSpeedSoftPwm / 2;\n 1593:     if (soft_pwm_fan > 0) WRITE(FAN_PIN,1); else WRITE(FAN_PIN,0);\n 1594    }\n 1595:   if (soft_pwm_fan < pwm_count) WRITE(FAN_PIN,0);\n 1596  #endif\n 1597    \n\nE:\\Documents\\Simon\\Mes documents\\3dPrint\\Firmware\\PrusaFW\\Firmware\\temperature.h:\n   54  #endif\n   55  \n   56: #if defined(CONTROLLERFAN_PIN) && CONTROLLERFAN_PIN > -1\n   57    extern unsigned char soft_pwm_bed;\n   58  #endif\n   ..\n  203  void PID_autotune(float temp, int extruder, int ncycles);\n  204  \n  205: void setExtruderAutoFanState(int pin, bool state);\n  206: void checkExtruderAutoFans();\n  207  \n  208  #endif\n\nE:\\Documents\\Simon\\Mes documents\\3dPrint\\Firmware\\PrusaFW\\Firmware\\ultralcd.cpp:\n  686    setTargetHotend0(PLA_PREHEAT_HOTEND_TEMP);\n  687    setTargetBed(PLA_PREHEAT_HPB_TEMP);\n  688:   fanSpeed = 0;\n  689    lcd_return_to_status();\n  690    setWatch(); // heater sanity check timer\n  ...\n  695    setTargetHotend0(ABS_PREHEAT_HOTEND_TEMP);\n  696    setTargetBed(ABS_PREHEAT_HPB_TEMP);\n  697:   fanSpeed = 0;\n  698    lcd_return_to_status();\n  699    setWatch(); // heater sanity check timer\n  ...\n  704    setTargetHotend0(PP_PREHEAT_HOTEND_TEMP);\n  705    setTargetBed(PP_PREHEAT_HPB_TEMP);\n  706:   fanSpeed = 0;\n  707    lcd_return_to_status();\n  708    setWatch(); // heater sanity check timer\n  ...\n  713    setTargetHotend0(PET_PREHEAT_HOTEND_TEMP);\n  714    setTargetBed(PET_PREHEAT_HPB_TEMP);\n  715:   fanSpeed = 0;\n  716    lcd_return_to_status();\n  717    setWatch(); // heater sanity check timer\n  ...\n  722    setTargetHotend0(HIPS_PREHEAT_HOTEND_TEMP);\n  723    setTargetBed(HIPS_PREHEAT_HPB_TEMP);\n  724:   fanSpeed = 0;\n  725    lcd_return_to_status();\n  726    setWatch(); // heater sanity check timer\n  ...\n  731    setTargetHotend0(FLEX_PREHEAT_HOTEND_TEMP);\n  732    setTargetBed(FLEX_PREHEAT_HPB_TEMP);\n  733:   fanSpeed = 0;\n  734    lcd_return_to_status();\n  735    setWatch(); // heater sanity check timer\n  ...\n  743    setTargetHotend2(0);\n  744    setTargetBed(0);\n  745:   fanSpeed = 0;\n  746    lcd_return_to_status();\n  747  }\n  ...\n 2561    MENU_ITEM_EDIT(int3, MSG_BED, &target_temperature_bed, 0, BED_MAXTEMP - 10);//4\n 2562  \n 2563:   MENU_ITEM_EDIT(int3, MSG_FAN_SPEED, &fanSpeed, 0, 255);//5\n 2564    MENU_ITEM_EDIT(int3, MSG_FLOW, &extrudemultiply, 10, 999);//6\n 2565  #ifdef FILAMENTCHANGEENABLE\n ....\n 2606    MENU_ITEM_EDIT(int3, MSG_BED, &target_temperature_bed, 0, BED_MAXTEMP - 3);\n 2607  #endif\n 2608:   MENU_ITEM_EDIT(int3, MSG_FAN_SPEED, &fanSpeed, 0, 255);\n 2609  #if defined AUTOTEMP && (TEMP_SENSOR_0 != 0)\n 2610    MENU_ITEM_EDIT(bool, MSG_AUTOTEMP, &autotemp_enabled);\n ....\n 3362  \n 3363  #ifdef DOGLCD        // Changes due to different driver architecture of the DOGM display\n 3364: \t  blink++;     // Variable for fan animation and alive dot\n 3365  \t  u8g.firstPage();\n 3366  \t  do\n\nE:\\Documents\\Simon\\Mes documents\\3dPrint\\Firmware\\PrusaFW\\Firmware\\ultralcd.h:\n   60  #endif\n   61  \n   62:   static unsigned char blink = 0; // Variable for visualization of fan rotation in GLCD\n   63  \n   64    #define LCD_MESSAGEPGM(x) lcd_setstatuspgm(PSTR(x))\n\nE:\\Documents\\Simon\\Mes documents\\3dPrint\\Firmware\\PrusaFW\\Firmware\\ultralcd_implementation_hitachi_HD44780.h:\n 1233      if (target_temperature_bed > 0) leds |= LED_A;\n 1234      if (target_temperature[0] > 0) leds |= LED_B;\n 1235:     if (fanSpeed) leds |= LED_C;\n 1236      #if EXTRUDERS > 1  \n 1237        if (target_temperature[1] > 0) leds |= LED_C;\n\nE:\\Documents\\Simon\\Mes documents\\3dPrint\\Firmware\\PrusaFW\\Firmware\\variants\\1_75_ZRIB_CONFIG.h:\n   87  #define EXTRUDE_MINTEMP 160\n   88  \n   89: // Extruder cooling fans\n   90: #define EXTRUDER_0_AUTO_FAN_PIN   6\n   91: #define EXTRUDER_1_AUTO_FAN_PIN   -1\n   92: #define EXTRUDER_2_AUTO_FAN_PIN   -1\n   93: #define EXTRUDER_AUTO_FAN_TEMPERATURE 50\n   94: #define EXTRUDER_AUTO_FAN_SPEED   255  // == full speed\n   95  \n   96  \n   ..\n  247  #define PLA_PREHEAT_HOTEND_TEMP 215\n  248  #define PLA_PREHEAT_HPB_TEMP 55\n  249: #define PLA_PREHEAT_FAN_SPEED 0  \n  250  \n  251  #define ABS_PREHEAT_HOTEND_TEMP 255\n  252  #define ABS_PREHEAT_HPB_TEMP 100\n  253: #define ABS_PREHEAT_FAN_SPEED 0 \n  254  \n  255  #define HIPS_PREHEAT_HOTEND_TEMP 220\n  256  #define HIPS_PREHEAT_HPB_TEMP 100\n  257: #define HIPS_PREHEAT_FAN_SPEED 0 \n  258  \n  259  #define PP_PREHEAT_HOTEND_TEMP 254\n  260  #define PP_PREHEAT_HPB_TEMP 100\n  261: #define PP_PREHEAT_FAN_SPEED 0 \n  262  \n  263  #define PET_PREHEAT_HOTEND_TEMP 240\n  264  #define PET_PREHEAT_HPB_TEMP 90\n  265: #define PET_PREHEAT_FAN_SPEED 0 \n  266  \n  267  #define FLEX_PREHEAT_HOTEND_TEMP 230\n  268  #define FLEX_PREHEAT_HPB_TEMP 50\n  269: #define FLEX_PREHEAT_FAN_SPEED 0 \n  270  \n  271  /*------------------------------------\n\nE:\\Documents\\Simon\\Mes documents\\3dPrint\\Firmware\\PrusaFW\\Firmware\\variants\\1_75mm_MK2-RAMBo10a-E3Dv6full.h:\n   87  #define EXTRUDE_MINTEMP 130\n   88  \n   89: // Extruder cooling fans\n   90: #define EXTRUDER_0_AUTO_FAN_PIN   8\n   91: #define EXTRUDER_1_AUTO_FAN_PIN   -1\n   92: #define EXTRUDER_2_AUTO_FAN_PIN   -1\n   93: #define EXTRUDER_AUTO_FAN_TEMPERATURE 50\n   94: #define EXTRUDER_AUTO_FAN_SPEED   255  // == full speed\n   95  \n   96  \n   ..\n  247  #define PLA_PREHEAT_HOTEND_TEMP 215\n  248  #define PLA_PREHEAT_HPB_TEMP 55\n  249: #define PLA_PREHEAT_FAN_SPEED 0  \n  250  \n  251  #define ABS_PREHEAT_HOTEND_TEMP 255\n  252  #define ABS_PREHEAT_HPB_TEMP 100\n  253: #define ABS_PREHEAT_FAN_SPEED 0 \n  254  \n  255  #define HIPS_PREHEAT_HOTEND_TEMP 220\n  256  #define HIPS_PREHEAT_HPB_TEMP 100\n  257: #define HIPS_PREHEAT_FAN_SPEED 0 \n  258  \n  259  #define PP_PREHEAT_HOTEND_TEMP 254\n  260  #define PP_PREHEAT_HPB_TEMP 100\n  261: #define PP_PREHEAT_FAN_SPEED 0 \n  262  \n  263  #define PET_PREHEAT_HOTEND_TEMP 240\n  264  #define PET_PREHEAT_HPB_TEMP 90\n  265: #define PET_PREHEAT_FAN_SPEED 0 \n  266  \n  267  #define FLEX_PREHEAT_HOTEND_TEMP 230\n  268  #define FLEX_PREHEAT_HPB_TEMP 50\n  269: #define FLEX_PREHEAT_FAN_SPEED 0 \n  270  \n  271  /*------------------------------------\n\nE:\\Documents\\Simon\\Mes documents\\3dPrint\\Firmware\\PrusaFW\\Firmware\\variants\\1_75mm_MK2-RAMBo13a-E3Dv6full.h:\n   87  #define EXTRUDE_MINTEMP 130\n   88  \n   89: // Extruder cooling fans\n   90: #define EXTRUDER_0_AUTO_FAN_PIN   8\n   91: #define EXTRUDER_1_AUTO_FAN_PIN   -1\n   92: #define EXTRUDER_2_AUTO_FAN_PIN   -1\n   93: #define EXTRUDER_AUTO_FAN_TEMPERATURE 50\n   94: #define EXTRUDER_AUTO_FAN_SPEED   255  // == full speed\n   95  \n   96  \n   ..\n  247  #define PLA_PREHEAT_HOTEND_TEMP 215\n  248  #define PLA_PREHEAT_HPB_TEMP 55\n  249: #define PLA_PREHEAT_FAN_SPEED 0  \n  250  \n  251  #define ABS_PREHEAT_HOTEND_TEMP 255\n  252  #define ABS_PREHEAT_HPB_TEMP 100\n  253: #define ABS_PREHEAT_FAN_SPEED 0 \n  254  \n  255  #define HIPS_PREHEAT_HOTEND_TEMP 220\n  256  #define HIPS_PREHEAT_HPB_TEMP 100\n  257: #define HIPS_PREHEAT_FAN_SPEED 0 \n  258  \n  259  #define PP_PREHEAT_HOTEND_TEMP 254\n  260  #define PP_PREHEAT_HPB_TEMP 100\n  261: #define PP_PREHEAT_FAN_SPEED 0 \n  262  \n  263  #define PET_PREHEAT_HOTEND_TEMP 240\n  264  #define PET_PREHEAT_HPB_TEMP 90\n  265: #define PET_PREHEAT_FAN_SPEED 0 \n  266  \n  267  #define FLEX_PREHEAT_HOTEND_TEMP 230\n  268  #define FLEX_PREHEAT_HPB_TEMP 50\n  269: #define FLEX_PREHEAT_FAN_SPEED 0 \n  270  \n  271  /*------------------------------------\n\nE:\\Documents\\Simon\\Mes documents\\3dPrint\\Firmware\\PrusaFW\\Firmware\\variants\\1_75mm_RAMPS1_4_ANETA8.h:\n   83  #define EXTRUDE_MINTEMP 150\n   84  \n   85: // Extruder cooling fans\n   86: #define EXTRUDER_0_AUTO_FAN_PIN   -1\n   87: #define EXTRUDER_1_AUTO_FAN_PIN   -1\n   88: #define EXTRUDER_2_AUTO_FAN_PIN   -1\n   89: #define EXTRUDER_AUTO_FAN_TEMPERATURE 50\n   90: #define EXTRUDER_AUTO_FAN_SPEED   255  // == full speed\n   91  \n   92  \n   ..\n  162  #define PLA_PREHEAT_HOTEND_TEMP 210\n  163  #define PLA_PREHEAT_HPB_TEMP 50\n  164: #define PLA_PREHEAT_FAN_SPEED 0  \n  165  \n  166  #define ABS_PREHEAT_HOTEND_TEMP 255\n  167  #define ABS_PREHEAT_HPB_TEMP 100\n  168: #define ABS_PREHEAT_FAN_SPEED 0 \n  169  \n  170  #define HIPS_PREHEAT_HOTEND_TEMP 220\n  171  #define HIPS_PREHEAT_HPB_TEMP 100\n  172: #define HIPS_PREHEAT_FAN_SPEED 0 \n  173  \n  174  #define PP_PREHEAT_HOTEND_TEMP 254\n  175  #define PP_PREHEAT_HPB_TEMP 100\n  176: #define PP_PREHEAT_FAN_SPEED 0 \n  177  \n  178  #define PET_PREHEAT_HOTEND_TEMP 240\n  179  #define PET_PREHEAT_HPB_TEMP 90\n  180: #define PET_PREHEAT_FAN_SPEED 0 \n  181  \n  182  #define FLEX_PREHEAT_HOTEND_TEMP 230\n  183  #define FLEX_PREHEAT_HPB_TEMP 50\n  184: #define FLEX_PREHEAT_FAN_SPEED 0 \n  185  \n  186  // This sets the max power delivered to the bed, and replaces the HEATER_BED_DUTY_CYCLE_DIVIDER option.\n\n393 matches across 29 files\n",
			"settings":
			{
				"buffer_size": 180240,
				"line_ending": "Windows",
				"name": "Find Results",
				"scratch": true
			}
		},
		{
			"file": "Configuration.h",
			"settings":
			{
				"buffer_size": 30077,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			}
		},
		{
			"file": "ultralcd.cpp",
			"settings":
			{
				"buffer_size": 101440,
				"line_ending": "Windows"
			}
		},
		{
			"file": "Marlin_main.cpp",
			"settings":
			{
				"buffer_size": 182943,
				"line_ending": "Windows"
			}
		},
		{
			"contents": "#ifndef CONFIGURATION_PRUSA_H\n#define CONFIGURATION_PRUSA_H\n\n/*------------------------------------\nGENERAL SETTINGS\n*------------------------------------*/\n\n// Printer revision\n#define FILAMENT_SIZE \"1_75mm_MK2\"\n#define NOZZLE_TYPE \"E3Dv6full\"\n\n// Developer flag\n#define DEVELOPER\n\n// Printer name\n#define CUSTOM_MENDEL_NAME \"Prusa i3 MK2\"\n\n// Electronics\n#define MOTHERBOARD BOARD_RAMBO_MINI_1_3\n\n\n/*------------------------------------\nAXIS SETTINGS\n*------------------------------------*/\n\n// Steps per unit {X,Y,Z,E}\n#define DEFAULT_AXIS_STEPS_PER_UNIT   {100,100,402.5,250}\n\n// Endstop inverting\nconst bool X_MIN_ENDSTOP_INVERTING = true; // set to true to invert the logic of the endstop.\nconst bool Y_MIN_ENDSTOP_INVERTING = true; // set to true to invert the logic of the endstop.\nconst bool Z_MIN_ENDSTOP_INVERTING = true; // set to true to invert the logic of the endstop.\n\n// Home position\n#define MANUAL_X_HOME_POS -10\n#define MANUAL_Y_HOME_POS -2.2\n#define MANUAL_Z_HOME_POS 0.2\n\n// Travel limits after homing\n#define X_MAX_POS 200\n#define X_MIN_POS -32\n#define Y_MAX_POS 200\n#define Y_MIN_POS -12\n#define Z_MAX_POS 220\n#define Z_MIN_POS 0.25\n\n// Canceled home position\n#define X_CANCEL_POS 50\n#define Y_CANCEL_POS 190\n\n#define NUM_AXIS 4 // The axis order in all axis related arrays is X, Y, Z, E\n#define HOMING_FEEDRATE {3000, 3000, 800, 0}  // set the homing speeds (mm/min)\n\n#define DEFAULT_MAX_FEEDRATE          {500, 500, 12, 25}    // (mm/sec)\n#define DEFAULT_MAX_ACCELERATION      {4000,4000,300,5000}    // X, Y, Z, E maximum start speed for accelerated moves. E default values are good for Skeinforge 40+, for older versions raise them a lot.\n\n#define DEFAULT_ACCELERATION          1500    // X, Y, Z and E max acceleration in mm/s^2 for printing moves\n#define DEFAULT_RETRACT_ACCELERATION  1500   // X, Y, Z and E max acceleration in mm/s^2 for retracts\n\n\n#define MANUAL_FEEDRATE {3000, 3000, 1000, 100}   // set the speeds for manual moves (mm/min)\n\n#define Z_AXIS_ALWAYS_ON 1\n\n/*------------------------------------\nEXTRUDER SETTINGS\n*------------------------------------*/\n\n// Mintemps\n#define HEATER_0_MINTEMP 15\n#define HEATER_1_MINTEMP 5\n#define HEATER_2_MINTEMP 5\n#define BED_MINTEMP 15\n\n// Maxtemps\n#define HEATER_0_MAXTEMP 305\n#define HEATER_1_MAXTEMP 305\n#define HEATER_2_MAXTEMP 305\n#define BED_MAXTEMP 150\n\n// Define PID constants for extruder\n#define  DEFAULT_Kp 14\n#define  DEFAULT_Ki 0.5\n#define  DEFAULT_Kd 125\n\n// Extrude mintemp\n#define EXTRUDE_MINTEMP 160\n\n// Extruder cooling fans\n#define EXTRUDER_0_AUTO_FAN_PIN   1 //Aux1 of RAMPS1.4\n#define EXTRUDER_1_AUTO_FAN_PIN   -1\n#define EXTRUDER_2_AUTO_FAN_PIN   -1\n#define EXTRUDER_AUTO_FAN_TEMPERATURE 50\n#define EXTRUDER_AUTO_FAN_SPEED   255  // == full speed\n\n\n\n/*------------------------------------\nLOAD/UNLOAD FILAMENT SETTINGS\n*------------------------------------*/\n\n// Load filament commands\n#define LOAD_FILAMENT_0 \"M83\"\n#define LOAD_FILAMENT_1 \"G1 E70 F400\"\n#define LOAD_FILAMENT_2 \"G1 E40 F100\"\n\n// Unload filament commands\n#define UNLOAD_FILAMENT_0 \"M83\"\n#define UNLOAD_FILAMENT_1 \"G1 E10 F400\"\n#define UNLOAD_FILAMENT_2 \"G1 E-90 F6000\"\n\n/*------------------------------------\nCHANGE FILAMENT SETTINGS\n*------------------------------------*/\n\n// Filament change configuration\n#define FILAMENTCHANGEENABLE\n#ifdef FILAMENTCHANGEENABLE\n#define FILAMENTCHANGE_XPOS 211\n#define FILAMENTCHANGE_YPOS 0\n#define FILAMENTCHANGE_ZADD 2\n#define FILAMENTCHANGE_FIRSTRETRACT -2\n#define FILAMENTCHANGE_FINALRETRACT -80\n\n#define FILAMENTCHANGE_FIRSTFEED 70\n#define FILAMENTCHANGE_FINALFEED 50\n#define FILAMENTCHANGE_RECFEED 5\n\n#define FILAMENTCHANGE_XYFEED 50\n#define FILAMENTCHANGE_EFEED 20\n#define FILAMENTCHANGE_RFEED 400\n#define FILAMENTCHANGE_EXFEED 2\n#define FILAMENTCHANGE_ZFEED 15\n\n#endif\n\n/*------------------------------------\nADDITIONAL FEATURES SETTINGS\n*------------------------------------*/\n\n// Define Prusa filament runout sensor\n//#define FILAMENT_RUNOUT_SUPPORT\n\n#ifdef FILAMENT_RUNOUT_SUPPORT\n#define FILAMENT_RUNOUT_SENSOR 1\n#endif\n\n// temperature runaway\n//#define TEMP_RUNAWAY_BED_HYSTERESIS 5\n//#define TEMP_RUNAWAY_BED_TIMEOUT 360\n\n#define TEMP_RUNAWAY_EXTRUDER_HYSTERESIS 15\n#define TEMP_RUNAWAY_EXTRUDER_TIMEOUT 45\n\n/*------------------------------------\nMOTOR CURRENT SETTINGS\n*------------------------------------*/\n\n// Motor Current setting for BIG RAMBo\n#define DIGIPOT_MOTOR_CURRENT {135,135,135,135,135} // Values 0-255 (RAMBO 135 = ~0.75A, 185 = ~1A)\n#define DIGIPOT_MOTOR_CURRENT_LOUD {135,135,135,135,135}\n\n// Motor Current settings for RAMBo mini PWM value = MotorCurrentSetting * 255 / range\n#if MOTHERBOARD == 102 || MOTHERBOARD == 302\n#define MOTOR_CURRENT_PWM_RANGE 2000\n#define DEFAULT_PWM_MOTOR_CURRENT  {270, 830, 450} // {XY,Z,E}\n#define DEFAULT_PWM_MOTOR_CURRENT_LOUD  {540, 830, 500} // {XY,Z,E}\n#endif\n\n/*------------------------------------\nBED SETTINGS\n*------------------------------------*/\n\n// Define Mesh Bed Leveling system to enable it\n#define MESH_BED_LEVELING\n#ifdef MESH_BED_LEVELING\n\n#define MBL_Z_STEP 0.01\n\n// Mesh definitions\n#define MESH_MIN_X 20\n#define MESH_MAX_X 180\n#define MESH_MIN_Y 6\n#define MESH_MAX_Y 190\n\n// Mesh upsample definition\n#define MESH_NUM_X_POINTS 7\n#define MESH_NUM_Y_POINTS 7\n// Mesh measure definition\n#define MESH_MEAS_NUM_X_POINTS 3\n#define MESH_MEAS_NUM_Y_POINTS 3\n\n#define MESH_HOME_Z_CALIB 0.2\n#define MESH_HOME_Z_SEARCH 5\n\n#define X_PROBE_OFFSET_FROM_EXTRUDER -12     // Z probe to nozzle X offset: -left  +right\n#define Y_PROBE_OFFSET_FROM_EXTRUDER -44     // Z probe to nozzle Y offset: -front +behind\n#define Z_PROBE_OFFSET_FROM_EXTRUDER -0.4  // Z probe to nozzle Z offset: -below (always!)\n#endif\n\n// Bed Temperature Control\n// Select PID or bang-bang with PIDTEMPBED. If bang-bang, BED_LIMIT_SWITCHING will enable hysteresis\n//\n// Uncomment this to enable PID on the bed. It uses the same frequency PWM as the extruder.\n// If your PID_dT above is the default, and correct for your hardware/configuration, that means 7.689Hz,\n// which is fine for driving a square wave into a resistive load and does not significantly impact you FET heating.\n// This also works fine on a Fotek SSR-10DA Solid State Relay into a 250W heater.\n// If your configuration is significantly different than this and you don't understand the issues involved, you probably\n// shouldn't use bed PID until someone else verifies your hardware works.\n// If this is enabled, find your own PID constants below.\n#define PIDTEMPBED\n//\n//#define BED_LIMIT_SWITCHING\n\n// This sets the max power delivered to the bed, and replaces the HEATER_BED_DUTY_CYCLE_DIVIDER option.\n// all forms of bed control obey this (PID, bang-bang, bang-bang with hysteresis)\n// setting this to anything other than 255 enables a form of PWM to the bed just like HEATER_BED_DUTY_CYCLE_DIVIDER did,\n// so you shouldn't use it unless you are OK with PWM on your bed.  (see the comment on enabling PIDTEMPBED)\n#define MAX_BED_POWER 255 // limits duty cycle to bed; 255=full current\n\n// Bed temperature compensation settings\n#define BED_OFFSET 10\n#define BED_OFFSET_START 40\n#define BED_OFFSET_CENTER 50\n\n\n#ifdef PIDTEMPBED\n//120v 250W silicone heater into 4mm borosilicate (MendelMax 1.5+)\n//from FOPDT model - kp=.39 Tp=405 Tdead=66, Tc set to 79.2, aggressive factor of .15 (vs .1, 1, 10)\n#define  DEFAULT_bedKp 126.13\n#define  DEFAULT_bedKi 4.30\n#define  DEFAULT_bedKd 924.76\n\n//120v 250W silicone heater into 4mm borosilicate (MendelMax 1.5+)\n//from pidautotune\n//    #define  DEFAULT_bedKp 97.1\n//    #define  DEFAULT_bedKi 1.41\n//    #define  DEFAULT_bedKd 1675.16\n\n// FIND YOUR OWN: \"M303 E-1 C8 S90\" to run autotune on the bed at 90 degreesC for 8 cycles.\n#endif // PIDTEMPBED\n\n\n/*-----------------------------------\nPREHEAT SETTINGS\n*------------------------------------*/\n\n#define PLA_PREHEAT_HOTEND_TEMP 215\n#define PLA_PREHEAT_HPB_TEMP 55\n#define PLA_PREHEAT_FAN_SPEED 0  \n\n#define ABS_PREHEAT_HOTEND_TEMP 255\n#define ABS_PREHEAT_HPB_TEMP 100\n#define ABS_PREHEAT_FAN_SPEED 0 \n\n#define HIPS_PREHEAT_HOTEND_TEMP 220\n#define HIPS_PREHEAT_HPB_TEMP 100\n#define HIPS_PREHEAT_FAN_SPEED 0 \n\n#define PP_PREHEAT_HOTEND_TEMP 254\n#define PP_PREHEAT_HPB_TEMP 100\n#define PP_PREHEAT_FAN_SPEED 0 \n\n#define PET_PREHEAT_HOTEND_TEMP 240\n#define PET_PREHEAT_HPB_TEMP 90\n#define PET_PREHEAT_FAN_SPEED 0 \n\n#define FLEX_PREHEAT_HOTEND_TEMP 230\n#define FLEX_PREHEAT_HPB_TEMP 50\n#define FLEX_PREHEAT_FAN_SPEED 0 \n\n/*------------------------------------\nTHERMISTORS SETTINGS\n*------------------------------------*/\n\n//\n//--NORMAL IS 4.7kohm PULLUP!-- 1kohm pullup can be used on hotend sensor, using correct resistor and table\n//\n//// Temperature sensor settings:\n// -2 is thermocouple with MAX6675 (only for sensor 0)\n// -1 is thermocouple with AD595\n// 0 is not used\n// 1 is 100k thermistor - best choice for EPCOS 100k (4.7k pullup)\n// 2 is 200k thermistor - ATC Semitec 204GT-2 (4.7k pullup)\n// 3 is Mendel-parts thermistor (4.7k pullup)\n// 4 is 10k thermistor !! do not use it for a hotend. It gives bad resolution at high temp. !!\n// 5 is 100K thermistor - ATC Semitec 104GT-2 (Used in ParCan & J-Head) (4.7k pullup)\n// 6 is 100k EPCOS - Not as accurate as table 1 (created using a fluke thermocouple) (4.7k pullup)\n// 7 is 100k Honeywell thermistor 135-104LAG-J01 (4.7k pullup)\n// 71 is 100k Honeywell thermistor 135-104LAF-J01 (4.7k pullup)\n// 8 is 100k 0603 SMD Vishay NTCS0603E3104FXT (4.7k pullup)\n// 9 is 100k GE Sensing AL03006-58.2K-97-G1 (4.7k pullup)\n// 10 is 100k RS thermistor 198-961 (4.7k pullup)\n// 11 is 100k beta 3950 1% thermistor (4.7k pullup)\n// 12 is 100k 0603 SMD Vishay NTCS0603E3104FXT (4.7k pullup) (calibrated for Makibox hot bed)\n// 13 is 100k Hisens 3950  1% up to 300°C for hotend \"Simple ONE \" & \"Hotend \"All In ONE\" \n// 20 is the PT100 circuit found in the Ultimainboard V2.x\n// 60 is 100k Maker's Tool Works Kapton Bed Thermistor beta=3950\n//\n//    1k ohm pullup tables - This is not normal, you would have to have changed out your 4.7k for 1k\n//                          (but gives greater accuracy and more stable PID)\n// 51 is 100k thermistor - EPCOS (1k pullup)\n// 52 is 200k thermistor - ATC Semitec 204GT-2 (1k pullup)\n// 55 is 100k thermistor - ATC Semitec 104GT-2 (Used in ParCan & J-Head) (1k pullup)\n//\n// 1047 is Pt1000 with 4k7 pullup\n// 1010 is Pt1000 with 1k pullup (non standard)\n// 147 is Pt100 with 4k7 pullup\n// 110 is Pt100 with 1k pullup (non standard)\n\n#define TEMP_SENSOR_0 5\n#define TEMP_SENSOR_1 0\n#define TEMP_SENSOR_2 0\n#define TEMP_SENSOR_BED 5\n\n\n#endif //__CONFIGURATION_PRUSA_H\n",
			"file": "Configuration_prusa.h",
			"file_size": 10852,
			"file_write_time": 131200065365176669,
			"settings":
			{
				"buffer_size": 10553,
				"line_ending": "Windows"
			}
		},
		{
			"file": "pins.h",
			"settings":
			{
				"buffer_size": 4690,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			}
		}
	],
	"build_system": "",
	"build_system_choices":
	[
	],
	"build_varint": "",
	"command_palette":
	{
		"height": 219.0,
		"last_filter": "insta",
		"selected_items":
		[
			[
				"insta",
				"Package Control: Install Package"
			],
			[
				"rein",
				"Indentation: Reindent Lines"
			],
			[
				"install",
				"Package Control: Install Package"
			],
			[
				"Markdown",
				"MarkdownEditing: Markdown Lint"
			],
			[
				"ins",
				"Package Control: Install Package"
			],
			[
				"Bro",
				"Preferences: Browse Packages"
			],
			[
				"pa",
				"Package Control: List Unmanaged Packages"
			],
			[
				"bro",
				"Preferences: Browse Packages"
			],
			[
				"Package Control: ",
				"Package Control: Enable Package"
			],
			[
				"Make",
				"Build With: Make - Clean"
			],
			[
				"Package Control: ins",
				"Package Control: Install Package"
			],
			[
				"ph",
				"Snippet: echo \"…\""
			]
		],
		"width": 400.0
	},
	"console":
	{
		"height": 346.0,
		"history":
		[
			"import urllib.request,os,hashlib; h = '2915d1851351e5ee549c20394736b442' + '8bc59f460fa1548d1514676163dafc88'; pf = 'Package Control.sublime-package'; ipp = sublime.installed_packages_path(); urllib.request.install_opener( urllib.request.build_opener( urllib.request.ProxyHandler()) ); by = urllib.request.urlopen( 'http://packagecontrol.io/' + pf.replace(' ', '%20')).read(); dh = hashlib.sha256(by).hexdigest(); print('Error validating download (got %s instead of %s), please try manual install' % (dh, h)) if dh != h else open(os.path.join( ipp, pf), 'wb' ).write(by)"
		]
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"expanded_folders":
	[
		"/E/Documents/Simon/Mes documents/3dPrint/Firmware/PrusaFW",
		"/E/Documents/Simon/Mes documents/3dPrint/Firmware/PrusaFW/Firmware"
	],
	"file_history":
	[
		"/E/Documents/Simon/Mes documents/3dPrint/Firmware/Marlin 1.1.0-RC6 - ZRIB BOARD/Marlin/pins_RAMPS_14.h",
		"/E/Documents/Simon/Mes documents/3dPrint/Firmware/PrusaFW/Firmware/ultralcd.h",
		"/U/AF3-YODA_BRASS.gcode",
		"/E/Documents/Simon/Mes documents/3dPrint/Firmware/PrusaFW/Firmware/boards.h",
		"/D/Brioconcept/schnei008-sw/src/test/testFramework.h",
		"/D/Brioconcept/schnei008-sw/src/SystemEvent.h",
		"/D/Brioconcept/schnei008-sw/src/test/testSuiteFT.h",
		"/D/Brioconcept/schnei008-sw/src/WiserUI.c",
		"/D/Brioconcept/schnei008-sw/src/WiserUI.h",
		"/D/Brioconcept/schnei008-sw/src/SystemEvent.c",
		"/D/Brioconcept/schnei008-sw/src/test/testSuiteFT.c",
		"/D/Brioconcept/schnei008-sw/src/JigAndComm.c",
		"/D/Brioconcept/schnei008-sw/src/JigAndComm.h",
		"/D/Brioconcept/schnei008-sw/src/InputsUI.c",
		"/D/Brioconcept/schnei008-sw/src/InputsUI.h",
		"/D/Brioconcept/schnei008-sw/src/main.c",
		"/D/Brioconcept/schnei008-sw/uir/inputsPG.h",
		"/D/Brioconcept/schnei008-sw/src/test/testEvent.c",
		"/D/Brioconcept/schnei008-sw/src/Zigbee.c",
		"/D/Brioconcept/schnei008-sw/src/Zigbee.h",
		"/D/Brioconcept/schnei008-sw/src/database/databaseHelper.c",
		"/D/Brioconcept/schnei008-sw/src/database/mySqlLib.c",
		"/E/Documents/Simon/Mes documents/3dPrint/Firmware/PrusaFW/Firmware/planner.h",
		"/E/Documents/Simon/Mes documents/3dPrint/Firmware/PrusaFW/Firmware/Marlin_main.cpp",
		"/E/Documents/Simon/Mes documents/3dPrint/Firmware/PrusaFW/Firmware/Marlin.h",
		"/E/Documents/Simon/Mes documents/3dPrint/Firmware/PrusaFW/Firmware/planner.cpp",
		"/U/MK2_x3_DeadManOutline_V1.gcode",
		"/U/DeadManOutline_v2.gcode",
		"/G/Scripts/RaspberryPi/install_mjpgStreamer.sh",
		"/E/Documents/Simon/Mes documents/3dPrint/Firmware/Marlin 1.1.0-RC6 - ANET A8/Marlin/Configuration.h",
		"/E/Documents/Simon/Mes documents/3dPrint/Firmware/PrusaFW/Firmware/pins_ZRIB.h",
		"/E/Documents/Simon/Mes documents/3dPrint/Firmware/Marlin 1.1.0-RC6 - ZRIB BOARD/Marlin/Configuration.h",
		"/E/Documents/Simon/Mes documents/3dPrint/Firmware/Marlin 1.1.0-RC6 - ZRIB BOARD/Marlin/boards.h",
		"/E/Documents/Simon/Mes documents/3dPrint/Firmware/P802GA_8_MarlinV1_ZRIB_Zonestar/Marlin/pins.h",
		"/E/Documents/Simon/Mes documents/3dPrint/Firmware/PrusaFW/Firmware/pins_RAMPS_14_EFB.h",
		"/E/Documents/Simon/Mes documents/3dPrint/Firmware/PrusaFW/Firmware/Configuration_prusa.h",
		"/C/Users/Nismon/Documents/MobaXterm/slash/RemoteFiles/0/pi@192.168.2.22/config.yaml",
		"/E/Documents/Simon/Mes documents/3dPrint/Firmware/PrusaFW/Firmware/mesh_bed_calibration.h",
		"/E/Documents/Simon/Mes documents/3dPrint/Firmware/PrusaFW/Firmware/mesh_bed_calibration.cpp",
		"/E/Documents/Simon/Mes documents/3dPrint/Firmware/PrusaFW/Firmware/ultralcd.cpp",
		"/E/Documents/Simon/Mes documents/3dPrint/Firmware/PrusaFW/Firmware/Configuration.h",
		"/E/Documents/Simon/Mes documents/3dPrint/Firmware/Marlin-1.0.x - ZRIB board Infill3D/Marlin/pins.h",
		"/E/Documents/Simon/Mes documents/3dPrint/Firmware/PrusaFW/Firmware/variants/1_75mm_MK2-RAMBo13a-E3Dv6full.h",
		"/E/Documents/Simon/Mes documents/3dPrint/Firmware/Prusa-Firmware-MK2-ZRIB/Firmware/Configuration_prusa.h",
		"/E/Documents/Simon/Mes documents/3dPrint/Firmware/Prusa-Firmware-MK2-ZRIB/Firmware/thermistortables.h",
		"/E/Documents/Simon/Mes documents/3dPrint/Firmware/Prusa-Firmware-MK2-ZRIB/Firmware/ultralcd.cpp",
		"/E/Documents/Simon/Mes documents/3dPrint/Firmware/Prusa-Firmware-MK2-ZRIB/Firmware/ultralcd.h",
		"/E/Documents/Simon/Mes documents/3dPrint/Firmware/Prusa-Firmware-MK2-ZRIB/Firmware/dogm_lcd_implementation.h",
		"/E/Documents/Simon/Mes documents/3dPrint/Firmware/Prusa-Firmware-MK2-ZRIB/Firmware/ultralcd_implementation_hitachi_HD44780.h",
		"/E/Documents/Simon/Mes documents/3dPrint/Firmware/Prusa-Firmware-MK2-ZRIB/Firmware/dogm_font_data_marlin.h",
		"/E/Documents/Simon/Mes documents/3dPrint/Firmware/Prusa-Firmware-MK2-ZRIB/Firmware/Configuration.h",
		"/E/Documents/Simon/Mes documents/3dPrint/Firmware/Prusa-Firmware-MK2/Firmware/pins_RAMPS_14.h",
		"/E/Documents/Simon/Mes documents/3dPrint/Firmware/Prusa-Firmware-MK2/Firmware/Configuration.h",
		"/E/Documents/Simon/Mes documents/3dPrint/Firmware/Prusa-Firmware-MK2/Firmware/planner.cpp",
		"/E/Documents/Simon/Mes documents/3dPrint/Firmware/Prusa-Firmware-MK2/Firmware/mesh_bed_calibration.cpp",
		"/E/Documents/Simon/Mes documents/3dPrint/Firmware/Prusa-Firmware-MK2/Firmware/mesh_bed_leveling.h",
		"/E/Documents/Simon/Mes documents/3dPrint/Firmware/Prusa-Firmware-MK2/Firmware/Marlin_main.cpp",
		"/E/Documents/Simon/Mes documents/3dPrint/Firmware/Prusa-Firmware-MK2/Firmware/mesh_bed_leveling.cpp",
		"/E/Documents/Simon/Mes documents/3dPrint/Firmware/Prusa-Firmware-MK2/Firmware/Configuration_prusa.h",
		"/E/Documents/Simon/Mes documents/3dPrint/Firmware/Prusa-Firmware-MK2/Firmware/ultralcd.h",
		"/E/Documents/Simon/Mes documents/3dPrint/Firmware/Prusa-Firmware-MK2/Firmware/boards.h",
		"/E/Documents/Simon/Mes documents/3dPrint/Firmware/Prusa-Firmware-MK2/Firmware/pins.h",
		"/E/Documents/Simon/Mes documents/3dPrint/Firmware/Prusa-Firmware-MK2/Firmware/variants/1_75mm_MK2-RAMBo10a-E3Dv6full.h",
		"/E/Documents/Simon/Mes documents/3dPrint/Firmware/Prusa-Firmware-MK2/Firmware/variants/1_75mm_MK2-RAMBo13a-E3Dv6full.h",
		"/E/Documents/Simon/Mes documents/3dPrint/Firmware/Prusa-Firmware-MK2/Firmware/variants/1_75mm-RAMBo10a-E3Dv6full.h",
		"/E/Documents/Simon/Mes documents/3dPrint/Firmware/Prusa-Firmware-MK2/Firmware/variants/1_75mm_RAMPS1_4_ANETA8.h",
		"/E/Documents/Simon/Mes documents/3dPrint/Firmware/Prusa-Firmware-MK2/Firmware/motion_control.h",
		"/E/Documents/Simon/Mes documents/3dPrint/Firmware/Prusa-Firmware-MK2/Firmware/Configuration_adv.h",
		"/E/Documents/Simon/Mes documents/3dPrint/Firmware/Repetier-Firmware- ANETA8/Repetier/Configuration.h",
		"/E/Documents/Simon/Mes documents/3dPrint/Firmware/Repetier-Firmware- ANETA8/Repetier/pins.h",
		"/E/Documents/Simon/Mes documents/3dPrint/Firmware/Marlin 1.1.0-RC6 - ANET A8/Marlin/pins_MELZI.h",
		"/C/Users/Nismon/AppData/Local/Arduino15/packages/Sanguino/hardware/avr/1.0.0/bootloaders/optiboot/Makefile.isp",
		"/E/Documents/Simon/Mes documents/3dPrint/Firmware/XLoader/avrdude.conf",
		"/C/XLoader/avrdude.conf",
		"/D/Program Files (x86)/Arduino/hardware/tools/avr/etc/avrdude.conf",
		"/G/FRETS/Scripts/webcam.sh",
		"/G/FRETS/Scripts/webcam_repeat.sh",
		"/C/Users/Nismon/AppData/Local/Arduino15/packages/arduino/hardware/avr/1.6.11/programmers.txt",
		"/C/Users/Nismon/AppData/Local/Arduino15/packages/Sanguino/hardware/avr/1.0.0/bootloaders/optiboot/Makefile",
		"/C/Users/Nismon/AppData/Local/Arduino15/packages/Sanguino/hardware/avr/1.0.0/bootloaders/optiboot/stk500.h",
		"/E/Documents/Simon/Mes documents/3dPrint/Firmware/Marlin 1.1.0-RC6 - ANET A8/Marlin/pins_SANGUINOLOLU_11.h",
		"/E/Documents/Simon/Mes documents/Kube Innovation/innobyte.cydsn/innobyte.cyprj",
		"/G/Download/auto level_3DP12Marlin/Configuration.h",
		"/G/Temp/Rar$DIa0.068/AVRDUDE_ATmega1284.conf",
		"/C/Users/Nismon/AppData/Local/Arduino15/packages/Sanguino/hardware/avr/1.0.0/boards.txt",
		"/C/Users/Nismon/AppData/Local/Arduino15/packages/Sanguino/hardware/avr/1.0.0/variants/sanguino/pins_arduino.h",
		"/G/Temp/Rar$DIa0.024/pins.h",
		"/G/FRETS/doc/FRETS Module.md",
		"/E/Documents/Simon/Mes documents/Webcams.html",
		"/D/Program Files/Cura 2.1/resources/profiles/materials/Ninjaflex.cfg",
		"/G/FRETS/ip_switch/ipsw.c",
		"/G/Temp/Rar$DIa0.583/pins.h",
		"/E/Documents/Simon/Mes documents/3dPrint/Firmware/Marlin 1.1.0-RC6 - ANET A8/Marlin/pins.h",
		"/E/Documents/Simon/Mes documents/Kube Innovation/innobyte.cydsn/.cproject",
		"/C/Users/Nismon/Documents/MobaXterm/slash/RemoteFiles/13/nismon@192.168.1.105/.metadata.yaml",
		"/G/Programmes/SocketTest-master/SocketTest.bat",
		"/E/Documents/Simon/Mes documents/Kube Innovation/innobyte.cydsn/main.c",
		"/E/Documents/Simon/Mes documents/Kube Innovation/innobyte.cydsn/freertos/tasks.c",
		"/D/Program Files/Cura 2.1/resources/profiles/materials/PCTPE.cfg",
		"/D/Program Files/Cura 2.1/resources/profiles/materials/Taulman910.cfg",
		"/E/Documents/Simon/Mes documents/3dPrint/Firmware/Marlin 1.1.0-RC6 - ZRIB BOARD/Marlin/Configuration_adv.h",
		"/E/Documents/Simon/Mes documents/3dPrint/Firmware/Orignal-Prusa-i3-MK2 - ZRIB BOARD - Afinibot/Prusa-Firmware/Configuration.h",
		"/E/Documents/Simon/Mes documents/3dPrint/Firmware/Orignal-Prusa-i3-MK2 - ZRIB BOARD - Afinibot/Prusa-Firmware/ultralcd.cpp",
		"/E/Documents/Simon/Mes documents/3dPrint/Firmware/Orignal-Prusa-i3-MK2 - ZRIB BOARD - Afinibot/Prusa-Firmware/Marlin_main.cpp",
		"/E/Documents/Simon/Mes documents/3dPrint/Firmware/Orignal-Prusa-i3-MK2 - ZRIB BOARD - Afinibot/Prusa-Firmware/Configuration_prusa.h",
		"/E/Documents/Simon/Mes documents/3dPrint/Firmware/Orignal-Prusa-i3-MK2 - ZRIB BOARD - Afinibot/Prusa-Firmware/Marlin.h",
		"/E/Documents/Simon/Mes documents/3dPrint/Firmware/Orignal-Prusa-i3-MK2 - ZRIB BOARD - Afinibot/Prusa-Firmware/variants/1-75mm-ZRIB-1-DYZE.h",
		"/D/Program Files/Cura 2.1/resources/profiles/general/Normal+Quality.cfg",
		"/D/Program Files/Cura 2.1/resources/profiles/materials/pla.cfg",
		"/D/Program Files/Cura 2.1/resources/machines/afinibot_i3.json",
		"/G/FRETS/Scripts/FRETS-GpsRecorder-0a.py",
		"/D/Users/Nismon/PycharmProjects/GPS2.7/FRETS_GPS.py",
		"/E/Documents/Simon/Mes documents/3dPrint/Firmware/Orignal-Prusa-i3-MK2 - ZRIB BOARD - Afinibot/Prusa-Firmware/thermistortables.h",
		"/E/Documents/Simon/Mes documents/3dPrint/Firmware/Orignal-Prusa-i3-MK2 - ZRIB BOARD - Afinibot/Prusa-Firmware/variants/3mm-RAMBo-10a-PrusaNmk2.h",
		"/E/Documents/Simon/Mes documents/3dPrint/Firmware/Orignal-Prusa-i3-MK2 - ZRIB BOARD - Afinibot/Prusa-Firmware/boards.h",
		"/E/Documents/Simon/Mes documents/3dPrint/Firmware/Orignal-Prusa-i3-MK2 - ZRIB BOARD - Afinibot/Prusa-Firmware/pins.h",
		"/D/Program Files/Cura 2.1/resources/profiles/materials/plapha.cfg",
		"/D/Program Files/Cura 2.1/resources/profiles/materials/PETG.cfg",
		"/D/Program Files/Cura 2.1/qml/UM/RecolorImage.qml",
		"/D/Program Files/Cura 2.1/qml/QtGraphicalEffects/Blend.qml",
		"/G/FRETS/.gitignore",
		"/D/Program Files/Cura 2.1/resources/profiles/materials/abs.cfg",
		"/D/Program Files/Cura 2.1/resources/machines/fdmprinter.json",
		"/E/Documents/Simon/Mes documents/3dPrint/Dyze/AI3_DyzEND_Fan_Shroud-005-Left-RevB.gcode",
		"/E/Documents/Simon/Mes documents/3dPrint/Dyze/AI3_Carriagetest.gcode",
		"/D/Program Files/Cura 2.1/resources/machines/prusa_i3.json",
		"/E/Documents/Simon/Mes documents/3dPrint/_MISC/Pi3_treefrog_45_cut.gcode",
		"/E/Documents/Simon/Mes documents/3dPrint/Firmware/Marlin 1.1.0-RC6 - ZRIB BOARD/Marlin/Marlin_main.cpp"
	],
	"find":
	{
		"height": 36.0
	},
	"find_in_files":
	{
		"height": 96.0,
		"where_history":
		[
			"",
			"E:\\Documents\\Simon\\Mes documents\\3dPrint\\Firmware\\Prusa-Firmware-MK2",
			"E:\\Documents\\Simon\\Mes documents\\3dPrint\\Firmware\\Marlin 1.1.0-RC6 - ANET A8",
			"E:\\Documents\\Simon\\Mes documents\\3dPrint\\Firmware\\Repetier-Firmware- ANETA8",
			"E:\\Documents\\Simon\\Mes documents\\3dPrint\\Firmware\\Marlin 1.1.0-RC6 - ANET A8",
			""
		]
	},
	"find_state":
	{
		"case_sensitive": false,
		"find_history":
		[
			"FAN",
			"BOARD_RAMBO_MINI_1_3",
			"EXTRUDER",
			"lcd_commands_type",
			"lcd_commands",
			"LCD_COMMAND_LOAD_FILAMENT",
			"OAD_FILAMENT_1",
			"LOAD_FILAMENT_2",
			"MSG_LOADING_FILAMENT",
			"WELCOME_MSG",
			"LOAD_FILAMENT_1",
			"Unload filament",
			"menu",
			"prodprint",
			"TestEvent_DoTestThread",
			"JigUnit",
			"JigUnit = ",
			"JigUnit",
			"SystemEvent_settingFileSaveWiserCOMPort",
			"WiserUI_setWiserCOMConnecting",
			"SYSTEMEVENT_BUTTON_COUNT",
			"SystemEvent_buttonDimmedState",
			"SYSTEMEVENT_BUTTON_COM_WISER",
			"WiserPortNumber",
			"CalibBoxPortNumber",
			"WiserCOM",
			"WiserUI_populateWiserCOMList",
			"PORT_RS_232_WISER",
			"TABPANEL_WISER",
			"WiserCOM",
			"WiserUI_populateWiserCOMList",
			"testSuiteWiser",
			"TEST_SUITE_WISER_",
			"#define TEST_SUITE_WISER_TESTCOUNT                   (sizeof(testWiserList) / sizeof(testWiserList[0]))\n",
			"WISER_PROG_PROVISION_CLEAN_TEST",
			"InputsUI_setStateOfButtonInJobPanel",
			"scan_handle",
			"SKIP_INPUT",
			"UNT_PAN_PG_END_INPUT",
			"operat",
			"UNT_PAN_RF_SKIP_INPUT",
			"InputsUI_setStateOfButtonInJobPanel",
			"scan_handle",
			"skip",
			"startover",
			"InputsUI_show",
			"InputsUI_Reset",
			"_reset",
			"InputsUI_clearVcsSerialScanText",
			"InputsUI_deactivateSerialScanFields",
			"firstScanDone",
			"InputsUI_init",
			"LedArray",
			"Inputs_SerialLedPG_List",
			"PNL_SRLPG_LED_1",
			"InputsUI_Reset",
			"stoptestcallback",
			"PNL_SRLPG_LED_1",
			"LED_1",
			"operatorscan",
			"skipinpu",
			"InputsUI_activateTmxSerialScanField",
			"Inputs_SerialNumber",
			"skipinput",
			"base-revision",
			"provision",
			"obdcName",
			"mySqlConnect",
			"AWS_ODBC_NAME",
			"macaddress",
			"odbc_aws_mysql",
			"zigbee_COM_WRITE",
			"found",
			"zigbee_COM_WRITE",
			"Z",
			"planner_abort_hard",
			"cmdqueue_reset",
			"planner_queue_full",
			"cmdqueue_reset",
			"planner_queue_full",
			"silent",
			"SilentModeMenu",
			"Calibrate",
			"MSG_CALIBRATE_BED",
			"Calibration",
			"CalibrationXYZ",
			"Calibration XYZ",
			"HOME",
			"FAN_PIN",
			"FAN",
			"43",
			"FAN",
			"lcd_settings_menu",
			"setting",
			"X_PROBE_OFFSET_FROM_EXTRUDER",
			"fpos_t",
			"zrib\t",
			"lcd_implementation_drawmenu_setting_edit_generic",
			"lcd_implementation_drawmenu_back",
			"travel",
			"lcd_implementation_drawedit_2",
			"#ifndef(DOGLCD)",
			"ULTRA",
			"#ifndef",
			"#elif",
			"#ifndef",
			"lcd.",
			"lcd_printPGM",
			"cursor",
			" lcd",
			"lcd ",
			"lcd",
			"lcd_support_menu",
			"lcd_preheat_menu",
			"lcd_preheat_pla",
			"lcd_support_menu",
			"lcd_implementation_drawmenu_generic_RAM",
			"lcd_implementation_drawmenu_back_RAM_selected",
			"dogm_lcd_implementation.h",
			"ultralcd_implementation_hitachi_HD44780",
			"implementation_status",
			"implementation",
			"lcd_implementation_drawmenu_back_RAM_selected",
			"drawmenu",
			"drawmanu",
			"Ultra",
			"lcd_implementation_drawmenu_back_RAM_selected",
			"lcd_implementation_init_noclear"
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": false,
		"replace_history":
		[
			"CalibBoxCOM",
			"PORT_RS_232_CALIB_BOX",
			"TABPANEL_CALIB_BOX",
			"CalibBoxCOM",
			"#ifndef DOGLCD",
			"//lcd.",
			"LIS3DH_getRange",
			"LIS3DH_getDataRate",
			"LIS3DH_setDataRate",
			"LIS3DH_readRegister8",
			"LIS3DH_writeRegister8",
			"LIS3DH_spixfer",
			"LIS3DH_",
			"next_state",
			"clock_i_period",
			"USBData_io",
			"RXF_i",
			"byte_cnt",
			"(Count = \"1\")",
			"(Count = \"2\")",
			"char",
			"grille",
			"get_direction",
			"cal.vM"
		],
		"reverse": false,
		"show_context": true,
		"use_buffer2": true,
		"whole_word": false,
		"wrap": true
	},
	"groups":
	[
		{
			"selected": 6,
			"sheets":
			[
				{
					"buffer": 0,
					"file": "/E/Documents/Simon/Mes documents/3dPrint/Firmware/PrusaFW/.gitignore",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1,
						"regions":
						{
						},
						"selection":
						[
							[
								1,
								1
							]
						],
						"settings":
						{
							"function_name_status_row": 1,
							"syntax": "Packages/Text/Plain text.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 6,
					"type": "text"
				},
				{
					"buffer": 1,
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 180240,
						"regions":
						{
							"match":
							{
								"flags": 112,
								"regions":
								[
									[
										199,
										214
									],
									[
										348,
										363
									],
									[
										618,
										633
									],
									[
										1042,
										1057
									],
									[
										1380,
										1395
									],
									[
										1623,
										1638
									],
									[
										1772,
										1787
									],
									[
										2061,
										2076
									],
									[
										2210,
										2225
									],
									[
										2569,
										2584
									],
									[
										2743,
										2758
									],
									[
										3015,
										3030
									],
									[
										3218,
										3233
									],
									[
										3503,
										3518
									],
									[
										3677,
										3692
									],
									[
										3958,
										3973
									],
									[
										4132,
										4147
									],
									[
										4406,
										4417
									],
									[
										4481,
										4492
									],
									[
										4552,
										4563
									],
									[
										4627,
										4638
									],
									[
										4701,
										4712
									],
									[
										4784,
										4795
									],
									[
										4837,
										4848
									],
									[
										4861,
										4872
									],
									[
										4885,
										4896
									],
									[
										4909,
										4920
									],
									[
										4933,
										4944
									],
									[
										5216,
										5227
									],
									[
										5265,
										5276
									],
									[
										5295,
										5306
									],
									[
										5503,
										5514
									],
									[
										5826,
										5837
									],
									[
										6130,
										6141
									],
									[
										6432,
										6443
									],
									[
										6743,
										6754
									],
									[
										7121,
										7132
									],
									[
										7274,
										7285
									],
									[
										7531,
										7542
									],
									[
										7919,
										7930
									],
									[
										8091,
										8102
									],
									[
										8243,
										8254
									],
									[
										8517,
										8528
									],
									[
										8561,
										8572
									],
									[
										8849,
										8869
									],
									[
										8923,
										8943
									],
									[
										8999,
										9019
									],
									[
										9070,
										9090
									],
									[
										9141,
										9161
									],
									[
										9223,
										9243
									],
									[
										9285,
										9305
									],
									[
										9318,
										9338
									],
									[
										9351,
										9371
									],
									[
										9384,
										9404
									],
									[
										9417,
										9437
									],
									[
										9728,
										9748
									],
									[
										9786,
										9806
									],
									[
										9825,
										9845
									],
									[
										10210,
										10230
									],
									[
										10585,
										10605
									],
									[
										10938,
										10958
									],
									[
										11285,
										11305
									],
									[
										11694,
										11714
									],
									[
										12053,
										12073
									],
									[
										12226,
										12246
									],
									[
										12578,
										12593
									],
									[
										12755,
										12770
									],
									[
										13018,
										13033
									],
									[
										13226,
										13241
									],
									[
										13479,
										13494
									],
									[
										13759,
										13774
									],
									[
										14078,
										14092
									],
									[
										14252,
										14266
									],
									[
										14524,
										14538
									],
									[
										14727,
										14741
									],
									[
										15012,
										15026
									],
									[
										15186,
										15200
									],
									[
										15467,
										15481
									],
									[
										15641,
										15655
									],
									[
										15957,
										15982
									],
									[
										16144,
										16169
									],
									[
										16439,
										16464
									],
									[
										16762,
										16774
									],
									[
										16967,
										16979
									],
									[
										17014,
										17026
									],
									[
										17291,
										17303
									],
									[
										17349,
										17361
									],
									[
										17434,
										17446
									],
									[
										17470,
										17482
									],
									[
										17573,
										17585
									],
									[
										17633,
										17645
									],
									[
										17727,
										17739
									],
									[
										17794,
										17806
									],
									[
										17828,
										17840
									],
									[
										17960,
										17972
									],
									[
										18128,
										18140
									],
									[
										18177,
										18189
									],
									[
										18345,
										18357
									],
									[
										18394,
										18406
									],
									[
										18622,
										18634
									],
									[
										18671,
										18683
									],
									[
										18860,
										18872
									],
									[
										18925,
										18937
									],
									[
										19018,
										19030
									],
									[
										19044,
										19056
									],
									[
										19113,
										19125
									],
									[
										19178,
										19190
									],
									[
										19211,
										19223
									],
									[
										19333,
										19345
									],
									[
										19505,
										19517
									],
									[
										19552,
										19564
									],
									[
										19725,
										19737
									],
									[
										19772,
										19784
									],
									[
										19938,
										19950
									],
									[
										19985,
										19997
									],
									[
										20176,
										20188
									],
									[
										20223,
										20235
									],
									[
										20401,
										20413
									],
									[
										20473,
										20485
									],
									[
										20516,
										20528
									],
									[
										20569,
										20581
									],
									[
										20676,
										20688
									],
									[
										20702,
										20714
									],
									[
										20771,
										20783
									],
									[
										20867,
										20879
									],
									[
										20900,
										20912
									],
									[
										20947,
										20959
									],
									[
										21012,
										21024
									],
									[
										21059,
										21071
									],
									[
										21124,
										21136
									],
									[
										21171,
										21183
									],
									[
										21381,
										21393
									],
									[
										21428,
										21440
									],
									[
										21493,
										21505
									],
									[
										21540,
										21552
									],
									[
										21720,
										21732
									],
									[
										21822,
										21834
									],
									[
										22046,
										22058
									],
									[
										22233,
										22245
									],
									[
										22416,
										22428
									],
									[
										22550,
										22562
									],
									[
										22811,
										22828
									],
									[
										23016,
										23033
									],
									[
										23307,
										23324
									],
									[
										23435,
										23452
									],
									[
										23626,
										23643
									],
									[
										23751,
										23768
									],
									[
										23891,
										23908
									],
									[
										24025,
										24042
									],
									[
										24068,
										24085
									],
									[
										24121,
										24138
									],
									[
										24295,
										24312
									],
									[
										24446,
										24463
									],
									[
										24670,
										24687
									],
									[
										24857,
										24874
									],
									[
										25040,
										25057
									],
									[
										25365,
										25373
									],
									[
										25390,
										25398
									],
									[
										25694,
										25702
									],
									[
										25705,
										25713
									],
									[
										25737,
										25745
									],
									[
										25902,
										25910
									],
									[
										26237,
										26245
									],
									[
										26375,
										26383
									],
									[
										26471,
										26479
									],
									[
										26737,
										26745
									],
									[
										26915,
										26923
									],
									[
										26957,
										26965
									],
									[
										26995,
										27003
									],
									[
										27021,
										27029
									],
									[
										27360,
										27368
									],
									[
										27396,
										27404
									],
									[
										27476,
										27484
									],
									[
										27512,
										27520
									],
									[
										27591,
										27599
									],
									[
										27627,
										27635
									],
									[
										27770,
										27778
									],
									[
										27882,
										27890
									],
									[
										27932,
										27940
									],
									[
										27982,
										27990
									],
									[
										28289,
										28297
									],
									[
										28418,
										28426
									],
									[
										28774,
										28782
									],
									[
										28827,
										28835
									],
									[
										29120,
										29128
									],
									[
										29410,
										29418
									],
									[
										29463,
										29471
									],
									[
										29756,
										29764
									],
									[
										30042,
										30050
									],
									[
										30186,
										30194
									],
									[
										30213,
										30221
									],
									[
										30286,
										30294
									],
									[
										30323,
										30331
									],
									[
										30374,
										30382
									],
									[
										30437,
										30445
									],
									[
										30488,
										30496
									],
									[
										30856,
										30864
									],
									[
										31177,
										31185
									],
									[
										31206,
										31214
									],
									[
										31330,
										31338
									],
									[
										31366,
										31374
									],
									[
										31809,
										31817
									],
									[
										32090,
										32098
									],
									[
										32253,
										32261
									],
									[
										32292,
										32300
									],
									[
										32335,
										32343
									],
									[
										32378,
										32386
									],
									[
										32434,
										32442
									],
									[
										32496,
										32504
									],
									[
										32891,
										32899
									],
									[
										32932,
										32940
									],
									[
										33169,
										33177
									],
									[
										33280,
										33288
									],
									[
										33307,
										33315
									],
									[
										33408,
										33416
									],
									[
										33435,
										33443
									],
									[
										33507,
										33515
									],
									[
										33603,
										33611
									],
									[
										33866,
										33874
									],
									[
										33947,
										33955
									],
									[
										34319,
										34327
									],
									[
										34766,
										34774
									],
									[
										34967,
										34975
									],
									[
										35009,
										35017
									],
									[
										35216,
										35224
									],
									[
										35330,
										35338
									],
									[
										35378,
										35386
									],
									[
										35472,
										35480
									],
									[
										35661,
										35669
									],
									[
										35814,
										35822
									],
									[
										35943,
										35951
									],
									[
										35980,
										35988
									],
									[
										36023,
										36031
									],
									[
										36067,
										36075
									],
									[
										36111,
										36119
									],
									[
										36159,
										36167
									],
									[
										36311,
										36319
									],
									[
										36362,
										36370
									],
									[
										36521,
										36529
									],
									[
										36618,
										36626
									],
									[
										36716,
										36724
									],
									[
										37014,
										37022
									],
									[
										37419,
										37427
									],
									[
										37572,
										37580
									],
									[
										37701,
										37709
									],
									[
										37738,
										37746
									],
									[
										37781,
										37789
									],
									[
										37825,
										37833
									],
									[
										37869,
										37877
									],
									[
										37917,
										37925
									],
									[
										38069,
										38077
									],
									[
										38120,
										38128
									],
									[
										38279,
										38287
									],
									[
										38376,
										38384
									],
									[
										38474,
										38482
									],
									[
										38770,
										38778
									],
									[
										39215,
										39223
									],
									[
										39411,
										39419
									],
									[
										39616,
										39624
									],
									[
										39691,
										39699
									],
									[
										39903,
										39911
									],
									[
										39982,
										39990
									],
									[
										40234,
										40242
									],
									[
										40390,
										40398
									],
									[
										40618,
										40626
									],
									[
										40821,
										40829
									],
									[
										41029,
										41037
									],
									[
										41103,
										41111
									],
									[
										41282,
										41290
									],
									[
										41424,
										41432
									],
									[
										41619,
										41627
									],
									[
										41827,
										41835
									],
									[
										41910,
										41918
									],
									[
										42127,
										42135
									],
									[
										42186,
										42194
									],
									[
										42254,
										42262
									],
									[
										42487,
										42495
									],
									[
										42555,
										42563
									],
									[
										42619,
										42627
									],
									[
										42716,
										42724
									],
									[
										42962,
										42970
									],
									[
										43212,
										43220
									],
									[
										43514,
										43522
									],
									[
										43884,
										43892
									],
									[
										44205,
										44213
									],
									[
										44237,
										44245
									],
									[
										44287,
										44295
									],
									[
										44341,
										44349
									],
									[
										44425,
										44433
									],
									[
										44458,
										44466
									],
									[
										44507,
										44515
									],
									[
										44562,
										44570
									],
									[
										44651,
										44659
									],
									[
										44689,
										44697
									],
									[
										44744,
										44752
									],
									[
										44804,
										44812
									],
									[
										44869,
										44877
									],
									[
										44907,
										44915
									],
									[
										44962,
										44970
									],
									[
										45022,
										45030
									],
									[
										45087,
										45095
									],
									[
										45125,
										45133
									],
									[
										45180,
										45188
									],
									[
										45240,
										45248
									],
									[
										45491,
										45499
									],
									[
										45708,
										45716
									],
									[
										45746,
										45754
									],
									[
										45801,
										45809
									],
									[
										45861,
										45869
									],
									[
										45926,
										45934
									],
									[
										45964,
										45972
									],
									[
										46019,
										46027
									],
									[
										46079,
										46087
									],
									[
										46144,
										46152
									],
									[
										46182,
										46190
									],
									[
										46237,
										46245
									],
									[
										46297,
										46305
									],
									[
										46396,
										46404
									],
									[
										46750,
										46758
									],
									[
										46800,
										46808
									],
									[
										46847,
										46855
									],
									[
										47215,
										47223
									],
									[
										47266,
										47274
									],
									[
										47314,
										47322
									],
									[
										47678,
										47686
									],
									[
										47734,
										47742
									],
									[
										47787,
										47795
									],
									[
										47860,
										47868
									],
									[
										47916,
										47924
									],
									[
										47969,
										47977
									],
									[
										48042,
										48050
									],
									[
										48098,
										48106
									],
									[
										48151,
										48159
									],
									[
										48528,
										48536
									],
									[
										48584,
										48592
									],
									[
										48637,
										48645
									],
									[
										48710,
										48718
									],
									[
										48766,
										48774
									],
									[
										48819,
										48827
									],
									[
										48892,
										48900
									],
									[
										48948,
										48956
									],
									[
										49001,
										49009
									],
									[
										49406,
										49414
									],
									[
										49439,
										49447
									],
									[
										49482,
										49490
									],
									[
										49515,
										49523
									],
									[
										49558,
										49566
									],
									[
										49591,
										49599
									],
									[
										49634,
										49642
									],
									[
										49667,
										49675
									],
									[
										49710,
										49718
									],
									[
										49743,
										49751
									],
									[
										49871,
										49879
									],
									[
										49904,
										49912
									],
									[
										50130,
										50138
									],
									[
										50157,
										50165
									],
									[
										50507,
										50515
									],
									[
										50540,
										50548
									],
									[
										50578,
										50586
									],
									[
										50611,
										50619
									],
									[
										50952,
										50960
									],
									[
										51258,
										51266
									],
									[
										51291,
										51299
									],
									[
										51334,
										51342
									],
									[
										51367,
										51375
									],
									[
										51410,
										51418
									],
									[
										51443,
										51451
									],
									[
										51486,
										51494
									],
									[
										51519,
										51527
									],
									[
										51562,
										51570
									],
									[
										51595,
										51603
									],
									[
										51723,
										51731
									],
									[
										51756,
										51764
									],
									[
										52240,
										52248
									],
									[
										52267,
										52275
									],
									[
										52815,
										52823
									],
									[
										53118,
										53126
									],
									[
										53151,
										53159
									],
									[
										53194,
										53202
									],
									[
										53227,
										53235
									],
									[
										53270,
										53278
									],
									[
										53303,
										53311
									],
									[
										53346,
										53354
									],
									[
										53379,
										53387
									],
									[
										53422,
										53430
									],
									[
										53455,
										53463
									],
									[
										53583,
										53591
									],
									[
										53616,
										53624
									],
									[
										54097,
										54105
									],
									[
										54124,
										54132
									],
									[
										54668,
										54676
									],
									[
										54701,
										54709
									],
									[
										54744,
										54752
									],
									[
										54777,
										54785
									],
									[
										54820,
										54828
									],
									[
										54853,
										54861
									],
									[
										54896,
										54904
									],
									[
										54929,
										54937
									],
									[
										54972,
										54980
									],
									[
										55005,
										55013
									],
									[
										55133,
										55141
									],
									[
										55166,
										55174
									],
									[
										55392,
										55400
									],
									[
										55419,
										55427
									],
									[
										55963,
										55971
									],
									[
										55996,
										56004
									],
									[
										56039,
										56047
									],
									[
										56072,
										56080
									],
									[
										56115,
										56123
									],
									[
										56148,
										56156
									],
									[
										56191,
										56199
									],
									[
										56224,
										56232
									],
									[
										56267,
										56275
									],
									[
										56300,
										56308
									],
									[
										56428,
										56436
									],
									[
										56461,
										56469
									],
									[
										56687,
										56695
									],
									[
										56714,
										56722
									],
									[
										57272,
										57280
									],
									[
										57577,
										57585
									],
									[
										57610,
										57618
									],
									[
										57653,
										57661
									],
									[
										57686,
										57694
									],
									[
										57729,
										57737
									],
									[
										57762,
										57770
									],
									[
										57805,
										57813
									],
									[
										57838,
										57846
									],
									[
										57881,
										57889
									],
									[
										57914,
										57922
									],
									[
										58042,
										58050
									],
									[
										58075,
										58083
									],
									[
										58301,
										58309
									],
									[
										58328,
										58336
									],
									[
										58733,
										58741
									],
									[
										58965,
										58973
									],
									[
										59325,
										59333
									],
									[
										59392,
										59400
									],
									[
										59410,
										59418
									],
									[
										59476,
										59484
									],
									[
										59532,
										59540
									],
									[
										59676,
										59684
									],
									[
										59728,
										59736
									],
									[
										60065,
										60073
									],
									[
										60316,
										60324
									],
									[
										60360,
										60368
									],
									[
										60676,
										60684
									],
									[
										60812,
										60820
									],
									[
										60911,
										60919
									],
									[
										61477,
										61485
									],
									[
										61990,
										61998
									],
									[
										62208,
										62216
									],
									[
										62504,
										62512
									],
									[
										62522,
										62530
									],
									[
										62553,
										62561
									],
									[
										62599,
										62607
									],
									[
										62731,
										62739
									],
									[
										62788,
										62796
									],
									[
										62861,
										62869
									],
									[
										62999,
										63007
									],
									[
										63030,
										63038
									],
									[
										63076,
										63084
									],
									[
										63180,
										63188
									],
									[
										63207,
										63215
									],
									[
										63242,
										63250
									],
									[
										63294,
										63302
									],
									[
										63314,
										63322
									],
									[
										63332,
										63340
									],
									[
										63366,
										63374
									],
									[
										63396,
										63404
									],
									[
										63424,
										63432
									],
									[
										63443,
										63451
									],
									[
										63529,
										63537
									],
									[
										63663,
										63671
									],
									[
										63696,
										63704
									],
									[
										63745,
										63753
									],
									[
										63856,
										63864
									],
									[
										63889,
										63897
									],
									[
										63938,
										63946
									],
									[
										64311,
										64319
									],
									[
										64609,
										64617
									],
									[
										64805,
										64813
									],
									[
										65206,
										65214
									],
									[
										65489,
										65497
									],
									[
										65782,
										65790
									],
									[
										66037,
										66045
									],
									[
										66325,
										66333
									],
									[
										66556,
										66564
									],
									[
										66590,
										66598
									],
									[
										66913,
										66921
									],
									[
										67304,
										67312
									],
									[
										67604,
										67612
									],
									[
										67821,
										67829
									],
									[
										68139,
										68147
									],
									[
										68257,
										68265
									],
									[
										68459,
										68467
									],
									[
										68683,
										68691
									],
									[
										69003,
										69011
									],
									[
										69147,
										69155
									],
									[
										69358,
										69366
									],
									[
										69681,
										69689
									],
									[
										69910,
										69918
									],
									[
										70185,
										70193
									],
									[
										70447,
										70455
									],
									[
										70602,
										70610
									],
									[
										70973,
										70981
									],
									[
										71246,
										71254
									],
									[
										71589,
										71597
									],
									[
										71888,
										71896
									],
									[
										72264,
										72272
									],
									[
										72599,
										72607
									],
									[
										72839,
										72847
									],
									[
										73233,
										73241
									],
									[
										73389,
										73397
									],
									[
										73542,
										73550
									],
									[
										73829,
										73837
									],
									[
										74014,
										74022
									],
									[
										74065,
										74073
									],
									[
										74205,
										74213
									],
									[
										74356,
										74364
									],
									[
										74421,
										74429
									],
									[
										74731,
										74739
									],
									[
										75051,
										75059
									],
									[
										75453,
										75461
									],
									[
										75929,
										75937
									],
									[
										76253,
										76261
									],
									[
										76355,
										76363
									],
									[
										76835,
										76843
									],
									[
										77168,
										77176
									],
									[
										77263,
										77271
									],
									[
										77358,
										77366
									],
									[
										77453,
										77461
									],
									[
										77865,
										77873
									],
									[
										78018,
										78026
									],
									[
										78466,
										78474
									],
									[
										78550,
										78558
									],
									[
										78968,
										78976
									],
									[
										79508,
										79516
									],
									[
										79907,
										79915
									],
									[
										80298,
										80306
									],
									[
										80631,
										80639
									],
									[
										81091,
										81099
									],
									[
										81454,
										81462
									],
									[
										81806,
										81814
									],
									[
										82208,
										82216
									],
									[
										82624,
										82632
									],
									[
										82980,
										82988
									],
									[
										83198,
										83206
									],
									[
										83487,
										83495
									],
									[
										83731,
										83739
									],
									[
										83872,
										83880
									],
									[
										84013,
										84021
									],
									[
										84302,
										84310
									],
									[
										84465,
										84473
									],
									[
										84674,
										84682
									],
									[
										84782,
										84790
									],
									[
										85030,
										85038
									],
									[
										85048,
										85056
									],
									[
										85059,
										85067
									],
									[
										85076,
										85084
									],
									[
										85168,
										85176
									],
									[
										85270,
										85278
									],
									[
										85382,
										85390
									],
									[
										85508,
										85516
									],
									[
										85555,
										85563
									],
									[
										85591,
										85599
									],
									[
										85717,
										85725
									],
									[
										85887,
										85895
									],
									[
										85905,
										85913
									],
									[
										85916,
										85924
									],
									[
										85933,
										85941
									],
									[
										86030,
										86038
									],
									[
										86136,
										86144
									],
									[
										86251,
										86259
									],
									[
										86397,
										86405
									],
									[
										86603,
										86611
									],
									[
										86761,
										86769
									],
									[
										86952,
										86960
									],
									[
										87263,
										87271
									],
									[
										87297,
										87305
									],
									[
										87632,
										87640
									],
									[
										87736,
										87744
									],
									[
										88111,
										88119
									],
									[
										88145,
										88153
									],
									[
										88255,
										88263
									],
									[
										88289,
										88297
									],
									[
										88381,
										88389
									],
									[
										88413,
										88421
									],
									[
										88672,
										88680
									],
									[
										88861,
										88869
									],
									[
										89016,
										89024
									],
									[
										89034,
										89042
									],
									[
										89101,
										89109
									],
									[
										89150,
										89158
									],
									[
										89162,
										89170
									],
									[
										89261,
										89269
									],
									[
										89431,
										89439
									],
									[
										89537,
										89545
									],
									[
										89610,
										89618
									],
									[
										89718,
										89726
									],
									[
										89778,
										89786
									],
									[
										89960,
										89968
									],
									[
										90103,
										90111
									],
									[
										90363,
										90371
									],
									[
										90467,
										90475
									],
									[
										90661,
										90669
									],
									[
										90765,
										90773
									],
									[
										90917,
										90925
									],
									[
										90991,
										90999
									],
									[
										91160,
										91168
									],
									[
										91188,
										91196
									],
									[
										91291,
										91299
									],
									[
										91319,
										91327
									],
									[
										91462,
										91470
									],
									[
										91480,
										91488
									],
									[
										91491,
										91499
									],
									[
										91506,
										91514
									],
									[
										91595,
										91603
									],
									[
										91623,
										91631
									],
									[
										91697,
										91705
									],
									[
										91725,
										91733
									],
									[
										91852,
										91860
									],
									[
										91874,
										91882
									],
									[
										92030,
										92038
									],
									[
										92262,
										92270
									],
									[
										92471,
										92479
									],
									[
										92696,
										92704
									],
									[
										92921,
										92929
									],
									[
										93028,
										93036
									],
									[
										93385,
										93393
									],
									[
										93637,
										93645
									],
									[
										93918,
										93926
									],
									[
										94165,
										94173
									],
									[
										94462,
										94470
									],
									[
										94805,
										94813
									],
									[
										95037,
										95045
									],
									[
										95195,
										95203
									],
									[
										95394,
										95402
									],
									[
										95572,
										95580
									],
									[
										95795,
										95803
									],
									[
										96086,
										96094
									],
									[
										96358,
										96366
									],
									[
										96401,
										96409
									],
									[
										96413,
										96421
									],
									[
										96518,
										96526
									],
									[
										96568,
										96576
									],
									[
										96665,
										96673
									],
									[
										96699,
										96707
									],
									[
										96718,
										96726
									],
									[
										96798,
										96806
									],
									[
										96914,
										96922
									],
									[
										97100,
										97108
									],
									[
										97126,
										97134
									],
									[
										97178,
										97186
									],
									[
										97201,
										97209
									],
									[
										97266,
										97274
									],
									[
										97310,
										97318
									],
									[
										97325,
										97333
									],
									[
										97639,
										97647
									],
									[
										97693,
										97701
									],
									[
										97911,
										97919
									],
									[
										97985,
										97993
									],
									[
										98310,
										98318
									],
									[
										98641,
										98649
									],
									[
										98785,
										98793
									],
									[
										99184,
										99192
									],
									[
										99342,
										99350
									],
									[
										99591,
										99599
									],
									[
										99776,
										99784
									],
									[
										99986,
										99994
									],
									[
										100229,
										100237
									],
									[
										100314,
										100322
									],
									[
										100550,
										100558
									],
									[
										100568,
										100576
									],
									[
										100579,
										100587
									],
									[
										100596,
										100604
									],
									[
										100661,
										100669
									],
									[
										100732,
										100740
									],
									[
										100945,
										100953
									],
									[
										101020,
										101028
									],
									[
										101082,
										101090
									],
									[
										101092,
										101100
									],
									[
										101372,
										101380
									],
									[
										101396,
										101404
									],
									[
										101477,
										101485
									],
									[
										101503,
										101511
									],
									[
										101562,
										101570
									],
									[
										101728,
										101736
									],
									[
										101746,
										101754
									],
									[
										101801,
										101809
									],
									[
										101844,
										101852
									],
									[
										101856,
										101864
									],
									[
										101999,
										102007
									],
									[
										102105,
										102113
									],
									[
										102211,
										102219
									],
									[
										102317,
										102325
									],
									[
										102423,
										102431
									],
									[
										102504,
										102512
									],
									[
										102706,
										102714
									],
									[
										102817,
										102825
									],
									[
										103130,
										103138
									],
									[
										103191,
										103199
									],
									[
										103462,
										103470
									],
									[
										103683,
										103691
									],
									[
										103940,
										103948
									],
									[
										104219,
										104227
									],
									[
										104710,
										104718
									],
									[
										104866,
										104874
									],
									[
										105252,
										105260
									],
									[
										105532,
										105540
									],
									[
										105860,
										105868
									],
									[
										105883,
										105891
									],
									[
										106127,
										106135
									],
									[
										106350,
										106358
									],
									[
										106550,
										106558
									],
									[
										106745,
										106753
									],
									[
										107196,
										107204
									],
									[
										107512,
										107520
									],
									[
										107670,
										107678
									],
									[
										107906,
										107914
									],
									[
										108351,
										108359
									],
									[
										108528,
										108536
									],
									[
										108868,
										108876
									],
									[
										109003,
										109011
									],
									[
										109014,
										109022
									],
									[
										109109,
										109117
									],
									[
										109197,
										109205
									],
									[
										109230,
										109238
									],
									[
										109281,
										109289
									],
									[
										109313,
										109321
									],
									[
										109359,
										109367
									],
									[
										109391,
										109399
									],
									[
										109437,
										109445
									],
									[
										109469,
										109477
									],
									[
										109528,
										109536
									],
									[
										109630,
										109638
									],
									[
										109718,
										109726
									],
									[
										109786,
										109794
									],
									[
										109927,
										109935
									],
									[
										110015,
										110023
									],
									[
										110083,
										110091
									],
									[
										110224,
										110232
									],
									[
										110312,
										110320
									],
									[
										110380,
										110388
									],
									[
										110702,
										110710
									],
									[
										110899,
										110907
									],
									[
										110925,
										110933
									],
									[
										110975,
										110983
									],
									[
										111335,
										111343
									],
									[
										111758,
										111766
									],
									[
										112262,
										112270
									],
									[
										112305,
										112313
									],
									[
										112748,
										112756
									],
									[
										112989,
										112997
									],
									[
										113127,
										113135
									],
									[
										113408,
										113416
									],
									[
										113595,
										113603
									],
									[
										113826,
										113834
									],
									[
										113925,
										113933
									],
									[
										114154,
										114162
									],
									[
										114412,
										114420
									],
									[
										114578,
										114586
									],
									[
										114730,
										114738
									],
									[
										114960,
										114968
									],
									[
										115034,
										115042
									],
									[
										115108,
										115116
									],
									[
										115241,
										115249
									],
									[
										115327,
										115335
									],
									[
										115483,
										115491
									],
									[
										115568,
										115576
									],
									[
										115679,
										115687
									],
									[
										115753,
										115761
									],
									[
										115885,
										115893
									],
									[
										116040,
										116048
									],
									[
										116488,
										116496
									],
									[
										116582,
										116590
									],
									[
										116635,
										116643
									],
									[
										116870,
										116878
									],
									[
										117085,
										117093
									],
									[
										117139,
										117147
									],
									[
										117187,
										117195
									],
									[
										117227,
										117235
									],
									[
										117267,
										117275
									],
									[
										117334,
										117342
									],
									[
										117384,
										117392
									],
									[
										117434,
										117442
									],
									[
										117481,
										117489
									],
									[
										117529,
										117537
									],
									[
										117572,
										117580
									],
									[
										117763,
										117771
									],
									[
										117888,
										117896
									],
									[
										117916,
										117924
									],
									[
										117971,
										117979
									],
									[
										117999,
										118007
									],
									[
										118054,
										118062
									],
									[
										118082,
										118090
									],
									[
										118142,
										118150
									],
									[
										118206,
										118214
									],
									[
										118259,
										118267
									],
									[
										118282,
										118290
									],
									[
										118323,
										118331
									],
									[
										118373,
										118381
									],
									[
										118414,
										118422
									],
									[
										118487,
										118495
									],
									[
										118660,
										118668
									],
									[
										118682,
										118690
									],
									[
										118794,
										118802
									],
									[
										118816,
										118824
									],
									[
										118924,
										118932
									],
									[
										118946,
										118954
									],
									[
										118995,
										119003
									],
									[
										119017,
										119025
									],
									[
										119295,
										119303
									],
									[
										119317,
										119325
									],
									[
										119457,
										119465
									],
									[
										119479,
										119487
									],
									[
										119660,
										119668
									],
									[
										119682,
										119690
									],
									[
										119733,
										119741
									],
									[
										119755,
										119763
									],
									[
										119955,
										119963
									],
									[
										120086,
										120094
									],
									[
										120114,
										120122
									],
									[
										120169,
										120177
									],
									[
										120197,
										120205
									],
									[
										120252,
										120260
									],
									[
										120280,
										120288
									],
									[
										120333,
										120341
									],
									[
										120409,
										120417
									],
									[
										120421,
										120429
									],
									[
										120483,
										120491
									],
									[
										120587,
										120595
									],
									[
										120730,
										120738
									],
									[
										120853,
										120861
									],
									[
										121009,
										121017
									],
									[
										121065,
										121073
									],
									[
										121184,
										121192
									],
									[
										121212,
										121220
									],
									[
										121273,
										121281
									],
									[
										121301,
										121309
									],
									[
										121362,
										121370
									],
									[
										121390,
										121398
									],
									[
										121447,
										121455
									],
									[
										121505,
										121513
									],
									[
										121540,
										121548
									],
									[
										121717,
										121725
									],
									[
										121830,
										121838
									],
									[
										122075,
										122083
									],
									[
										122148,
										122156
									],
									[
										122194,
										122202
									],
									[
										122353,
										122361
									],
									[
										122466,
										122474
									],
									[
										122639,
										122647
									],
									[
										122780,
										122788
									],
									[
										122922,
										122930
									],
									[
										123059,
										123067
									],
									[
										123087,
										123095
									],
									[
										123142,
										123150
									],
									[
										123170,
										123178
									],
									[
										123225,
										123233
									],
									[
										123253,
										123261
									],
									[
										123352,
										123360
									],
									[
										123425,
										123433
									],
									[
										123500,
										123508
									],
									[
										123573,
										123581
									],
									[
										123648,
										123656
									],
									[
										123721,
										123729
									],
									[
										123821,
										123829
									],
									[
										123924,
										123932
									],
									[
										124107,
										124115
									],
									[
										124250,
										124258
									],
									[
										124278,
										124286
									],
									[
										124347,
										124355
									],
									[
										124444,
										124452
									],
									[
										124472,
										124480
									],
									[
										124541,
										124549
									],
									[
										124603,
										124611
									],
									[
										124630,
										124638
									],
									[
										124760,
										124768
									],
									[
										124788,
										124796
									],
									[
										124857,
										124865
									],
									[
										124919,
										124927
									],
									[
										124946,
										124954
									],
									[
										125024,
										125032
									],
									[
										125051,
										125059
									],
									[
										125176,
										125184
									],
									[
										125222,
										125230
									],
									[
										125250,
										125258
									],
									[
										125293,
										125301
									],
									[
										125314,
										125322
									],
									[
										125399,
										125407
									],
									[
										125427,
										125435
									],
									[
										125471,
										125479
									],
									[
										125498,
										125506
									],
									[
										125540,
										125548
									],
									[
										125561,
										125569
									],
									[
										125646,
										125654
									],
									[
										125674,
										125682
									],
									[
										125718,
										125726
									],
									[
										125745,
										125753
									],
									[
										125788,
										125796
									],
									[
										125815,
										125823
									],
									[
										125856,
										125864
									],
									[
										125877,
										125885
									],
									[
										125979,
										125987
									],
									[
										126098,
										126106
									],
									[
										126161,
										126169
									],
									[
										126423,
										126431
									],
									[
										126648,
										126656
									],
									[
										126696,
										126704
									],
									[
										126724,
										126732
									],
									[
										126781,
										126789
									],
									[
										126809,
										126817
									],
									[
										126866,
										126874
									],
									[
										126894,
										126902
									],
									[
										126947,
										126955
									],
									[
										127061,
										127069
									],
									[
										127092,
										127100
									],
									[
										127234,
										127242
									],
									[
										127457,
										127465
									],
									[
										127592,
										127600
									],
									[
										127666,
										127674
									],
									[
										127814,
										127822
									],
									[
										127999,
										128007
									],
									[
										128040,
										128048
									],
									[
										128187,
										128195
									],
									[
										128313,
										128321
									],
									[
										128526,
										128534
									],
									[
										128700,
										128708
									],
									[
										128745,
										128753
									],
									[
										128896,
										128904
									],
									[
										129106,
										129114
									],
									[
										129312,
										129320
									],
									[
										129521,
										129529
									],
									[
										129753,
										129761
									],
									[
										129989,
										129997
									],
									[
										130026,
										130034
									],
									[
										130245,
										130253
									],
									[
										130330,
										130338
									],
									[
										130385,
										130393
									],
									[
										130494,
										130502
									],
									[
										130658,
										130666
									],
									[
										130825,
										130833
									],
									[
										131005,
										131013
									],
									[
										131166,
										131174
									],
									[
										131302,
										131310
									],
									[
										131489,
										131497
									],
									[
										131683,
										131691
									],
									[
										131846,
										131854
									],
									[
										132003,
										132011
									],
									[
										132160,
										132168
									],
									[
										132334,
										132342
									],
									[
										132432,
										132440
									],
									[
										132589,
										132597
									],
									[
										132713,
										132721
									],
									[
										132741,
										132749
									],
									[
										132865,
										132873
									],
									[
										132893,
										132901
									],
									[
										133041,
										133049
									],
									[
										133200,
										133208
									],
									[
										133226,
										133234
									],
									[
										133386,
										133394
									],
									[
										133412,
										133420
									],
									[
										133597,
										133605
									],
									[
										133723,
										133731
									],
									[
										133751,
										133759
									],
									[
										133878,
										133886
									],
									[
										133906,
										133914
									],
									[
										134086,
										134094
									],
									[
										134264,
										134272
									],
									[
										134416,
										134424
									],
									[
										134592,
										134600
									],
									[
										134961,
										134969
									],
									[
										135015,
										135023
									],
									[
										135106,
										135114
									],
									[
										135266,
										135274
									],
									[
										135316,
										135324
									],
									[
										135430,
										135438
									],
									[
										135486,
										135494
									],
									[
										135591,
										135599
									],
									[
										135640,
										135648
									],
									[
										135764,
										135772
									],
									[
										135806,
										135814
									],
									[
										135918,
										135926
									],
									[
										135966,
										135974
									],
									[
										135998,
										136006
									],
									[
										136100,
										136108
									],
									[
										136149,
										136157
									],
									[
										136181,
										136189
									],
									[
										136333,
										136341
									],
									[
										136527,
										136535
									],
									[
										136721,
										136729
									],
									[
										136767,
										136775
									],
									[
										136908,
										136916
									],
									[
										136945,
										136953
									],
									[
										137139,
										137147
									],
									[
										137199,
										137207
									],
									[
										137293,
										137301
									],
									[
										137340,
										137348
									],
									[
										137400,
										137408
									],
									[
										137631,
										137639
									],
									[
										138023,
										138031
									],
									[
										138378,
										138386
									],
									[
										138524,
										138532
									],
									[
										138962,
										138970
									],
									[
										139348,
										139356
									],
									[
										139569,
										139577
									],
									[
										139849,
										139857
									],
									[
										140117,
										140125
									],
									[
										140368,
										140376
									],
									[
										140521,
										140529
									],
									[
										140650,
										140658
									],
									[
										140687,
										140695
									],
									[
										140730,
										140738
									],
									[
										140774,
										140782
									],
									[
										140818,
										140826
									],
									[
										140866,
										140874
									],
									[
										141018,
										141026
									],
									[
										141069,
										141077
									],
									[
										141228,
										141236
									],
									[
										141324,
										141332
									],
									[
										141420,
										141428
									],
									[
										141718,
										141726
									],
									[
										142134,
										142142
									],
									[
										142287,
										142295
									],
									[
										142422,
										142430
									],
									[
										142459,
										142467
									],
									[
										142502,
										142510
									],
									[
										142546,
										142554
									],
									[
										142590,
										142598
									],
									[
										142638,
										142646
									],
									[
										142790,
										142798
									],
									[
										142841,
										142849
									],
									[
										143000,
										143008
									],
									[
										143096,
										143104
									],
									[
										143192,
										143200
									],
									[
										143490,
										143498
									],
									[
										143906,
										143914
									],
									[
										144059,
										144067
									],
									[
										144194,
										144202
									],
									[
										144231,
										144239
									],
									[
										144274,
										144282
									],
									[
										144318,
										144326
									],
									[
										144362,
										144370
									],
									[
										144410,
										144418
									],
									[
										144562,
										144570
									],
									[
										144613,
										144621
									],
									[
										144772,
										144780
									],
									[
										144868,
										144876
									],
									[
										144964,
										144972
									],
									[
										145262,
										145270
									],
									[
										145675,
										145683
									],
									[
										145828,
										145836
									],
									[
										145958,
										145966
									],
									[
										145995,
										146003
									],
									[
										146039,
										146047
									],
									[
										146083,
										146091
									],
									[
										146127,
										146135
									],
									[
										146175,
										146183
									],
									[
										146327,
										146335
									],
									[
										146378,
										146386
									],
									[
										146597,
										146605
									],
									[
										146642,
										146650
									],
									[
										146652,
										146660
									],
									[
										146692,
										146700
									],
									[
										146737,
										146745
									],
									[
										146747,
										146755
									],
									[
										146847,
										146855
									],
									[
										146892,
										146900
									],
									[
										146902,
										146910
									],
									[
										146942,
										146950
									],
									[
										146987,
										146995
									],
									[
										146997,
										147005
									],
									[
										147170,
										147178
									],
									[
										147313,
										147321
									],
									[
										147596,
										147616
									],
									[
										147861,
										147881
									],
									[
										148052,
										148072
									],
									[
										148256,
										148276
									],
									[
										148785,
										148788
									],
									[
										148893,
										148896
									],
									[
										149070,
										149073
									],
									[
										149306,
										149309
									],
									[
										149437,
										149440
									],
									[
										149444,
										149447
									],
									[
										149786,
										149789
									],
									[
										149992,
										149995
									],
									[
										150022,
										150025
									],
									[
										150086,
										150089
									],
									[
										150154,
										150157
									],
									[
										150194,
										150197
									],
									[
										150273,
										150276
									],
									[
										150362,
										150365
									],
									[
										150459,
										150462
									],
									[
										150497,
										150500
									],
									[
										150697,
										150700
									],
									[
										150733,
										150736
									],
									[
										150776,
										150779
									],
									[
										150820,
										150823
									],
									[
										150862,
										150865
									],
									[
										150910,
										150913
									],
									[
										151075,
										151078
									],
									[
										151207,
										151210
									],
									[
										151341,
										151344
									],
									[
										151469,
										151472
									],
									[
										151599,
										151602
									],
									[
										151732,
										151735
									],
									[
										151964,
										151967
									],
									[
										152000,
										152003
									],
									[
										152043,
										152046
									],
									[
										152087,
										152090
									],
									[
										152129,
										152132
									],
									[
										152177,
										152180
									],
									[
										152342,
										152345
									],
									[
										152474,
										152477
									],
									[
										152608,
										152611
									],
									[
										152736,
										152739
									],
									[
										152866,
										152869
									],
									[
										152999,
										153002
									],
									[
										153404,
										153407
									],
									[
										153427,
										153430
									],
									[
										153551,
										153554
									],
									[
										153574,
										153577
									],
									[
										153746,
										153749
									],
									[
										153894,
										153897
									],
									[
										154115,
										154118
									],
									[
										154195,
										154198
									],
									[
										154387,
										154390
									],
									[
										154550,
										154553
									],
									[
										154726,
										154729
									],
									[
										154848,
										154851
									],
									[
										154939,
										154942
									],
									[
										155090,
										155093
									],
									[
										155185,
										155188
									],
									[
										155197,
										155200
									],
									[
										155241,
										155244
									],
									[
										155431,
										155434
									],
									[
										155457,
										155460
									],
									[
										155491,
										155494
									],
									[
										155556,
										155559
									],
									[
										155623,
										155626
									],
									[
										155684,
										155687
									],
									[
										155757,
										155760
									],
									[
										155812,
										155815
									],
									[
										155838,
										155841
									],
									[
										155864,
										155867
									],
									[
										155890,
										155893
									],
									[
										155916,
										155919
									],
									[
										156204,
										156207
									],
									[
										156255,
										156258
									],
									[
										156287,
										156290
									],
									[
										156685,
										156688
									],
									[
										157076,
										157079
									],
									[
										157109,
										157112
									],
									[
										157457,
										157460
									],
									[
										157848,
										157851
									],
									[
										158245,
										158248
									],
									[
										158569,
										158572
									],
									[
										158741,
										158744
									],
									[
										158820,
										158823
									],
									[
										158861,
										158864
									],
									[
										159079,
										159082
									],
									[
										159103,
										159106
									],
									[
										159377,
										159380
									],
									[
										159476,
										159479
									],
									[
										159498,
										159501
									],
									[
										159543,
										159546
									],
									[
										159587,
										159590
									],
									[
										159682,
										159685
									],
									[
										159694,
										159697
									],
									[
										159740,
										159743
									],
									[
										159766,
										159769
									],
									[
										159904,
										159907
									],
									[
										159916,
										159919
									],
									[
										159959,
										159962
									],
									[
										160020,
										160023
									],
									[
										160116,
										160119
									],
									[
										160199,
										160202
									],
									[
										160222,
										160225
									],
									[
										160278,
										160281
									],
									[
										160439,
										160442
									],
									[
										160629,
										160632
									],
									[
										160651,
										160654
									],
									[
										160691,
										160694
									],
									[
										160723,
										160726
									],
									[
										160734,
										160737
									],
									[
										160786,
										160789
									],
									[
										160803,
										160806
									],
									[
										160919,
										160922
									],
									[
										161207,
										161210
									],
									[
										161297,
										161300
									],
									[
										161465,
										161468
									],
									[
										161515,
										161518
									],
									[
										161610,
										161613
									],
									[
										161689,
										161692
									],
									[
										161708,
										161711
									],
									[
										161757,
										161760
									],
									[
										161776,
										161779
									],
									[
										161877,
										161880
									],
									[
										161899,
										161902
									],
									[
										161933,
										161936
									],
									[
										161951,
										161954
									],
									[
										162142,
										162145
									],
									[
										162256,
										162259
									],
									[
										162446,
										162449
									],
									[
										162601,
										162604
									],
									[
										162984,
										162987
									],
									[
										163449,
										163452
									],
									[
										163461,
										163464
									],
									[
										163589,
										163592
									],
									[
										163627,
										163630
									],
									[
										163764,
										163767
									],
									[
										163776,
										163779
									],
									[
										163805,
										163808
									],
									[
										163856,
										163859
									],
									[
										163890,
										163893
									],
									[
										163920,
										163923
									],
									[
										163976,
										163979
									],
									[
										164016,
										164019
									],
									[
										164042,
										164045
									],
									[
										164082,
										164085
									],
									[
										164123,
										164126
									],
									[
										164166,
										164169
									],
									[
										164209,
										164212
									],
									[
										164259,
										164262
									],
									[
										164307,
										164310
									],
									[
										164342,
										164345
									],
									[
										164364,
										164367
									],
									[
										164387,
										164390
									],
									[
										164434,
										164437
									],
									[
										164447,
										164450
									],
									[
										164477,
										164480
									],
									[
										164505,
										164508
									],
									[
										164608,
										164611
									],
									[
										164620,
										164623
									],
									[
										164967,
										164970
									],
									[
										165161,
										165164
									],
									[
										165197,
										165200
									],
									[
										165315,
										165318
									],
									[
										165367,
										165370
									],
									[
										165422,
										165425
									],
									[
										165450,
										165453
									],
									[
										165505,
										165508
									],
									[
										165533,
										165536
									],
									[
										165588,
										165591
									],
									[
										165616,
										165619
									],
									[
										165673,
										165676
									],
									[
										165800,
										165803
									],
									[
										165828,
										165831
									],
									[
										165883,
										165886
									],
									[
										165911,
										165914
									],
									[
										165966,
										165969
									],
									[
										165994,
										165997
									],
									[
										166044,
										166047
									],
									[
										166182,
										166185
									],
									[
										166210,
										166213
									],
									[
										166271,
										166274
									],
									[
										166299,
										166302
									],
									[
										166360,
										166363
									],
									[
										166388,
										166391
									],
									[
										166442,
										166445
									],
									[
										166499,
										166502
									],
									[
										166535,
										166538
									],
									[
										166656,
										166659
									],
									[
										166684,
										166687
									],
									[
										166739,
										166742
									],
									[
										166767,
										166770
									],
									[
										166822,
										166825
									],
									[
										166850,
										166853
									],
									[
										166893,
										166896
									],
									[
										166905,
										166908
									],
									[
										166949,
										166952
									],
									[
										166960,
										166963
									],
									[
										167022,
										167025
									],
									[
										167039,
										167042
									],
									[
										167097,
										167100
									],
									[
										167108,
										167111
									],
									[
										167170,
										167173
									],
									[
										167187,
										167190
									],
									[
										167245,
										167248
									],
									[
										167256,
										167259
									],
									[
										167318,
										167321
									],
									[
										167335,
										167338
									],
									[
										167414,
										167417
									],
									[
										167479,
										167482
									],
									[
										167519,
										167522
									],
									[
										167585,
										167588
									],
									[
										167678,
										167681
									],
									[
										167718,
										167721
									],
									[
										167775,
										167778
									],
									[
										167808,
										167811
									],
									[
										167848,
										167851
									],
									[
										167922,
										167925
									],
									[
										167950,
										167953
									],
									[
										168017,
										168020
									],
									[
										168048,
										168051
									],
									[
										168116,
										168119
									],
									[
										168144,
										168147
									],
									[
										168211,
										168214
									],
									[
										168275,
										168278
									],
									[
										168302,
										168305
									],
									[
										168327,
										168330
									],
									[
										168375,
										168378
									],
									[
										168456,
										168459
									],
									[
										168484,
										168487
									],
									[
										168551,
										168554
									],
									[
										168615,
										168618
									],
									[
										168642,
										168645
									],
									[
										168667,
										168670
									],
									[
										168720,
										168723
									],
									[
										168747,
										168750
									],
									[
										168772,
										168775
									],
									[
										168820,
										168823
									],
									[
										168907,
										168910
									],
									[
										168955,
										168958
									],
									[
										168983,
										168986
									],
									[
										169022,
										169025
									],
									[
										169047,
										169050
									],
									[
										169057,
										169060
									],
									[
										169132,
										169135
									],
									[
										169160,
										169163
									],
									[
										169204,
										169207
									],
									[
										169231,
										169234
									],
									[
										169269,
										169272
									],
									[
										169294,
										169297
									],
									[
										169304,
										169307
									],
									[
										169379,
										169382
									],
									[
										169407,
										169410
									],
									[
										169451,
										169454
									],
									[
										169478,
										169481
									],
									[
										169521,
										169524
									],
									[
										169548,
										169551
									],
									[
										169585,
										169588
									],
									[
										169610,
										169613
									],
									[
										169620,
										169623
									],
									[
										169710,
										169713
									],
									[
										169847,
										169850
									],
									[
										169875,
										169878
									],
									[
										169932,
										169935
									],
									[
										169960,
										169963
									],
									[
										170017,
										170020
									],
									[
										170045,
										170048
									],
									[
										170095,
										170098
									],
									[
										170141,
										170144
									],
									[
										170208,
										170211
									],
									[
										170240,
										170243
									],
									[
										170387,
										170390
									],
									[
										170400,
										170403
									],
									[
										170437,
										170440
									],
									[
										170474,
										170477
									],
									[
										170505,
										170508
									],
									[
										170600,
										170603
									],
									[
										170633,
										170636
									],
									[
										170639,
										170642
									],
									[
										170768,
										170771
									],
									[
										170800,
										170803
									],
									[
										170858,
										170861
									],
									[
										170904,
										170907
									],
									[
										170957,
										170960
									],
									[
										171107,
										171110
									],
									[
										171140,
										171143
									],
									[
										171146,
										171149
									],
									[
										171190,
										171193
									],
									[
										171205,
										171208
									],
									[
										171228,
										171231
									],
									[
										171360,
										171363
									],
									[
										171394,
										171397
									],
									[
										171417,
										171420
									],
									[
										171497,
										171500
									],
									[
										171560,
										171563
									],
									[
										171566,
										171569
									],
									[
										171611,
										171614
									],
									[
										171626,
										171629
									],
									[
										171649,
										171652
									],
									[
										171694,
										171697
									],
									[
										171717,
										171720
									],
									[
										171887,
										171890
									],
									[
										171909,
										171912
									],
									[
										172086,
										172089
									],
									[
										172146,
										172149
									],
									[
										172364,
										172367
									],
									[
										172573,
										172576
									],
									[
										172780,
										172783
									],
									[
										172989,
										172992
									],
									[
										173200,
										173203
									],
									[
										173411,
										173414
									],
									[
										173579,
										173582
									],
									[
										173772,
										173775
									],
									[
										173784,
										173787
									],
									[
										174051,
										174054
									],
									[
										174063,
										174066
									],
									[
										174347,
										174350
									],
									[
										174591,
										174594
									],
									[
										174922,
										174925
									],
									[
										175204,
										175207
									],
									[
										175240,
										175243
									],
									[
										175283,
										175286
									],
									[
										175327,
										175330
									],
									[
										175369,
										175372
									],
									[
										175417,
										175420
									],
									[
										175582,
										175585
									],
									[
										175714,
										175717
									],
									[
										175848,
										175851
									],
									[
										175976,
										175979
									],
									[
										176106,
										176109
									],
									[
										176239,
										176242
									],
									[
										176486,
										176489
									],
									[
										176522,
										176525
									],
									[
										176565,
										176568
									],
									[
										176609,
										176612
									],
									[
										176651,
										176654
									],
									[
										176699,
										176702
									],
									[
										176864,
										176867
									],
									[
										176996,
										176999
									],
									[
										177130,
										177133
									],
									[
										177258,
										177261
									],
									[
										177388,
										177391
									],
									[
										177521,
										177524
									],
									[
										177768,
										177771
									],
									[
										177804,
										177807
									],
									[
										177847,
										177850
									],
									[
										177891,
										177894
									],
									[
										177933,
										177936
									],
									[
										177981,
										177984
									],
									[
										178146,
										178149
									],
									[
										178278,
										178281
									],
									[
										178412,
										178415
									],
									[
										178540,
										178543
									],
									[
										178670,
										178673
									],
									[
										178803,
										178806
									],
									[
										179043,
										179046
									],
									[
										179079,
										179082
									],
									[
										179123,
										179126
									],
									[
										179167,
										179170
									],
									[
										179209,
										179212
									],
									[
										179257,
										179260
									],
									[
										179422,
										179425
									],
									[
										179554,
										179557
									],
									[
										179688,
										179691
									],
									[
										179816,
										179819
									],
									[
										179946,
										179949
									],
									[
										180079,
										180082
									]
								],
								"scope": ""
							}
						},
						"selection":
						[
							[
								150739,
								150739
							]
						],
						"settings":
						{
							"detect_indentation": false,
							"function_name_status_row": 3486,
							"line_numbers": false,
							"output_tag": 12,
							"result_base_dir": "",
							"result_file_regex": "^([^ \t].*):$",
							"result_line_regex": "^ +([0-9]+):",
							"scroll_past_end": true,
							"syntax": "Packages/Default/Find Results.hidden-tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 69900.0,
						"zoom_level": 1.0
					},
					"stack_index": 4,
					"type": "text"
				},
				{
					"buffer": 2,
					"file": "Configuration.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 30077,
						"regions":
						{
						},
						"selection":
						[
							[
								3935,
								3935
							]
						],
						"settings":
						{
							"function_name_status_row": 93,
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 1440.0,
						"zoom_level": 1.0
					},
					"stack_index": 1,
					"type": "text"
				},
				{
					"buffer": 3,
					"file": "ultralcd.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 101440,
						"regions":
						{
						},
						"selection":
						[
							[
								28596,
								28596
							]
						],
						"settings":
						{
							"function_name_status_row": 1053,
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 20607.0,
						"zoom_level": 1.0
					},
					"stack_index": 5,
					"type": "text"
				},
				{
					"buffer": 4,
					"file": "Marlin_main.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 182943,
						"regions":
						{
						},
						"selection":
						[
							[
								4301,
								4304
							]
						],
						"settings":
						{
							"function_name_status_row": 146,
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 1745.0,
						"zoom_level": 1.0
					},
					"stack_index": 3,
					"type": "text"
				},
				{
					"buffer": 5,
					"file": "Configuration_prusa.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 10553,
						"regions":
						{
						},
						"selection":
						[
							[
								2289,
								2289
							]
						],
						"settings":
						{
							"function_name_status_row": 76,
							"syntax": "Packages/C++/C++.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 6287.0,
						"zoom_level": 1.0
					},
					"stack_index": 2,
					"type": "text"
				},
				{
					"buffer": 6,
					"file": "pins.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 4690,
						"regions":
						{
						},
						"selection":
						[
							[
								2365,
								2365
							]
						],
						"settings":
						{
							"function_name_status_row": -1,
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 1674.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 28.0
	},
	"input":
	{
		"height": 34.0
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				1,
				1
			]
		],
		"cols":
		[
			0.0,
			1.0
		],
		"rows":
		[
			0.0,
			1.0
		]
	},
	"menu_visible": true,
	"output.find_results":
	{
		"height": 0.0
	},
	"pinned_build_system": "Packages/Makefile/Make.sublime-build",
	"project": "Firmware.sublime-project",
	"replace":
	{
		"height": 52.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_symbol":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"selected_group": 0,
	"settings":
	{
	},
	"show_minimap": true,
	"show_open_files": false,
	"show_tabs": true,
	"side_bar_visible": true,
	"side_bar_width": 284.0,
	"status_bar_visible": true,
	"template_settings":
	{
	}
}
